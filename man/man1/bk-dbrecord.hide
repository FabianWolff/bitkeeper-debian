.so ../bk-macros
.TH "bk dbrecord" 1 2003/01/21 "\*(BC" "\*(UM"
.SH NAME
bk dbrecord \- \*(BK database record overview
.SH DESCRIPTION
.LP
\*(BK provides database functionality via database records, also known
as DB files.  Each file implements one row (or record) of a database table.
A DB file
contains one or more key/value pairs.  The key is the name of the field
within the row and the value is the contents of that field within that
row. 
A DB file may be thought of as an associative array.
.SS FORMAT
.LP
The fields in the DB file are alphabetized and the general format is as follows:
.DS
@\fIFIELD1\fP
value\ of\ FIELD1
another line\ of\ FIELD1

.DE
.LP
If the value of a field has a line that starts with a '@' then that '@'
will be doubled to distinguish it from the start of a new field.
If a field cannot be represented in ascii, bk will store the data
packed in base64.  If this is the case, then a 'base64' will be put
after the field name.  NOTE: dbimplode and dbexplode handle this
detail automatically.
.SH DBFILE OPERATIONS
The primary command for operating on DB files is bk db,
which inserts, updates, queries, and deletes DB records.
The bk db command takes key names and values and hides the DB file
structure from the user.
Typically the user does not directly operate upon this structure.
However, for the most part DB files are treated like any
other revision-controlled files, and many of the regular bk
commands work on them.
There are some differences and additional tools described below.
.SS CREATING NEW DB FILES
To check in a manually created DB file, use bk dbnew.
There is no way to change a regular file into a DB file or vice-versa.
.SS CHECK IN AND CHECK OUT
.LP
The bk get and bk delta commands can be used to edit and change a DB
file.
.SS EXPLODE/IMPLODE
DB records are usually modified with the -s'update' option to bk db.
However,
sometimes it is easier to edit the fields individually.
Two helper commands, bk dbexplode and bk dbimplode, are provided to
assist with this.  The dbexplode command creates a subdirectory
containing files, with
each file named from a field name which contains that field's contents.
The dbimplode command collapses the exploded files into a DB file.
.LP
Note: the dbexplode command creates a 
.B copy
of the data in the subdirectory.
.SS CHECK IN
.LP
To check in an edited DB file:
.DS
bk dbimplode foo	# assuming you had exploded it
bk delta foo
.DE
.SS EXTRACTING DATA
.LP
You may use bk prs dspecs to extract field data over one or many DB files.
DB file fields are named
.if t \fB:%\fIFIELDNAME\fP:\fP
.if n :%<FIELDNAME>: 
Note the percent sign in front of the field name.
.SS EXAMPLE
.LP
The following is one way to create a DB record using bk db:
.DS
bk db -s'insert into my_table set field1 = "val",field2 = "val2"'
.DE
.SS EXAMPLE
.LP
The following example shows one way to create a DB file with several
fields by hand:
.DS
mkdir db
echo "This is data for field 1" > db/FIELD1
echo "This is data for field A" > db/FIELDA
echo "This is data for" > db/FIELDB
echo "@field B (starts with single @)" >> db/FIELDB
echo "This is data for field a" > db/FIELDa
echo -n "No newline at end of this field" > db/FIELDC
echo -e "Binary\\002Field" > db/BINARY_FIELD
bk dbimplode -ddb foo
bk dbnew foo
.DE
.LP
The following is the DB file generated by the first example above:
.DS
@BINARY_FIELD base64
QmluYXJ5AkZpZWxkCg==

@FIELD1
This is data for field 1

@FIELDA
This is data for field A

@FIELDB
This is data for
@@field B (starts with single @)

@FIELDC
No newline at end of this field
@FIELDa
This is data for field a

.DE
.SH "SEE ALSO"
.SA dbexplode 1
.SA dbimplode 1
.SA dbnew 1
.SA db 1
.SA delta 1
.SA get 1
.SA prs 1
.SH CATEGORY
.B Database
