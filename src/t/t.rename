# Copyright 1999-2000,2004-2006,2009-2010 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Because we use tar xmf we don't check for timestamp errors here.
unset _BK_DEVELOPER

# The purpose of this test is to demonstrate a rename bug.
# Suppose we have a file which starts out being named A.
# In one repository,
echo $N set up ......................................................$NL
trap 'echo failed' 0
set -e
commercial gca
mkdir src
cd src
echo Baseline > regression.sh
cat > INIT <<EOF
D 1.1 99/08/03 11:23:13-07:00 zack@zack.bitmover.com 0 0 0/0/0
c Baseline
P src/regression.sh
------------------------------------------------
EOF
bk delta $Q -i -IINIT regression.sh
bk commit $Q -yBaseline
bk -r check -a

# Now create two repositories with that file.
cd "$HERE"
rm gca/BitKeeper/log/repo_id
cp -rp gca a
cp -rp gca b

# By hand, move the file in this tree.
# Done by hand so we can force the date.
cd a/src
mkdir t
bk _mkdir t/SCCS
bk _mv SCCS/s.regression.sh t/SCCS/s.regression.sh
cd t
bk get $Q -e regression.sh
cat > INIT <<EOF
D 1.2 99/08/07 15:46:14-07:00 lm@lm.bitmover.com 0 0 0/0/0
c Rename: src/regression.sh -> src/t/regression.sh
P src/t/regression.sh
------------------------------------------------
EOF
bk delta $Q -IINIT regression.sh
bk commit $Q -yRename
bk get $Q -e regression.sh
cat > INIT <<EOF
D 1.3 99/08/07 15:48:49-07:00 lm@lm.bitmover.com 0 0 0/0/0
c obsolete
P src/t/regression.sh
------------------------------------------------
EOF
bk delta $Q -IINIT regression.sh
bk commit $Q -yObsolete
bk -r check -a

# Now add some deltas in the other tree, not moving it.
cd "$HERE"
cd b/src
bk get $Q -e regression.sh
cat > INIT <<EOF
D 1.2 99/08/06 11:22:32-07:00 zack@zack.bitmover.com 0 0 0/0/0
c Don't expect gzipping a uuencoded file to fail.
P src/regression.sh
------------------------------------------------
EOF
bk delta $Q -IINIT regression.sh
bk commit $Q -ywhatever
bk -r check -a
bk get $Q -e regression.sh
cat > INIT <<EOF
D 1.3 99/08/18 01:11:42-07:00 lm@lm.bitmover 0 0 0/0/0
c Some linger prs cleanups.
P src/regression.sh
------------------------------------------------
EOF
bk delta $Q -IINIT regression.sh
bk commit $Q -ywhatever
bk -r check -a
echo OK

# Now resync them in both directions.
cd "$HERE"
tar cf chkpt.tar a b
echo $N resync a to b ...............................................$NL
cd b
bk pull -R $Q "$HERE/a" || fail
bk resolve -l -d $Q >resolve.out 2>&1 <<EOF || fail -f resolve.out
m
C
u
EOF
cat > PRS <<EOF
P src/t/regression.sh
EOF
bk prs -hr+ src/t/SCCS/s.regression.sh | grep '^P ' | cat > PRS2
cmp -s PRS PRS2
if [ $? -ne 0 ]; then echo failed; cat resolve.out; diff PRS PRS2; exit 1; fi
echo OK
cd ..
rm -rf a b
tar xmf chkpt.tar
echo $N resync b to a ...............................................$NL
cd "$HERE/a"
bk pull -R $Q ../b
cd "$HERE/a"
cat > R <<EOF
m
C
EOF
bk resolve $Q < R >resolve.out 2>&1 || { echo failed; cat resolve.out; exit 1; }
cat > PRS <<EOF
P src/t/regression.sh
EOF
bk prs -hr+ src/t/SCCS/s.regression.sh | grep '^P ' | cat > PRS2
cmp -s PRS PRS2
if [ $? -ne 0 ]; then 
	echo 'failed'
	diff PRS PRS2
	exit 1
fi
echo OK

trap '' 0
set +e
