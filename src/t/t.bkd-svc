# Copyright 2005-2010 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Because some proxy disallow proxy for localhost
unsetHttpProxy
test "$PLATFORM" = "WIN32" || exit 0
BKDNAME=BKD-`bk getuser`
test X$_BK_REMOTEGZIP = X || GZIP=-E_BK_REMOTEGZIP=$_BK_REMOTEGZIP

echo $N Test basic service install and status .......................$NL
PORT=`port 52900`
bk service install $BKDNAME -EBK_REGRESSION=1 -p$PORT || fail
bk service status $BKDNAME > GOT || fail
DIR="`bk pwd -s`"
cat <<EOF >WANT1
Service:   $BKDNAME
Status:    RUNNING
Accepts:   STOP
Directory: $DIR
Options:   -EBK_REGRESSION=1 -p$PORT
User:      LocalSystem
EOF
cmpfiles WANT1 GOT
echo OK

echo $N Make sure that we can install a second service ..............$NL
mkdir "$HERE/bkd2"
cd "$HERE/bkd2"
PORT=`port 53000`
bk service install ${BKDNAME}2 -EBK_REGRESSION=1 -p$PORT -xchg
DIR="`bk pwd -s`"
cat <<EOF >WANT2
Service:   ${BKDNAME}2
Status:    RUNNING
Accepts:   STOP
Directory: $DIR
Options:   -EBK_REGRESSION=1 -p$PORT -xchg
User:      LocalSystem
EOF
bk service status ${BKDNAME}2 > GOT
cmpfiles WANT2 GOT
echo OK

echo $N Check that bk service list shows them both ..................$NL
bk service list | grep "^$BKDNAME" | bk sort > GOT
echo $BKDNAME > WANT
echo ${BKDNAME}2 >> WANT
cmpfiles WANT GOT
echo OK

echo $N Check that bk status -a shows them both .....................$NL
( cat "$HERE/WANT1" WANT2; echo --- ) | bk sort > WANT
bk service status -a | bk sort > GOT
cmpfiles WANT GOT
echo OK

echo $N Make sure that we reject reusing the same port ..............$NL
bk service install ${BKDNAME}3 -EBK_REGRESSION=1 -p$PORT -xchg 2>ERR && {
	fail should have failed
}
echo OK

echo $N Make sure that we can clean up the services .................$NL
bk service uninstall $BKDNAME || fail
bk service uninstall ${BKDNAME}2 || fail
bk service list | grep -q "^$BKDNAME" && {
	bk service list > ERR
	fail -f ERR should not be any services
}
echo OK

echo $N Create initial repository ...................................$NL
cd "$HERE"
commercial project
if [ ! -d BitKeeper/etc ]; then fail failed to make BitKeeper/etc; fi
if bk _test ! -f SCCS/s.ChangeSet; then fail failed to make ChangeSet; fi
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then
	bk pending > ERR
	fail -f ERR files are pending
fi
bk sane 2> sane.out || fail -f sane.out
echo OK

echo $N Create some data ............................................$NL
mkdir src
cd src
echo foo > foo.c
echo bar > bar.c
echo h > h.h
bk ci $Q -i foo.c bar.c h.h
BK="`bk bin`/bk"
test $PLATFORM = WIN32 && BK=${BK}.exe
for i in 1 2 3
do	cp $BK bk$i
done
bk new $Q bk?
bk commit $Q -ycset1
if bk _test ! -f SCCS/s.foo.c; then fail failed to create history; fi
echo OK

echo $N Time differences between service and regular bkd ............$NL
cd "$HERE"
bk clone $Q project copy || fail
test -d copy/BitKeeper/etc || fail
PORT=`port 53100`
bk bkd -d -p$PORT -ikill || fail
perl -e '
	$start = time;
	system("bk clone -q bk://localhost:$ARGV[0]/copy junk") && die;
	$stop = time;
	print 1 + $stop - $start, "\n";
' $PORT > BKDTIME || fail
bk _kill bk://localhost:$PORT
test -d junk/BitKeeper/etc || fail
rm -fr junk
bk service install $BKDNAME $GZIP -EBK_REGRESSION=1 -p$PORT
perl -e '
	$start = time;
	system("bk clone -q bk://localhost:$ARGV[0]/copy junk") && die;
	$stop = time;
	print 1 + $stop - $start, "\n";
' $PORT > SVCTIME || fail
bk service uninstall $BKDNAME
test -d junk/BitKeeper/etc || fail
rm -fr junk
# If it took 4 times longer to do the SVC, something is fishy
expr `cat BKDTIME` '*' 4 '>' `cat SVCTIME` > EXPR || {
	(
	cat BKDTIME
	cat SVCTIME
	) > ERR
	fail -f ERR failed BKDTIME SVCTIME
}
echo OK

echo $N start up the service in copy ................................$NL
cd "$HERE/copy"
bk service install $BKDNAME $GZIP -EBK_REGRESSION=1 -p$PORT
echo OK

echo $N die part way through a clone and make sure we clean locks ...$NL
cd "$HERE"
BK_DIE_OFFSET=10 bk clone bk://localhost:$PORT junk > OUT 2>&1
# cat OUT
cd "$HERE/copy"
for i in 1 2 3
do	bk lock -q && break
	sleep $i
done
bk lock -q || {
	bk lock -l > ERR
	fail -f ERR failed to clean up locks
}
cd "$HERE"
rm -rf junk
echo OK

# Win32 note: If bkd binary is on a network drive
# NT will refuse to start the bkd service. (permission denied)
# Please make sure the bk binary is on a local disk
# before you run this test.
echo $N "push a new changeset via bkd (no compression)" ...............$NL
cd "$HERE/project/src"
echo woo > woo.c
bk ci $Q -i woo.c
bk commit $Q -ycset1
bk push $Q -z0 bk://localhost:$PORT
cd "$HERE/copy/src"
if bk _test ! -f SCCS/s.woo.c; then fail; fi
bk service uninstall $BKDNAME
echo OK

echo $N "pull a new changeset via bkd (no compression)" ...............$NL
cd "$HERE/project/src"
echo zoo > zoo.c
bk ci $Q -i zoo.c
bk commit $Q -ycset1
cd "$HERE/project"
PORT=`port 53200`
bk service install $BKDNAME $GZIP -EBK_REGRESSION=1 -p$PORT 
cd "$HERE/copy/src"
bk pull -z0 bk://localhost:$PORT >OUT 2>&1
bk _test -f SCCS/s.zoo.c || fail -f OUT
bk service uninstall $BKDNAME
echo OK

echo $N "pull a new changeset via bkd (with compression)" .............$NL
cd "$HERE/project/src"
echo boo > boo.c
bk ci $Q -i boo.c
bk commit $Q -ycset1
cd "$HERE/project"
PORT=`port 53300`
bk service install $BKDNAME $GZIP -EBK_REGRESSION=1 -p$PORT 
cd "$HERE/copy/src"
bk pull $Q bk://localhost:$PORT
if bk _test ! -f SCCS/s.boo.c; then fail; fi
bk service uninstall $BKDNAME
echo OK

echo $N "pull via bkd -xpull" .........................................$NL
cd "$HERE/project"
PORT=`port 53400`
bk service install $BKDNAME $GZIP -EBK_REGRESSION=1 -p$PORT -xpull
cd "$HERE/copy/src"
bk pull bk://localhost:$PORT > pull.out 2>&1
grep -q "bkd has disabled" pull.out
if [ $? -ne 0 ]; then fail -f pull.out; fi
bk service uninstall $BKDNAME
echo OK

echo $N "push a new changeset via bkd (with compression)" .............$NL
cd "$HERE/copy"
PORT=`port 53500`
bk service install $BKDNAME $GZIP -EBK_REGRESSION=1 -p$PORT
cd "$HERE/project/src"
echo aoo > aoo.c
bk ci $Q -i aoo.c
bk commit $Q -ycset1
bk push $Q -z6 bk://localhost:$PORT
cd "$HERE/copy/src"
if bk _test ! -f SCCS/s.aoo.c; then fail; fi
bk service uninstall $BKDNAME
echo OK

echo $N clone a tree via bkd ........................................$NL
cd "$HERE/project"
PORT=`port 53600`
bk service install $BKDNAME $GZIP -EBK_REGRESSION=1 -p$PORT
bk clone $Q bk://localhost:$PORT "$HERE/copy2" || {
	bk service uninstall $BKDNAME
	fail clone failed
}
cd "$HERE/copy2/src"
if bk _test ! -f SCCS/s.aoo.c; then fail; fi
bk service uninstall $BKDNAME
echo OK

echo $N "pull a new changeset via bkd -xcd -xpush " ...................$NL
cd "$HERE/project/src"
echo coo > coo.c
bk ci $Q -i coo.c
bk commit $Q -ycset1
cd "$HERE/project"
PORT=`port 53700`
bk service install $BKDNAME $GZIP -EBK_REGRESSION=1 -p$PORT -xcd -xpush
cd "$HERE/copy/src"
bk pull $Q bk://localhost:$PORT
if bk _test ! -f SCCS/s.coo.c; then fail; fi
bk service uninstall $BKDNAME
echo OK

echo $N check a push to bkd with a gfile conflict ...................$NL
cd "$HERE/project"
PORT=`port 53800`
bk service install $BKDNAME $GZIP -EBK_REGRESSION=1 -p$PORT 
cd "$HERE/project"
echo data1 > conflict.c
cd "$HERE/copy"
echo data2 > old.c
bk new $Q old.c
bk commit $Q -yold.c || fail
bk push -c1 $Q bk://localhost:$PORT || fail
bk lock -U "$HERE/project"
cd "$HERE/copy"
bk mv old.c conflict.c
bk commit $Q -ygconflict
echo "" | bk push -v -c1 bk://localhost:$PORT > bk.out 2>&1
grep -q "Did not resolve 1 renames, no conflicts causing abort." bk.out
if [ $? -ne 0 ]; then fail -f bk.out; fi
rm -f  "$HERE/project/conflict.c"
echo OK

echo $N check http pull from bkd ....................................$NL
bk lock -U "$HERE/project"
cd "$HERE/project/src"
bk edit $Q bar.c
echo data3 > bar.c
bk delta $Q -ydata3 bar.c
bk commit $Q -ydata3
cd "$HERE/copy"
bk pull $Q http://localhost:$PORT/.
if [ $? -ne 0 ]; then fail; fi
echo OK

echo $N "check when server can't write to BitKeeper/tmp"...............$NL
bk unpull $Q -f|| fail
chmod -w "$HERE/project/BitKeeper/tmp"
bk pull $Q bk://localhost:$PORT/ || fail
chmod +w "$HERE/project/BitKeeper/tmp"
echo OK

echo $N check http clone from bkd ...................................$NL
cd "$HERE"
bk clone $Q http://localhost:$PORT "$HERE/project2" || {
	bk service uninstall $BKDNAME
	fail clone failed
}
echo OK

echo $N check http clone with bad -r from bkd .......................$NL
bk clone $Q -rbad http://localhost:$PORT "$HERE/junk2" 2> err && {
	fail should have failed
}
grep -q "rev bad doesn't exist" err || {
	fail -f err echo wrong error
}
bk service uninstall $BKDNAME
echo OK

echo $N Make sure bkd -C disallows cd to parent dir .................$NL
cd "$HERE/project/src"
PORT=`port 53900`
bk service install $BKDNAME $GZIP -EBK_REGRESSION=1 -C -p$PORT
cd "$HERE/copy"
bk pull bk://localhost:$PORT/"$HERE/project" > pull.out 2>&1
grep -q "ERROR-cannot cd to" pull.out
if [ $? -ne 0 ]; then fail -f pull.out; fi
bk pull bk://localhost:$PORT/.. > pull.out 2>&1
grep -q "ERROR-cannot cd to" pull.out
if [ $? -ne 0 ]; then fail -f pull.out; fi
bk pull bk://localhost:$PORT/sub/../../project > pull.out 2>&1
grep -q "ERROR-cannot cd to" pull.out
if [ $? -ne 0 ]; then fail -f pull.out; fi
bk service uninstall $BKDNAME
echo OK

echo $N Make sure bkd logs requests under the remote user name ......$NL
cd "$HERE/project"
cp /dev/null BitKeeper/log/repo_log
PORT=`port 54000`
bk service install $BKDNAME $GZIP -EBK_REGRESSION=1 -p$PORT -EBK_USER=garbage
cd "$HERE/copy"
for NAME in pull_USER USER_PULL CLONE PUSH
do	BK_USER=$NAME bk pull bk://localhost:$PORT > out 2>&1
	bk _usleep 250000
	grep -q $NAME "$HERE/project/BitKeeper/log/repo_log" || {
		(
		echo == repo log ==
		cat "$HERE/project/BitKeeper/log/repo_log"
		echo == OUT ==
		cat out
		) > ERR
		fail -f ERR failed to get name right in pull
	}
	rm -rf "$HERE/clone"
	BK_USER=CLONE bk clone $Q bk://localhost:$PORT "$HERE/clone"
	bk _usleep 250000
	grep -q CLONE "$HERE/project/BitKeeper/log/repo_log" || {
		fail -f "$HERE/project/BitKeeper/log/repo_log" failed to get name right in clone
	}
	BK_USER=PUSH bk push $Q bk://localhost:$PORT
	bk _usleep 250000
	grep -q PUSH "$HERE/project/BitKeeper/log/repo_log" || {
		fail -f "$HERE/project/BitKeeper/log/repo_log" failed to get name right in push
	}
done
bk lock -U
cd "$HERE/project"
bk lock -U
bk service uninstall $BKDNAME
echo OK
