# Copyright 1999-2001,2003,2005-2006,2011 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# The optional datefudge line is excluded from $BASE2
BASE=40
BASE2=`expr $BASE + 70`
cat > SAVE <<EOF
Hi there, this is file foo.
Hi there, this is file foo.
Hi there, this is file foo.
Hi there, this is file foo.
Hi there, this is file foo.
Hi there, this is file foo.
Hi there, this is file foo.
Hi there, this is file foo.
Hi there, this is file foo.
EOF
fresh_commercial project
echo $N Creating an empty file ......................................$NL
bk admin $Q -n empty
if [ $? -ne 0 ]; then echo Failed - exit code.; exit 1; fi
if bk _test ! -f SCCS/s.empty; then echo Failed.; exit 1; fi
set `bk _scat SCCS/s.empty | wc -w`
if [ $1 -ne $BASE ]; then echo Failed - wrong size $1 wanted $BASE.; exit 1; fi
echo OK
echo $N Creating the same file '(should fail)' ........................$NL
bk admin $Q -n empty 2> ERR
if [ $? -eq 0 ]; then echo Bad exit code 0.; exit 1; fi
echo OK
rm -f ERR
echo $N Creating a file from foo ....................................$NL
cp "$HERE/SAVE" foo_init
bk admin $Q -ifoo_init foo
if bk _test ! -f SCCS/s.foo; then echo Failed.; exit 1; fi
if [ ! -f foo_init ]; then echo Failed - gfile was removed.; exit 1; fi
set `bk _scat SCCS/s.foo | grep -v "^.cF" | wc -w`
if [ $1 -ne $BASE2 ]; then echo Failed - wrong size.; exit 1; fi
echo OK
echo $N Creating an empty file from /dev/null .......................$NL
bk admin $Q -i${DEV_NULL} empty2
if bk _test ! -f SCCS/s.empty2; then echo Failed.; exit 1; fi
set `bk _scat SCCS/s.empty2 | grep -v "^.cF" | wc -w`
# Accomodate Sun's stupid symlink and the space in Windows tmp path
if [ -h /dev/null -o "x$PLATFORM" = "xWIN32" ]
then	FUDGE=16
else	FUDGE=15
fi
if [ $1 -ne `expr $BASE + $FUDGE` ]; then echo Failed - wrong size $1 ne `expr $BASE + $FUDGE`.; exit 1; fi
echo OK
echo $N Creating a file from stdin ..................................$NL
bk admin $Q -i stdin < "$HERE/SAVE"
if bk _test ! -f SCCS/s.stdin; then echo Failed.; exit 1; fi
set `bk _scat SCCS/s.stdin | grep -v "^.cF" | wc -w`
if [ $1 -ne $BASE2 ]; then echo Failed - wrong size.; exit 1; fi
echo OK
cd "$HERE"; rm -rf project; mkdir project; cd project

echo $N Creating an empty file with rel 3.1 .........................$NL
bk admin $Q -r3.1 -n empty
if [ $? -ne 0 ]; then echo Failed - exit code.; exit 1; fi
if bk _test ! -f SCCS/s.empty; then echo Failed.; exit 1; fi
bk _scat SCCS/s.empty | grep -q 'd D 3.1 '
if [ $? -ne 0 ]; then echo Failed - exit code.; exit 1; fi
echo OK

cd "$HERE"; rm -rf project; mkdir project; cd project
echo $N Creating an empty file with rel 1.2.3.4 .....................$NL
bk admin $Q -r1.2.3.4 -n empty
if [ $? -ne 0 ]; then echo Failed - exit code.; exit 1; fi
if bk _test ! -f SCCS/s.empty; then echo Failed.; exit 1; fi
bk _scat SCCS/s.empty | grep -q 'd D 1.2.3.4 '
if [ $? -ne 0 ]; then echo Failed - exit code.; exit 1; fi
echo OK

cd "$HERE"; rm -rf project; mkdir project; cd project
echo $N Attempting bad create with rel 1.2.3 ........................$NL
bk admin $Q -r1.2.3 -n empty 2> ERR
if [ $? -eq 0 ]; then echo Failed - exit code.; exit 1; fi
echo OK

cd "$HERE"; rm -rf project; mkdir project; cd project
echo $N Attempting bad create with rel 1.2.3.4.9999 .................$NL
bk admin $Q -r1.2.3.4.9999 -n empty 2> ERR
if [ $? -eq 0 ]; then echo Failed - exit code.; exit 1; fi
echo OK

cd "$HERE"; rm -rf project
commercial project

echo This is the description. > "$HERE/D"
echo $N Creating a file with description ............................$NL
bk admin $Q -n --text="$HERE/D" foo
if bk _test ! -f SCCS/s.foo; then echo Failed.; exit 1; fi
# If the second clock ticked over, we didn't need the fudge.
set `bk _scat SCCS/s.foo | grep -v '^.cF' | wc -w`
if [ $1 -ne `expr $BASE + 4` ]; then echo Failed - wrong size $1.; exit 1; fi
bk _scat SCCS/s.foo | grep -q "`cat "$HERE/D"`"
if [ $? -ne 0 ]; then echo Failed - exit code.; exit 1; fi
echo OK

echo $N Removing description ........................................$NL
bk admin $Q -n --text="$HERE/D" bar
bk admin $Q --text= foo
bk admin $Q --text= bar
set `bk _scat SCCS/s.foo | grep -v "^.cF" | wc -w`
if [ $1 -ne $BASE ]; then echo Failed - wrong size $1 ; exit 1; fi
set `bk _scat SCCS/s.bar | grep -v "^.cF" | wc -w`
if [ $1 -ne $BASE ]; then echo Failed - wrong size $1 ; exit 1; fi
echo OK
echo $N And putting it back .........................................$NL
bk admin $Q --text="$HERE/D" bar
set `bk _scat SCCS/s.bar | grep -v "^.cF" | wc -w`
if [ $1 -ne `expr $BASE + 4` ]; then echo Failed - wrong size $1.; exit 1; fi
echo OK
echo $N One last text test ..........................................$NL
bk admin $Q -n -t junk 2>ERR
if [ $? -eq 0 ]; then echo Failed.; exit 1; fi
echo OK

cd "$HERE"; rm -rf project; commercial project
cp "$HERE/SAVE" foo_init
echo $N Creating a file with a comment ..............................$NL
bk admin $Q -n -y'THIS IS THE COMMENT' -ifoo_init foo
bk _scat SCCS/s.foo | grep -q "c THIS IS THE COMMENT"
if [ $? -ne 0 ]; then echo Failed.; exit 1; fi
echo OK

cd "$HERE"; rm -rf project; mkdir project; cd project
echo $N File w/ comment, text, release ..............................$NL
bk admin $Q -n --text="$HERE/D" -r1.2 -y'THIS IS THE COMMENT' foo
bk _scat SCCS/s.foo | grep -q "c THIS IS THE COMMENT"
if [ $? -ne 0 ]; then echo Bad comment.; exit 1; fi
bk _scat SCCS/s.foo | grep -q "`cat "$HERE/D"`"
if [ $? -ne 0 ]; then echo Failed - exit code.; exit 1; fi
echo OK
echo $N Making sure that admin -r1.2 -z fails .......................$NL
bk admin $Q -r1.2 -z foo 2>ERR
if [ $? -eq 0 ]; then echo Failed - exit code.; exit 1; fi
echo OK

# "admin -h A foo" used to fail
echo $N Checking argument processing ................................$NL
date > Z
bk ci $Q -i Z
bk admin $Q -h Z foo
if [ $? -ne 0 ]; then echo Failed.; exit 1; fi
echo OK

# test a graph which has a branch merged into a branch
echo $N Check that range connect on a branch works ..................$NL

cd "$HERE"; rm -rf project; commercial project
touch foo
bk ci $Q -i foo
bk co $Q -l foo
bk ci $Q -f -y1.2 foo
bk _get $Q -l -r1.1 foo
bk ci $Q -f -y1.1.1.1 foo
bk _get $Q -l -r1.1.1 foo
bk ci $Q -f -y1.1.1.2 foo
bk _get $Q -l -r1.1.1.1 foo
bk ci $Q -f -y1.1.2.1 foo
bk _get $Q -l -r1.1.1 -M1.1.2 foo
bk ci $Q -f -y1.1.1.3 foo
bk co $Q -l -M1.1.1 foo
bk ci $Q -f -y1.3 foo
bk prs -M -hd':I:\n' -r..1.1.1.3 foo > GOT
cat - <<EOF > WANT
1.1.1.3
1.1.2.1
1.1.1.2
1.1.1.1
1.1
1.0
EOF
checkfiles WANT GOT
bk prs -M -hd':I:\n' -r1.1.2.1..1.3 foo > GOT
cat - <<EOF > WANT
1.3
1.1.1.3
1.1.1.2
1.2
EOF
checkfiles WANT GOT
echo OK
