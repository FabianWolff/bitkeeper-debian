# Copyright 2007-2009,2011-2012,2014-2015 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

echo $N Initialize and test a good checksum .........................$NL
commercial project
# Make b1 - b2 with bad checksums
for x in 1 2; do
	echo this > b$x
	bk new $Q b$x
	bk edit $Q b$x
	echo that > b$x
	bk delta $Q -yokay b$x
	bk _scat b$x | perl -pe 's/K00450/K00451/' | bk undos > tmp
	chmod 444 tmp
	bk _mv tmp SCCS/s.b$x
	bk admin -z b$x || fail
done
# Make g1 - g2 with good checksums
for x in 1 2; do
	echo this > g$x
	bk new $Q g$x
	bk edit $Q g$x
	echo that > g$x
	bk delta $Q -yokay g$x
done
# check a bunch of combinations to see if checksums are good.
bk checksum -r+ g1 || fail
bk checksum g1 || fail
bk checksum -r+ g1 g2 || fail
bk checksum g1 g2 || fail
bk checksum -v g1 g2 2> GOT || fail
cat <<EOF > WANT
g1: no problems found
g2: no problems found
EOF
checkfiles WANT GOT
echo OK

test -d "$TESTDATA/exclude-merge" && {
echo $N Test for ignoring an excluded merge .........................$NL
cd "$HERE"
bk clone $Q "$TESTDATA/exclude-merge"
cd exclude-merge
# What a customer sees: it works
bk --config=no_graphverify:on checksum ChangeSet || fail
_BK_DEVELOPER="" bk checksum ChangeSet || fail
# What we see: it fails
bk checksum ChangeSet 2>ERR && fail -f ERR
grep -q "Last rev to fail 1.3" ERR || fail -f ERR
# But it is not fixable, even to the customer who can't see it.
echo OK

echo $N Test for fixing an excluded merge fails .....................$NL
ranbits=1234567890abcdef
echo "bk@bk.bitkeeper.com|file5|20050902193043|01746|a022a526fa5a428e" \
    | bk csetprune -q -k$ranbits - 2>ERR && fail -f ERR
cat <<EOF > WANT
Dual sum failure at 1.4 in ChangeSet
Last rev to fail 1.5(1443746616 20151002004336)
root time: 20040627230739
1 files still differ
csetprune: failed
EOF
cmpfiles WANT ERR
echo OK

echo $N But the csetprune part worked, check passes with cutoff .....$NL
bk --config=no_graphverify:1443746616 checksum ChangeSet || fail
echo OK
}

test -d "$TESTDATA/nested-exclude-merge" && {
echo $N Test for ignoring an excluded merge in a component ..........$NL
cd "$HERE"
bk --config=no_graphverify:on clone $Q "$TESTDATA/nested-exclude-merge"
cd nested-exclude-merge
# What a customer sees: it works
_BK_DEVELOPER="" bk -e checksum ChangeSet || fail
# What we see: it fails
bk -e checksum ChangeSet 2>ERR && fail -f ERR
grep -q "Last rev to fail 1.3" ERR || fail -f ERR
# but product is okay
bk checksum ChangeSet || fail
echo OK
}

test -d "$TESTDATA/bad_checksum" && {
echo $N Test removing a merge parent relationship to fix sum ........$NL
cd "$HERE"
bk clone $Q "$TESTDATA/bad_checksum" bad
cd bad
bk checksum BitKeeper/etc/logging_ok 2> ERR && fail -f ERR
grep -q 'Unneeded merge parent BitKeeper/etc/logging_ok' ERR || fail -f ERR
bk checksum --safe-fix BitKeeper/etc/logging_ok
bk checksum BitKeeper/etc/logging_ok || fail
echo OK
}

echo $N Test for specific checksum to be bad ........................$NL
cd "$HERE"/project
bk checksum -r+ b1 || fail
bk checksum -r1.1 b1 2> GOT && fail
echo 'Bad checksum 00451:00450 in b1|1.1' > WANT
checkfiles WANT GOT
echo OK

echo $N Test for finding a bad checksum in a file ...................$NL
bk checksum b1 2> GOT && fail
echo 'Bad checksum 00451:00450 in b1|1.1' > WANT
checkfiles WANT GOT
bk checksum -v b1 b2 2> GOT && fail
cat <<EOF > WANT
Bad checksum 00451:00450 in b1|1.1
b1: bad metadata in 1 deltas
Bad checksum 00451:00450 in b2|1.1
b2: bad metadata in 1 deltas
EOF
checkfiles WANT GOT
echo OK

echo $N Test for finding a bad checksum in a list of files ..........$NL
bk checksum -v g1 b1 g2 2> GOT && fail
cat <<EOF > WANT
g1: no problems found
Bad checksum 00451:00450 in b1|1.1
b1: bad metadata in 1 deltas
g2: no problems found
EOF
checkfiles WANT GOT
echo OK

echo $N Make some csets, alter the checksum and test a good one .....$NL
cat <<EOF | bk commit $Q -yr1.1 -
SCCS/s.b1|1.1
SCCS/s.b2|1.1
SCCS/s.g1|1.1
SCCS/s.g2|1.1
EOF
cat <<EOF | bk commit $Q -yr1.1 -
SCCS/s.b1|+
SCCS/s.b2|+
SCCS/s.g1|+
SCCS/s.g2|+
EOF
DSUM=`bk changes -r1.2 -nd:DSUM:`
if [ $DSUM = "41232" ]
then	NSUM="23765"
else	NSUM="41232"
fi
# Only change the checksum in 1.2
PROG="\$doit = / 1\\.2 / if /^\\001d/; s/K$DSUM/K$NSUM/ if \$doit;"
bk _scat ChangeSet | perl -pe "$PROG" | bk undos > tmp
chmod 444 tmp
bk _mv tmp SCCS/s.ChangeSet
bk admin -z ChangeSet
bk checksum -r+ ChangeSet || fail
bk checksum -vr+ ChangeSet 2> GOT || fail
cat <<EOF > WANT
ChangeSet: no problems found
EOF
checkfiles WANT GOT
echo OK

echo $N Test for cset checksum to be bad ............................$NL
bk checksum -r1.2 ChangeSet 2> GOT && fail
echo "Bad checksum $NSUM:$DSUM in ChangeSet|1.2" > WANT
checkfiles WANT GOT
bk checksum ChangeSet 2> GOT && fail
checkfiles WANT GOT
bk checksum -v ChangeSet 2> GOT && fail
echo "ChangeSet: bad metadata in 1 deltas" >> WANT
checkfiles WANT GOT
echo OK

echo $N Fix the files ...............................................$NL
bk checksum -v --safe-fix b1 ChangeSet g1 g2 b2 2> GOT && fail -f GOT
grep -q "bad metadata" GOT || fail -f GOT
bk checksum -fv b1 ChangeSet g1 g2 b2 2> GOT || fail -f GOT
cat <<EOF > WANT
b1: fixed bad metadata in 1 deltas
ChangeSet: fixed bad metadata in 1 deltas
g1: no problems found
g2: no problems found
b2: fixed bad metadata in 1 deltas
EOF
checkfiles WANT GOT
echo OK

test -d "$TESTDATA/xaraya-exclude-merge" && {
echo $N Test an exclude of a merge fails dual sum test ..............$NL
# We can turn off verify checking
bk --config=no_graphverify:on --cd="$TESTDATA/xaraya-exclude-merge" \
    bk checksum ChangeSet || fail
# Or run with it on - lists first item to fail
bk --cd="$TESTDATA/xaraya-exclude-merge" bk checksum ChangeSet 2> GOT && fail
cat <<EOF > WANT
Dual sum failure at 1.482 in ChangeSet
Last rev to fail 1.1638.2.1(1067763651 20031102090051)
root time: 20020928131446
EOF
cmpfiles WANT GOT
# 1 second before cutoff - lists last item to fail
bk --config=no_graphverify:1067763650 --cd="$TESTDATA/xaraya-exclude-merge" \
    bk checksum ChangeSet 2> GOT && fail -f GOT
cat <<EOF > WANT
Dual sum failure at 1.1638.2.1 in ChangeSet
Last rev to fail 1.1638.2.1(1067763651 20031102090051)
root time: 20020928131446
EOF
cmpfiles WANT GOT
# cutoff from above - no bad items found
bk --config=no_graphverify:1067763651 --cd="$TESTDATA/xaraya-exclude-merge" \
    bk checksum ChangeSet || fail
echo OK
}

echo $N Test a tag has no checksum problems .........................$NL
bk tag $Q TOP
test "`bk changes -ar=5 -d':DT:-:DS:'`" = T-5 || fail 4 no longer a tag
bk checksum -r=5 ChangeSet || fail tag checksum wrong
echo OK

echo $N Test an empty cset causes no problems .......................$NL
bk commit $Q -Ff --tag=EMPTY || fail commit failed
bk checksum -rEMPTY ChangeSet || fail empty checksum wrong
echo OK

echo $N Test that fixing checksums works with bkmerge ...............$NL
cd "$HERE"
commercial master
touch prune
bk new $Q prune
bk commit $Q -f
bk clone $Q --upgrade . ../client
touch foo
bk new $Q foo
bk commit $Q -f
cd ../client
touch bar
bk new $Q bar
bk commit $Q -f
bk pull $Q || fail
bk prs -r+ -hnd:ROOTKEY: prune > keys
bk csetprune $Q - < keys
bk checksum -r+ || fail
echo OK
