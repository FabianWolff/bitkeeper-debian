# Copyright 2001-2006,2014-2015 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# still need to check fdiff output.

D3="-Aall -a1,2,3 -d"

commercial project

# Tests for smerge
echo $N Create initial files ........................................$NL
cat > gca <<EOF
   won't change
   won't change either
   gca1
   gca2
   gca3
   gca4
   gca5
   gca6
   gca7
   gca8
   gca9
   gca10
   won't change
   won't change
EOF
bk new $Q gca || fail
bk edit $Q gca || fail
cat > gca <<EOF
   won't change
   won't change either
   right
   right
   right
   right
   right
   right
   right
   right
   right
   right
   won't change
   won't change
EOF
bk delta $Q -yremote gca || fail
bk _get -e $Q -r1.1 gca || fail
cat > gca <<EOF
   won't change
   won't change either
   gca1
   left
   left
   gca4
   gca5
   left
   left
   gca8
   left with a very very long line, I mean a line that is much much much longer that the standard 128 byte buffer that Wayne likes to use and makes Larry want to scream!
   gca10
   won't change
   won't change
EOF
cp gca V1.1.1.1
bk delta $Q -ylocal gca || fail
echo OK

echo $N Check default smerge output .................................$NL
bk smerge -l1.2 -r1.1.1.1 gca > out
bk smerge $D3 -l1.2 -r1.1.1.1 gca > out.open
checkfiles out out.open
sed 's/^\\//' > out2 <<EOF
   won't change
   won't change either
\<<<<<<< gca gca 1.1
   gca1
   gca2
   gca3
   gca4
   gca5
   gca6
   gca7
   gca8
   gca9
   gca10
\<<<<<<< local gca 1.2
   right
   right
   right
   right
   right
   right
   right
   right
   right
   right
\<<<<<<< remote gca 1.1.1.1
   gca1
   left
   left
   gca4
   gca5
   left
   left
   gca8
   left with a very very long line, I mean a line that is much much much longer that the standard 128 byte buffer that Wayne likes to use and makes Larry want to scream!
   gca10
>>>>>>>
   won't change
   won't change
EOF
checkfiles out out2
rm -f gca
echo OK

echo $N Check gca smerge output .....................................$NL
#also edit file
bk edit $Q gca || fail
bk smerge -g -l1.2 -r1.1.1.1 gca > out
if [ $? -ne 1 ]; then echo failed; exit 1; fi
bk smerge $D3 -g -l1.2 -r1.1.1.1 gca > out.open
checkfiles out out.open
sed 's/^\\//' > out2 <<EOF
   won't change
   won't change either
\<<<<<<< local gca 1.1 vs 1.2
-   gca1
-   gca2
-   gca3
-   gca4
-   gca5
-   gca6
-   gca7
-   gca8
-   gca9
-   gca10
+   right
+   right
+   right
+   right
+   right
+   right
+   right
+   right
+   right
+   right
\<<<<<<< remote gca 1.1 vs 1.1.1.1
    gca1
-   gca2
-   gca3
+   left
+   left
    gca4
    gca5
-   gca6
-   gca7
+   left
+   left
    gca8
-   gca9
+   left with a very very long line, I mean a line that is much much much longer that the standard 128 byte buffer that Wayne likes to use and makes Larry want to scream!
    gca10
\>>>>>>>
   won't change
   won't change
EOF
checkfiles out out2
echo OK

echo $N Check 2WAY smerge output ....................................$NL
bk smerge -2 -l1.2 -r1.1.1.1 gca > out
if [ $? -ne 1 ]; then echo failed; exit 1; fi
bk smerge $D3 -2 -l1.2 -r1.1.1.1 gca > out.open
checkfiles out out.open
sed 's/^\\//' >want <<EOF
   won't change
   won't change either
\<<<<<<< local gca 1.2
   right
   right
   right
   right
   right
   right
   right
   right
   right
   right
\<<<<<<< remote gca 1.1.1.1
   gca1
   left
   left
   gca4
   gca5
   left
   left
   gca8
   left with a very very long line, I mean a line that is much much much longer that the standard 128 byte buffer that Wayne likes to use and makes Larry want to scream!
   gca10
\>>>>>>>
   won't change
   won't change
EOF
cmpfiles want out
echo OK

echo $N Check new-only smerge output ................................$NL
bk smerge -n -l1.2 -r1.1.1.1 gca > out
if [ $? -ne 1 ]; then echo failed; exit 1; fi
bk smerge $D3 -n -l1.2 -r1.1.1.1 gca > out.open
checkfiles out out.open
sed 's/^\\//' > want <<EOF
   won't change
   won't change either
\<<<<<<< local gca 1.1 vs 1.2
+   right
+   right
+   right
+   right
+   right
+   right
+   right
+   right
+   right
+   right
\<<<<<<< remote gca 1.1 vs 1.1.1.1
    gca1
+   left
+   left
    gca4
    gca5
+   left
+   left
    gca8
+   left with a very very long line, I mean a line that is much much much longer that the standard 128 byte buffer that Wayne likes to use and makes Larry want to scream!
    gca10
\>>>>>>>
   won't change
   won't change
EOF
cmpfiles want out
echo OK

echo $N Setup a set GCA baseline ....................................$NL
bk clean gca || fail
bk _get $Q -e -M1.1.1.1 -r1.2 gca || fail
cat > gca <<EOF
   won't change
   won't change either
   gca1
   left
   left
   right
   right
   left
   left
   right
   left
   gca10
   won't change
   won't change
EOF
bk delta $Q -y1.3 gca || fail
bk _get $Q -e -r1.2 -M1.1.1.1 gca || fail
cat > gca <<EOF
   won't change
   won't change either
   gca1
   right
   right
   right
   right
   left
   left
   right
   left
   right
   won't change
   won't change
EOF
bk delta $Q -y1.1.1.2 gca || fail
bk smerge -g -Aall -a9 -l1.2.1.1 -r1.3 gca > out
# exit 1
sed 's/^\\//' > out2 <<EOF
   won't change
   won't change either
\<<<<<<< local gca 1.1.1.1+1.2 vs 1.2.1.1
-   left
-   left
-   left
-   left
-   left with a very very long line, I mean a line that is much much much longer that the standard 128 byte buffer that Wayne likes to use and makes Larry want to scream!
-   right
-   right
-   right
-   right
+   gca1
    right
    right
    right
    right
+   left
+   left
    right
+   left
    right
\<<<<<<< remote gca 1.1.1.1+1.2 vs 1.3
+   gca1
    left
    left
-   left
-   left
-   left with a very very long line, I mean a line that is much much much longer that the standard 128 byte buffer that Wayne likes to use and makes Larry want to scream!
-   right
-   right
-   right
-   right
-   right
-   right
-   right
    right
    right
+   left
+   left
    right
+   left
+   gca10
\>>>>>>>
   won't change
   won't change
EOF
checkfiles out out2
echo OK

echo $N Check handling of bad versions ..............................$NL
bk smerge -n -l1.2 -r1.1.1.3 gca > out 2> err
if [ $? -ne 2 ]; then echo failed; exit 1; fi
grep -q 'ERROR: couldn.t find 1.1.1.3' err || fail
echo OK

echo $N Trying adding annotations ...................................$NL
bk smerge -gIm -l1.2 -r1.1.1.1 gca > out
if [ $? -ne 1 ]; then echo failed; exit 1; fi
bk smerge $D3 -gIm -l1.2 -r1.1.1.1 gca > out.open
checkfiles out out.open
sed 's/^\\//' > new <<EOF
1.1                   |    won't change
1.1                   |    won't change either
\<<<<<<< local gca 1.1 vs 1.2
-1.1-d1.2              |    gca1
-1.1-d1.2              |    gca2
-1.1-d1.2              |    gca3
-1.1-d1.2              |    gca4
-1.1-d1.2              |    gca5
-1.1-d1.2              |    gca6
-1.1-d1.2              |    gca7
-1.1-d1.2              |    gca8
-1.1-d1.2              |    gca9
-1.1-d1.2              |    gca10
+1.2                   |    right
+1.2                   |    right
+1.2                   |    right
+1.2                   |    right
+1.2                   |    right
+1.2                   |    right
+1.2                   |    right
+1.2                   |    right
+1.2                   |    right
+1.2                   |    right
\<<<<<<< remote gca 1.1 vs 1.1.1.1
 1.1                   |    gca1
-1.1-d1.1.1.1          |    gca2
-1.1-d1.1.1.1          |    gca3
+1.1.1.1               |    left
+1.1.1.1               |    left
 1.1                   |    gca4
 1.1                   |    gca5
-1.1-d1.1.1.1          |    gca6
-1.1-d1.1.1.1          |    gca7
+1.1.1.1               |    left
+1.1.1.1               |    left
 1.1                   |    gca8
-1.1-d1.1.1.1          |    gca9
+1.1.1.1               |    left with a very very long line, I mean a line that is much much much longer that the standard 128 byte buffer that Wayne likes to use and makes Larry want to scream!
 1.1                   |    gca10
\>>>>>>>
1.1                   |    won't change
1.1                   |    won't change
EOF
cmp -s out new
if [ $? -ne 0 ]; then echo failed; sdiff out new; exit 1; fi
echo OK

echo $N Test automerging ............................................$NL
bk unedit $Q gca || fail
bk _get -e $Q -r1.1 gca || fail
cat > gca <<EOF
   won't change much
   won't change either
   right1
   gca2
   gca3
   gca4
   right4.5
   gca5
   gca6
   gca7
   gca8
   gca9
   gca10
   won't change
   won't change
EOF
bk delta $Q -ylocal2 gca || fail
bk smerge -l1.1.2.1 -r1.1.1.1 gca > out
if [ $? -ne 0 ]; then echo failed; cat out; exit 1; fi
bk smerge $D3 -l1.1.2.1 -r1.1.1.1 gca > out.open
checkfiles out out.open
cat > out2 <<EOF
   won't change much
   won't change either
   right1
   left
   left
   gca4
   right4.5
   gca5
   left
   left
   gca8
   left with a very very long line, I mean a line that is much much much longer that the standard 128 byte buffer that Wayne likes to use and makes Larry want to scream!
   gca10
   won't change
   won't change
EOF
checkfiles out out2
echo OK

echo $N Verify that content merge was needed ........................$NL
bk smerge -gA3 -l1.1.2.1 -r1.1.1.1 gca > out
if [ $? -ne 1 ]; then echo failed; exit 1; fi
bk smerge $D3 -gA3 -l1.1.2.1 -r1.1.1.1 gca > out.open
checkfiles out out.open
sed 's/^\\//' > want <<EOF
   won't change much
   won't change either
\<<<<<<< local gca 1.1 vs 1.1.2.1
-   gca1
+   right1
    gca2
    gca3
\<<<<<<< remote gca 1.1 vs 1.1.1.1
    gca1
-   gca2
-   gca3
+   left
+   left
\>>>>>>>
   gca4
   right4.5
   gca5
   left
   left
   gca8
   left with a very very long line, I mean a line that is much much much longer that the standard 128 byte buffer that Wayne likes to use and makes Larry want to scream!
   gca10
   won't change
   won't change
EOF
cmpfiles want out
echo OK

echo $N Check range options .........................................$NL
bk smerge -sgA3 -R2..10 -l1.1.2.1 -r1.1.1.1 gca > out
if [ $? -ne 1 ]; then echo failed; exit 1; fi
sed 's/^\\//' <<EOF > WANT
     3	   won't change either
\<<<<<<< local gca 1.1 vs 1.1.2.1
-     5	   gca1
+     6	   right1
      7	   gca2
      8	   gca3
\<<<<<<< remote gca 1.1 vs 1.1.1.1
      5	   gca1
-     7	   gca2
-     8	   gca3
+     9	   left
+    10	   left
>>>>>>>
EOF
cmpfiles out WANT
echo OK

#echo $N "Check versions with excludes (and identical versions)........$NL"
#bk smerge -g gca 1.1.2.1-1.1.2.1 1.1.1.1 > out
#diff -u out V1.1.1.1 > DIFF.OUT
#if [ $? -ne 0 ]; then echo failed; cat DIFF.OUT; exit 1; fi
#echo OK

echo $N "Check version argument parsing...............................$NL"
# too many versions
bk smerge -l1.1.2.1 -r1.1.1.1 gca 1 2> err && fail
# too few versions
bk smerge -l1.1.2.1 gca 2> err && fail
# bad string
#bk smerge -l1.1.2.1 -r1.1.b gca 2> err
#grep -q 'ERROR: Unable to parse version' err || fail
echo OK

echo $N "Check files that don't end with a newline ...................$NL"
echo $NX line without NL $NXL > bar
bk new $Q bar || fail
bk edit $Q bar || fail
echo a > bar
echo $NX line without NL $NXL >> bar
bk delta $Q -yremote bar || fail
bk _get -e $Q -r1.1 bar || fail
echo b > bar
echo $NX line without NL $NXL >> bar
cp bar bar.want
bk delta $Q -ylocal bar || fail
bk smerge -l1.1 -r1.1.1.1 bar > bar.out
cmp -s bar.out bar.want || { echo Failed to get correct merge; exit 1; }
bk smerge $D3 -l1.1 -r1.1.1.1 bar > bar.out.open
checkfiles bar.out bar.out.open
echo OK

echo $N Demonstrate the added_oneside hueristic .....................$NL
# Base file has some lines ending in a line which will appear again.
cat <<EOF > foo
A
B
C
last line of block matches
EOF
bk new $Q foo
bk edit $Q foo
# two edits: delete block, add something else which ends in the same line
cat $DEV_NULL > foo
bk ci $Q -l -m'foo' foo
cat <<EOF > foo
D
E
last line of block matches
EOF
bk ci $Q -m'foo' foo
# On a parallel branch ..
bk _get $Q -e -r1.1 foo
# Just edit somewhere in the middle of the original block
cat <<EOF > foo
A
B2
C
last line of block matches
EOF
bk ci $Q -m'foo' foo
# Collide the mess..
bk smerge -g -l1.3 -r1.1.1.1 foo > OUT
sed 's/^\\//' > WANT << EOF
D
E
last line of block matches
\<<<<<<< local foo 1.1 vs 1.3
-A
-B
-C
-last line of block matches
\<<<<<<< remote foo 1.1 vs 1.1.1.1
 A
-B
+B2
 C
 last line of block matches
\>>>>>>>
EOF
cmpfiles WANT OUT
echo OK

echo $N show bug with common trailing lines .........................$NL
bk smerge --show-merge-fn -g -A7 -l1.3 -r1.1.1.1 foo > OUT
sed 's/^\\//' > WANT <<EOF
\<<<<<<< local foo 1.1 vs 1.3 merge_common_footer
-A
-B
-C
+D
+E
\<<<<<<< remote foo 1.1 vs 1.1.1.1 merge_common_footer
 A
-B
+B2
 C
\>>>>>>>
last line of block matches
EOF
cmpfiles WANT OUT
echo OK

# Test a fmtool fdiff output with :-Im -f
echo $N verify an fdiff output format ...............................$NL
cat <<EOF > fdiffm
a
b
c
EOF
bk new $Q fdiffm
bk edit $Q fdiffm
cat <<EOF > fdiffm
main
b
c
main end
EOF
bk delta $Q -ynone fdiffm
bk _get $Q -e -r1.1
cat <<EOF > fdiffm
branch
b
c
branch end
EOF
bk delta $Q -ynone fdiffm
# Currently 7 chars - test with 9
UP2START=12345678
START=${UP2START}0
bk -?_BK_SEQ_START=$START smerge -Im -f -l1.1 -r1.1.1.1 fdiffm > fdiffm_R
bk -?_BK_SEQ_START=$START smerge $D3 -Im -f -l1.1 -r1.1.1.1 fdiffm > fdiffm_RD3
cat <<EOF > fdiffm_D
M 0
 1.1.1.1               | branch
L
 1.1                   | a
s
R
-1.1-d1.1.1.1          | a
+1.1.1.1               | branch
E ${UP2START}4
 1.1                   | b
 1.1                   | c
M ${UP2START}5
 1.1.1.1               | branch end
L
s
R
+1.1.1.1               | branch end
E -1
EOF
cmpfiles fdiffm_R fdiffm_D
cmpfiles fdiffm_RD3 fdiffm_D
echo OK

# Test a fmtool fdiff output with :-Im -f
echo $N verify an fdiff output format with no newline at the end.....$NL
cd "$HERE/project"
cat <<EOF > nonl.txt
gca start
1
2
3
end
EOF
bk new $Q nonl.txt
bk edit $Q nonl.txt
cat <<EOF > nonl.txt
local start
1
2
3
end
EOF
bk delta $Q -ylocal nonl.txt
bk _get $Q -e -r1.1 nonl.txt
cat <<EOF > nonl.txt
remote start
1
2
3
EOF
echo $NX "end"$NXL >> nonl.txt
bk delta $Q -yremote nonl.txt
bk smerge --show-merge-fn -Im -f -l1.1.1.1 -r1.2 nonl.txt > nonl_R
cat <<EOF >nonl_D
L 0
-1.1-d1.1.1.1          | gca start
h 0-3
+1.1.1.1               | remote start
h 0-6
s
R
-1.1-d1.2              | gca start
h 0-3
s
+1.2                   | local start
h 0-5
E 4
 1.1                   | 1
 1.1                   | 2
 1.1                   | 3
M 6 merge_only_one
 1.1.1.1               | end
L
-1.1-d1.1.1.1          | end
h 3-4
+1.1.1.1               | end
R
 1.1                   | end
s
E -1
EOF
checkfiles nonl_R nonl_D

# test range
bk smerge --show-merge-fn -R6..-1 -Im -f -l1.1.1.1 -r1.2 nonl.txt > GOT
cat <<EOF > WANT
M 6 merge_only_one
 1.1.1.1               | end
L
-1.1-d1.1.1.1          | end
h 3-4
+1.1.1.1               | end
R
 1.1                   | end
s
E -1
EOF
cmpfiles GOT WANT

sed 's/^\\//' <<EOF >nonl_D
\<<<<<<< local nonl.txt 1.1 vs 1.1.1.1
-gca start
+remote start
\<<<<<<< remote nonl.txt 1.1 vs 1.2
-gca start
+local start
\>>>>>>>
1
2
3
EOF
bk smerge -g -l1.1.1.1 -r1.2 nonl.txt > GOT
cp nonl_D WANT
echo $NX "end"$NXL >>WANT
checkfiles GOT WANT
bk smerge -g -Aall -l1.1.1.1 -r1.2 nonl.txt > GOT
cp nonl_D WANT
sed 's/^\\//' <<EOF >>WANT
\<<<<<<< local nonl.txt 1.1 vs 1.1.1.1
-end
+end
\>>>>>>>
EOF
checkfiles GOT WANT
echo OK

echo $N failures involving a disappearing newline in a merge ........$NL
cd "$HERE"
rm -rf project
commercial project
# Make something which ends without a newline.
printf "a\nb\nc" > foo
bk new $Q foo
bk commit $Q -yfoo foo
cd ..
bk clone $Q project copy
# put something after it.  First change will remove the 'c' line
# and replace it with 'c\n'.  Second change will append a block.
# Third change will remove the first change, restoring the sequence
# number for 'c', but since a token appears after it, will show up
# as 'c\n'.  Same token, different lenghth
cd project
bk edit $Q foo
printf "a\nb\nc\nd\n" > foo
bk delta $Q -yfoo foo
REV=`bk log -r+ -nd:I: foo`
bk edit $Q foo
printf "a\nb\nc\nd\ne\n" > foo
bk delta $Q -yfoo foo
bk edit $Q -x$REV foo
bk delta $Q -yfoo foo
bk commit $Q -yfoo foo
# create a conflict area that includes the 'c' token
cd ../copy
bk edit $Q foo
printf "a\nq\nk\nm\nv\n" > foo
bk delta $Q -yfoo foo
bk commit $Q -yfoo
printf "ul\n.\n" | bk pull $Q 2> ERR || fail -f ERR
echo OK

echo $N Test out merge_with_following_gca ...........................$NL
  printf " foo\n foo\n" > test8
bk new $Q test8
# Make two diffs to get the right weave; just #2 and weave has new blk at end
bk edit $Q test8
  printf " bar\n foo\n foo\n" > test8
bk delta $Q -ypart1 test8
bk edit $Q test8
  printf " foo\n foo\n bar\n foo\n foo\n" > test8
bk delta $Q -ypart2 test8
## Other branch of conflict - just make make a null delta
bk _get $Q -e -r1.1 test8
bk delta $Q -f -yempty test8
## First, demo diff as laid out in comment header (using 2 foo's; better test)
bk smerge -Aall -l1.3 -r1.1.1.1 test8 > GOT
sed 's/^\\//' <<EOF > WANT
\<<<<<<< gca test8 1.1
\<<<<<<< local test8 1.3
 foo
 foo
 bar
\<<<<<<< remote test8 1.1.1.1
\>>>>>>>
 foo
 foo
EOF
cmpfiles WANT GOT
# Then demo the impact of the new code, as described in header comment
bk smerge -Aall -a8 -l1.3 -r1.1.1.1 test8 > GOT
sed 's/^\\//' <<EOF > WANT
\<<<<<<< gca test8 1.1
 foo
 foo
\<<<<<<< local test8 1.3
 foo
 foo
 bar
 foo
 foo
\<<<<<<< remote test8 1.1.1.1
 foo
 foo
\>>>>>>>
EOF
cmpfiles WANT GOT
# Finally demo auto-merging of common header
# -a4: to split the common header
# -a1: to merge identical changes
bk smerge -Aall -a1 -a4 -a8 -l1.3 -r1.1.1.1 test8 > GOT
sed 's/^\\//' <<EOF > WANT
 foo
 foo
\<<<<<<< gca test8 1.1
\<<<<<<< local test8 1.3
 bar
 foo
 foo
\<<<<<<< remote test8 1.1.1.1
\>>>>>>>
EOF
cmpfiles WANT GOT
echo OK

echo $N Demo that -g output uses diff and not the weave .............$NL

if [ -d "$BK_ROOT/.bk" ]
then
# check a historical merge that shows what this fixes
# just in case:
# 1.117 == bryan@bigmac.bitmover.com|src/bk.c|20020820033927|43415
# 1.161.9.2 == lm@dylan.bitmover.com|src/bk.c|20020820175916|26573

bk smerge -g -l1.177 -r1.161.9.2 "`bk bin`"/bk.c |
    sed -n -e 's/[^ ]*bk.c/bk.c/' -e '/^<<</,/^>>>/p' -e '/^>>>/q' > OUT
cat <<EOF | sed 's/^\\//' > WANT
\<<<<<<< local bk.c 1.161.7.3 vs 1.177
 		if (try > 1) {
 			fprintf(stderr, "%s(%d): got lock on try %d.\n",
 			    av[0], getpid(), try);
+			fflush(stderr);
 		}
\<<<<<<< remote bk.c 1.161.7.3 vs 1.161.9.2
-		if (try > 1) {
-			fprintf(stderr, "%s(%d): got lock on try %d.\n",
-			    av[0], getpid(), try);
-		}
>>>>>>>
EOF
cmpfiles OUT WANT

# without this cset we get this:
# <<<<<<< local ../bk.c 1.161.7.3 vs 1.177
# -		if (try > 1) {
# -			fprintf(stderr, "%s(%d): got lock on try %d.\n",
# -			    av[0], getpid(), try);
# +		if (try > 1) {
# +			fprintf(stderr, "%s(%d): got lock on try %d.\n",
# +			    av[0], getpid(), try);
# +			fflush(stderr);
#  		}
# <<<<<<< remote ../bk.c 1.161.7.3 vs 1.161.9.2
# -		if (try > 1) {
# -			fprintf(stderr, "%s(%d): got lock on try %d.\n",
# -			    av[0], getpid(), try);
# -		}
# >>>>>>>
echo OK
else
	echo skipped
fi
