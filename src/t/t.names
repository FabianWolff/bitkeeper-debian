# Copyright 2000,2004-2006,2010,2015 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

echo $N Create a file ...............................................$NL
commercial project
echo data > foo.c
bk ci $Q -i foo.c
bk _mv SCCS/s.foo.c SCCS/s.bar.c
bk _mv SCCS/d.foo.c SCCS/d.bar.c
bk names bar.c 2> /dev/null || fail
if bk _test ! -f SCCS/s.foo.c; then echo fail; fi
bk commit $Q -ywhatever
echo OK

echo $N Run undo where we try to delete RESYNC/BitKeeper/etc ........$NL
touch afile
bk new $Q afile
bk commit $Q -yafile
bk mv -f afile BitKeeper/etc
bk commit $Q -ymv
bk undo $Q -fr+ || fail
echo OK

echo $N Identical gfile conflict should autoresolve .................$NL
cd "$HERE"
bk clone $Q project clone
cd project
date > date
bk new $Q date
bk commit $Q -ywhatever
bk cat date > "$HERE/clone/date"
bk get $Q date
cmpfiles  date "$HERE/clone/date"
cd "$HERE/clone"
bk _test -f SCCS/s.date && fail
echo q | bk pull -q > OUT 2>&1
test -s OUT && fail -f OUT Resolve should not produce any output
bk _test -f SCCS/s.date || fail failed to propogate data
echo OK

echo $N Different gfile conflict should not autoresolve .............$NL
cd "$HERE/project"
echo A > A
bk new $Q A
bk commit $Q -ywhatever
echo B > "$HERE/clone/A"
cd "$HERE/clone"
bk _test -f SCCS/s.A && fail
bk pull -R $Q
( echo ""
  echo q ) | bk resolve $Q > OUT 2>&1
grep -q 'has a name conflict with a file with the same name' OUT || fail -f OUT
test -d RESYNC || fail
bk _test -f SCCS/s.A && fail
echo OK

echo $N Setup circular rename .......................................$NL
cd ../project
bk rm A || fail     # avoid file case conflict
mkdir -p a/c/b
echo hi > a/c/b/d
bk new $Q a/c/b/d
echo d > a/c/b2
bk new $Q a/c/b2
bk _mv a/c/b/SCCS/s.d a/SCCS/s.c
bk _mv a/c/SCCS/s.b2 a/SCCS/s.b
bk _rm -rf a/c
bk get $Q a
bk -r prs -r+ -hnd'$if(:GFILE:!=:DPN:){:GFILE: -> :DPN:}' > GOT
cat <<EOF > WANT
a/b -> a/c/b2
a/c -> a/c/b/d
EOF
cmpfiles GOT WANT
bk -r names -v 2>OUT || fail -f OUT
cat <<EOF > WANT
names: a/b -> BitKeeper/RENAMES/1
names: a/c -> BitKeeper/RENAMES/2
names: BitKeeper/RENAMES/1 -> a/c/b2
names: BitKeeper/RENAMES/2 -> a/c/b/d
names: all rename problems corrected
EOF
cmpfiles OUT WANT
echo OK

echo $N Special sequence where during rename, a gfile is a dir ......$NL
bk _mv a/c/b/SCCS/s.d a/SCCS/s.c
bk _mv a/c/SCCS/s.b2 a/SCCS/s.b
bk _rm -rf a/c
bk clean $Q a
bk -r names -v 2>OUT || fail -f OUT

# It works, but has a moment where a gfile is a dir and prints a msg.
cat <<EOF > WANT
names: a/b -> a/c/b2
a/c has different file types, treating this file as read only.
names: a/c -> a/c/b/d
names: all rename problems corrected
EOF
cmpfiles OUT WANT

# this bug exists in released versions of bk
# but the released bk silently passes without fixing problems
echo OK

echo $N Repeat circular rename with block to require unwind .........$NL
bk _mv a/c/b/SCCS/s.d a/SCCS/s.c
bk _mv a/c/SCCS/s.b2 a/SCCS/s.b
bk _rm -rf a/c
mkdir b
bk clean date
bk mv SCCS/s.date date2/c/d/SCCS/s.date || fail
bk _mv date2/c/d/SCCS/s.date SCCS/s.xxx
bk _rm -rf date2/c
touch date2/c
bk clean $Q a
bk -r names -v 2>OUT && fail -f OUT

cat <<EOF > WANT
names: xxx -> BitKeeper/RENAMES/1
names: a/b -> a/c/b2
a/c has different file types, treating this file as read only.
names: a/c -> a/c/b/d
names: can't rename BitKeeper/RENAMES/1 -> date2/c/d/date
names: failed to rename files, restoring files to original locations
names: a/c/b/d -> a/c
names: a/c/b2 -> a/b
names: BitKeeper/RENAMES/1 -> xxx
EOF
cmpfiles OUT WANT
echo OK

echo -------------- nested tests

echo $N Swap components around ......................................$NL
cd "$HERE"
nested nest
# Make markers so I know if right directory is restored.
touch gcc/gcc gdb/gdb
mv gcc x
mv gdb gcc
mv x gdb
bk -r names $Q || fail
test -f gcc/gcc || fail
test -f gdb/gdb || fail
echo OK

echo $N Move components, but add a block to the fixing ..............$NL
mv gcc x
mv gdb gcc
touch gdb
bk -r names -v 2> ERR && fail -f ERR
cat <<EOF > WANT
names: gcc/ChangeSet -> BitKeeper/RENAMES/1/ChangeSet
names: x/ChangeSet -> gcc/ChangeSet
names: can't rename BitKeeper/RENAMES/1/ChangeSet -> gdb/ChangeSet
names: failed to rename files, restoring files to original locations
names: gcc/ChangeSet -> x/ChangeSet
names: BitKeeper/RENAMES/1/ChangeSet -> gcc/ChangeSet
EOF
cmpfiles ERR WANT
test -f x/gcc || fail
test -f gcc/gdb || fail
echo OK
