# Copyright 2006,2010-2011,2016 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

echo $N Create initial repository ...................................$NL
commercial project
echo foo > file
bk new $Q file
bk commit $Q -ywhatever file
echo OK

echo $N Check superset with no changes...............................$NL
cd "$HERE"
bk clone $Q project superset
cd superset
bk superset > ../GOT
test $? -ne 0 && {
	echo superset with no changes should exit 0
	exit 1
}
test -s ../GOT && {
	echo superset with no changes should be silent
	exit 1
}
echo OK

echo $N Check superset with no parent ...............................$NL
bk parent -qr
bk superset -d > ../GOT 2>&1
test $? -ne 1 && {
	echo superset with no parent should exit 1
	exit 1
}
grep -q 'has no pull parent.' ../GOT || {
	echo superset with no parent should tell you that
	cat ../GOT
	exit 1
}
echo OK

echo $N Check superset with no changes, no parent, w/ parent named ..$NL
bk superset ../project > ../GOT 2>&1
test $? -ne 0 && {
	echo superset with no changes should exit 0
	cat ../GOT
	exit 1
}
test -s ../GOT && {
	echo superset with no changes should be silent
	exit 1
}
echo OK
bk parent -q ../project

# We want to make sure that superset finds:
# - any extra files
# - any parked patches
# - any {undo,fix,unpull} patches
# - any pending patches (pulls)
# - any pending files
# - any local tags
# - any local changesets
# - any subrepos with any of the above
# but allows subrepos with no changes
echo $N Check superset with an extra file ...........................$NL
cd "$HERE/superset"
echo FOO > FOO
bk superset > ../GOT
test $? -ne 1 && {
	echo superset with changes should exit 1
	exit 1
}
grep -q FOO ../GOT || {
	echo superset missed an extra file
	exit 1
}
grep -q '=== Extra files ===' ../GOT || {
	echo superset failed to flag the file as an extra
	exit 1
}
echo OK

echo $N Check superset with a parked patch ..........................$NL
bk park -a -ywhatever 2>/dev/null
bk superset > ../GOT
test $? -ne 1 && {
	echo superset with parked changes should exit 1
	exit 1
}
grep -q '=== Parked files ===' ../GOT || {
	echo superset failed to flag the file as parked
	exit 1
}
rm -f BitKeeper/tmp/park*
echo OK

# XXX - should have a test to make sure fix actually leaves it in fix.patch
echo $N Check superset with a saved fix patch .......................$NL
bk superset > ../GOT || {
	echo should start clean
	cat ../GOT
	exit 1
}
echo bogus > BitKeeper/tmp/fix.patch
bk superset > ../GOT
test $? -ne 1 && {
	echo superset with fix patch should exit 1
	exit 1
}
grep -q '=== fix patch ===' ../GOT || {
	echo superset failed to flag it as a fix patch
	exit 1
}
rm -f BitKeeper/tmp/fix.patch
echo OK

echo $N Check superset with a saved collapse patch ..................$NL
bk superset > ../GOT || {
	echo should start clean
	cat ../GOT
	exit 1
}
echo bogus > BitKeeper/tmp/collapse.patch
bk superset > ../GOT
test $? -ne 1 && {
	echo superset with collapse patch should exit 1
	exit 1
}
grep -q '=== collapse patch ===' ../GOT || {
	echo superset failed to flag it as a fix patch
	exit 1
}
rm -f BitKeeper/tmp/collapse.patch
echo OK

# XXX - should have a test to make sure undo actually leaves it in undo.patch
# XXX - note that the user can specify a patch name, maybe we need to rm that?
echo $N Check superset with a saved undo patch ......................$NL
bk superset > ../GOT || {
	echo should start clean
	cat ../GOT
	exit 1
}
echo bogus > BitKeeper/tmp/undo.patch
bk superset > ../GOT
test $? -ne 1 && {
	echo superset with undo patch should exit 1
	exit 1
}
grep -q '=== undo patch ===' ../GOT || {
	echo superset failed to flag it as a undo patch
	exit 1
}
rm -f BitKeeper/tmp/undo.patch
echo OK

echo $N Check superset with a pull patch in PENDING .................$NL
bk superset > ../GOT || {
	echo should start clean
	cat ../GOT
	exit 1
}
mkdir PENDING
echo bogus > PENDING/2006-06-06
bk superset > ../GOT
test $? -ne 1 && {
	echo superset with pending should exit 1
	exit 1
}
grep -q '=== Possible pending patches ===' ../GOT || {
	echo superset failed to flag it as a pending patch
	exit 1
}
rm -rf PENDING
echo OK

echo $N Check superset with a pending file ..........................$NL
bk superset > ../GOT || {
	echo should start clean
	cat ../GOT
	exit 1
}
mkdir pending
cd pending
echo foo > bar
bk new $Q bar
cd ..
bk superset > ../GOT
test $? -ne 1 && {
	echo superset with pending should exit 1
	exit 1
}
grep -q pending/bar ../GOT || {
	echo superset missed a pending file
	exit 1
}
grep -q '=== Pending files ===' ../GOT || {
	echo superset failed to flag it as a pending file
	exit 1
}
bk _rm -rf pending
echo OK

echo $N Check superset with a clean subrepo .........................$NL
bk superset > ../GOT || {
	echo should start clean
	cat ../GOT
	exit 1
}
bk clone $Q "$HERE/project" subrepo
bk superset > ../GOT
test $? -ne 0 && {
	echo superset with no changes should exit 0
	exit 1
}
test -s ../GOT && {
	echo superset with no changes should be silent
	exit 1
}
echo OK

echo $N Check superset with a dirty subrepo -- new cset .............$NL
cd subrepo
touch anewfile
bk new $Q anewfile
bk commit $Q -f
cd ..
bk superset > ../GOT 2>&1
test $? -eq 1 || fail superset with dirty subrepo should exit 1
grep -q '=== Subrepository subrepo ===' ../GOT || fail -f ../GOT
grep -q '=== Local changesets ===' ../GOT || fail -f ../GOT
cd subrepo
bk undo -qsfr+ || fail
cd ..
echo OK

echo $N Check superset with a dirty subrepo -- extra file ...........$NL
echo foo > subrepo/bar
bk superset > ../GOT
test $? -ne 1 && {
	echo superset with dirty subrepo should exit 1
	exit 1
}
grep -q '=== Subrepository subrepo ===' ../GOT || {
     	fail -f ../GOT superset with dirty subrepo should flag it as a subrepo
}
grep -q '    === Extra files ===' ../GOT || {
	echo superset with dirty subrepo should have extra files title
	exit 1
}
grep -q '    bar' ../GOT || {
	echo superset with dirty subrepo should list the extras
	cat ../GOT
	exit 1
}
echo OK

echo $N Check superset with a dirty subrepo with no parent ..........$NL
cd subrepo
bk parent -qr
cd ..
BK_SHOWPROC="$HERE/LOG" bk superset > ../GOT 2>&1
test $? -ne 1 && {
	echo superset with dirty subrepo should exit 1
	exit 1
}
grep -q '=== Subrepository subrepo ===' ../GOT || {
	echo failed to look at subrepo
	exit 1
}
grep -q '    === Extra files ===' ../GOT || {
	echo superset with dirty subrepo should have extra files title
	cat ../GOT
	cat "$HERE/LOG"
	cd subrepo
	bk sfiles -ax
	exit 1
}
grep -q '    bar' ../GOT || {
	echo superset with dirty subrepo should list the extras
	cat ../GOT
	exit 1
}
rm -rf subrepo
echo OK

# XXX - need to test when we have a subrepo but we don't know what they are
# comparing against because they named a different parent.

echo $N Check superset with a local cset ............................$NL
bk superset > ../GOT || {
	echo should start clean
	cat ../GOT
	exit 1
}
echo foo > bar
bk new $Q bar
bk commit $Q -ywhatever 
bk superset > ../GOT
test $? -ne 1 && {
	echo superset with local changeset should exit 1
	exit 1
}
grep -q '=== Local changesets ===' ../GOT || {
	echo superset should mark local changesets
	exit 1
}
echo OK

echo $N Check superset with a local cset with named parent ..........$NL
bk clone $Q "$HERE/project" "$HERE/other"
bk superset ../other > ../GOT
test $? -ne 1 && {
	echo superset with local changeset should exit 1
	exit 1
}
grep -q '=== Local changesets ===' ../GOT || {
	echo superset should mark local changesets
	exit 1
}
bk undo -qfsr+
rm -f bar
echo OK

echo $N Check superset with a local tag .............................$NL
bk superset > ../GOT || {
	echo should start clean
	cat ../GOT
	exit 1
}
bk tag $Q some_tag
bk superset > ../GOT
test $? -ne 1 && {
	echo superset with local tag should exit 1
	exit 1
}
grep -q '=== Local changesets ===' ../GOT || {
	echo superset should mark local changesets
	exit 1
}
echo OK

echo $N Check superset with a local tag with named parent ...........$NL
bk superset ../other > ../GOT
test $? -ne 1 && {
	echo superset with local tag should exit 1
	exit 1
}
grep -q '=== Local changesets ===' ../GOT || {
	echo superset should mark local changesets
	exit 1
}
echo OK

echo $N Check nested - parentless ...................................$NL
cd "$HERE"
fresh_nested prod
bk superset > ../GOT 2>&1
test $? -ne 1 && fail -f ../GOT "superset with no parent should exit 1"
grep -q 'has no pull parent.' ../GOT || \
	fail -f ../GOT "superset with no parent should tell you that"
grep -q 'Components with no known source' ../GOT || \
	fail -f ../GOT \
	"superset should complain about components with no known clones"
echo OK

echo $N Check nested - extra file in a component ....................$NL
cd "$HERE"
bk clone $Q prod prod-clone
cd prod-clone/gcc
echo FOO > FOO
cd ..
bk superset > ../GOT 2>&1
test $? -ne 1 && fail -f ../GOT "superset with changes should exit 1"
grep -q FOO ../GOT || fail -f ../GOT "superset missed an extra file"
grep -q '=== Extra files ===' ../GOT || \
	fail -f ../GOT "superset failed to flag the file as an extra"
echo OK

echo $N Check nested - pending file in a component ..................$NL
cd "$HERE"/prod-clone/gcc
bk new $Q FOO
cd ..
bk superset > ../GOT 2>&1
test $? -ne 1 && fail -f ../GOT "superset with pending should exit 1"
grep -q FOO ../GOT || fail -f ../GOT "superset missed a pending file"
grep -q '=== Pending files ===' ../GOT || \
	fail -f ../GOT "superset failed to flag the file as pending"
echo OK

echo $N Check nested - pending changeSet in a component .............$NL
cd "$HERE"/prod-clone/gcc
bk commit -S $Q -y'added FOO'
cd ..
bk superset > ../GOT 2>&1
test $? -ne 1 && fail -f ../GOT "superset with pending cset should exit 1"
perl -pe 's/[,:].*//' < ../GOT > ../GOT2
cat <<EOF > ../WANT
Repo
Parent
=== Components with no known sources ===
gcc
=== Pending files ===
    gcc/ChangeSet@1.2
      added FOO
    
EOF
cmpfiles ../WANT ../GOT2
echo OK

echo $N Check inside component - pending changeSet in a component ...$NL
cd "$HERE"/prod-clone/gcc
bk superset > ../../GOT2 2>&1 && fail -f ../../GOT2
cmpfiles ../../GOT ../../GOT2
# Commit and push the stuff to the parent to get ready for the next tests
bk commit -S $Q -y'stuff'
bk push $Q
echo OK

echo $N Check nested - parentless standalone repo in a product ......$NL
cd "$HERE"
fresh_commercial repo
cd ..
mv repo prod-clone
cd prod-clone
bk superset > ../GOT 2>&1
test $? -ne 1 && fail -f ../GOT "superset with a parentless subrepo should exit 1"
grep -q 'repo/ChangeSet' ../GOT || \
	fail -f ../GOT "superset failed to spot subrepo"
grep -q '=== Extra files ===' ../GOT || \
	fail -f ../GOT "superset failed to flag the repo as an extra"
echo OK

echo $N Check nested - standalone repo in a product .................$NL
cd "$HERE/prod-clone"
rm -rf repo
cd "$HERE"
fresh_commercial repo
cd ..
bk clone $Q repo prod-clone/repo
cd prod-clone
bk superset > ../GOT 2>&1
test $? -ne 1 && fail -f ../GOT "superset with a subrepo should exit 1"
grep -q '=== Extra files ===' ../GOT || \
	fail -f ../GOT "superset failed to flag the repo as an extra"
echo OK

echo $N Check nested - standalone repo in a component ...............$NL
cd "$HERE"
bk clone $Q repo prod-clone/gdb/repo
cd prod-clone
bk superset > ../GOT 2>&1
test $? -ne 1 && fail -f ../GOT "superset with a sub-subrepo should exit 1"
grep -q 'gdb/repo/ChangeSet' ../GOT || \
	fail -f ../GOT "superset failed to spot subrepo"
grep -q '=== Extra files ===' ../GOT || \
	fail -f ../GOT "superset failed to flag the repo as an extra"
echo OK

echo $N Check nested - standalone repo deeply nested ................$NL
cd "$HERE"
bk clone $Q repo prod-clone/gdb/repo/repo
cd prod-clone
bk superset > ../GOT 2>&1
test $? -ne 1 && \
	fail -f ../GOT "superset with deeply nested subrepos should exit 1"
grep -q 'gdb/repo/repo/ChangeSet' ../GOT || \
	fail -f ../GOT "superset failed to spot subrepo"
grep -q '=== Extra files ===' ../GOT || \
	fail -f ../GOT "superset failed to flag the repo as an extra"
echo OK

echo $N Check nested - extra files in subrepo .......................$NL
cd "$HERE/prod-clone"
echo FOO > repo/FOO
bk superset > ../GOT 2>&1
test $? -ne 1 && \
	fail -f ../GOT "superset with extra files in subrepos should exit 1"
grep -q '          FOO' ../GOT || \
	fail -f ../GOT "superset failed to spot extra files in subrepo"
grep -q '      === Extra files ===' ../GOT || \
	fail -f ../GOT "superset failed to flag the file as an extra"
echo OK

echo $N Check nested - extra files in subsubrepo ....................$NL
cd "$HERE/prod-clone"
echo BAR > gdb/repo/BAR
bk superset > ../GOT 2>&1
test $? -ne 1 && \
	fail -f ../GOT "superset with extra files in subrepos should exit 1"
grep -q '                BAR' ../GOT || \
	fail -f ../GOT "superset failed to spot extra files in subrepo"
grep -q '            === Extra files ===' ../GOT || \
	fail -f ../GOT "superset failed to flag the file as an extra"
echo OK

echo $N Check nested - extra files in deeply nested subrepo .........$NL
cd "$HERE/prod-clone"
echo BAR > gdb/repo/repo/BAZ
bk superset > ../GOT 2>&1
test $? -ne 1 && \
	fail -f ../GOT "superset with extra files in subrepos should exit 1"
grep -q '                      BAZ' ../GOT || \
	fail -f ../GOT "superset failed to spot extra files in subrepo"
grep -q '                  === Extra files ===' ../GOT || \
	fail -f ../GOT "superset failed to flag the file as an extra"
echo OK
