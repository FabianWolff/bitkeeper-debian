# Copyright 2005-2006,2014-2015 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


echo $N setup repos .................................................$NL
commercial project
mkdir BitKeeper/triggers
cat <<'END' > BitKeeper/triggers/pre-resolve.automerge
#!/bin/sh

#exit 0 # XXX
# list of files to merge.  'bar' included to show that files not
# in RESYNC still work.
FILES="foo bar"
bk prs -r+ -hnd':GFILE:' $FILES |
while read file; do
	test "$file" || continue
	# If get fails, we probably don't have a conflict on this file
	bk get -qe -M "$file" 2> /dev/null || continue
	bk merge -s "$file" > "$file" || exit 1
	bk ci -q -yauto-merge "$file" || exit 1
done

# converge all files ending in .uniq with 'sort -u'

bk sfiles '*.uniq' |
    bk prs -r+ -hnd'$if(:LREV:){$if(:LPN:=:RPN:){:GFILE:|:LREV:|:GREV:|:RREV:}}' - |
while IFS=\| read file l g r
do
	L="$BK_TMP"/uniq.local
	G="$BK_TMP"/uniq.gca
	R="$BK_TMP"/uniq.remote	
	bk get -qkpr$l "$file" > "$L"
	bk get -qkpr$g "$file" > "$G"
	bk get -qkpr$r "$file" > "$R"

	cmp -s "$L" "$G" || cmp -s "$R" "$G" || cmp -s "$L" "$R" || {
	        echo "my merge on $file"
		sort -u "$L" "$R" > "$file" && {
			bk get -qge -M "$file" 2> /dev/null && 
				bk ci -q -yauto-merge "$file"
		}
	}	
	rm -f "$L" "$G" "$R"
done
END
chmod +x BitKeeper/triggers/pre-resolve.automerge
bk new $Q BitKeeper/triggers/pre-resolve.automerge

cat <<END > foo
a
b
c
d
END
bk new $Q foo
bk commit $Q -ystart
cd "$HERE"
bk clone $Q project copy || fail
cd project
bk edit $Q foo
cat <<END > foo
a
b
b1
c
END
bk ci $Q -ymod1 foo
bk commit $Q -ymaster
cd "$HERE/copy"
bk edit $Q foo
cat <<END > foo
b
b2
c
d
END
bk ci $Q -ymod2 foo
bk commit $Q -yslave
echo OK

echo $N do pull .....................................................$NL
bk pull $Q || fail
bk get $Q foo
cat <<END > want
b
b1
b2
c
END
checkfiles foo want
echo OK

echo $N merge .uniq files ...........................................$NL
cd ../project
for f in a.uniq b.uniq c.uniq
do
	echo 1 > $f
	bk new $Q $f || fail
done
bk commit -yinit $Q || fail
cd ../copy
bk pull $Q || fail
bk edit $Q b.uniq c.uniq
echo 2 > b.uniq
echo 3 >> c.uniq
bk ci $Q -y2 b.uniq c.uniq || fail
bk commit $Q -y2 || fail
cd ../project
bk edit $Q a.uniq b.uniq || fail
echo 4 > a.uniq
echo 4 >> b.uniq
bk ci $Q -y4 a.uniq b.uniq || fail
bk commit $Q -y4 || fail
cd ../copy
echo q | bk pull $Q || fail

bk get $Q || fail
cat <<EOF > WANT
4
EOF
cmpfiles a.uniq WANT
cat <<EOF > WANT
1
2
4
EOF
cmpfiles b.uniq WANT
cat <<EOF > WANT
1
3
EOF
cmpfiles c.uniq WANT
echo OK
