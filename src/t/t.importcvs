# Copyright 2002-2006,2011-2012,2015 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


for i in /usr/bin /usr/gnu/bin
do	test -x $i/cvs && touch CVS
done
test -f CVS || {
	echo cvs not installed on this client ............................skipped
	exit 0
}

cvs --version | grep -q '^Concurrent.*(CVS) 1\.1' || {
	echo Wrong version of cvs installed on this client ...............skipped
	exit 0
}

# Any test that runs cvs admin will fail if there is a cvsadmin group
# and you are not in it.
# Easiest thing is to error on that.
echo $N Check that there is no cvsadmin group .......................$NL
grep -q cvsadmin /etc/group && fail Get rid of cvsadmin in /etc/group
echo OK

# build a sample CVS repository with branches and branches of
# branches.
#
# Here is a picture of what the CVS repository that gets created
# looks like: (time is represented vertically)
#
# trunk		branch2		branch1		branch1_1
# -----		-------		_______		---------
#
# start --------------------------\
#  |           	       	       	  |
# next ------------\   	       	  |
#  |		   |		  |
# end		   |		  |
#   		   |   		  |
# 		   |   		branch1
#              	   |   	       	  |
# 		   |   		next2 ------------\
# 		   |   		  |  		  |
# 		   |   		next3		  |
# 		   |   		     		  |
# 		   |   				branch1_1
# 		   |
# 		branch2

echo $N Create test CVS repository ..................................$NL
mkdir cvsroot
export CVSROOT="$HERE/cvsroot"
test $WINDOWS = YES && CVSROOT=`pwd`/cvsroot
cvs init || fail
mkdir "$CVSROOT/test"
cvs $Q co test || fail
cd test
# include yucky filename
if [ $WINDOWS = NO ]
then
	echo hi > "\\"
	cvs -Q new "\\" >/dev/null 2>&1 || fail
	cvs -Q commit -m"funny file" > /dev/null || fail
	rm "\\"
	cvs remove "\\" 2> /dev/null || fail
fi

cvsbuild()
{
	f="new_$1"
	echo $NUM > $f
	cvs -Q new $f >/dev/null 2>&1 || fail
	for p in $*
	do	f="sub_$p"
		if [ \! -f $f ]
		then	echo $NUM > $f
 			cvs -Q new $f >/dev/null 2>&1 || fail
		else
			echo $NUM >> $f
		fi
	done
	cvs -Q commit -m"commit $1" > /dev/null || fail
	cvs -Q tag "tag_$1" || fail
	NUM=`expr $NUM + 1`
}


NUM=0
cvsbuild start
cvs -Q tag -b branch1 || fail
sleep 1
cvsbuild next1 start
cvs -Q tag -b branch2 || fail
sleep 1
cvsbuild end next1 start backport
cd "$HERE"
cvs -Q co -dtest.branch1 -rbranch1 test >/dev/null 2>&1 || fail
cd test.branch1
cvsbuild branch1 start
sleep 1
cvsbuild next2 branch1 start
cvs -Q tag -b branch1_1 || fail
sleep 1
cvsbuild next3 next2 branch1 start
cd "$HERE"
cvs -Q co -dtest.branch1_1 -rbranch1_1 test >/dev/null 2>&1 || fail
cd test.branch1_1
cvsbuild branch1_1 next2 branch1 start
cd "$HERE"
cvs -Q co -dtest.branch2 -rbranch2 test >/dev/null 2>&1 || fail
cd test.branch2
cvsbuild branch2 next1 start

# XXX doesn't work yet
# return to mainline and merge
#cd $HERE/test
#cvsbuild end1 backport
#sleep 1
#cd $HERE/test.branch2
#cvs -Q update -j HEAD >/dev/null 2>&1 || fail
#cat <<END > sub_next1
#1
#2
#7
#END
#cat <<END > sub_start
#0
#1
#2
#7
#END
#cvs -Q commit -m"do merge" || fail
echo OK

echo $N Import CVS trunk ............................................$NL
cd "$HERE"
commercial import_trunk
# verify that checkout:edit doesn't break anything
bk edit $Q BitKeeper/etc/config || fail
echo "checkout:edit" >> BitKeeper/etc/config
bk import $Q -f -tCVS -g1 -k -Hfree.bk "$CVSROOT/test" . || fail
bk -Ur get -S $Q
bk treediff . "$HERE/test" || fail
bk pending $Q && {
	echo shouldn\'t have files pending...
	exit 1
}
bk -r check -a || fail
bk changes -t -nd':REV:$each(:TAG:){ (:TAG:)}' > TAGS
cat <<EOF > WANT_TAGS
1.4 tag_end
1.3 tag_next1 branch2_BASE
1.2 tag_start
EOF
cmpfiles TAGS WANT_TAGS
bk renumber ChangeSet 2> ERR
test -s ERR && {
	echo failed
	cat ERR
	exit 1
}
echo OK

echo $N Import CVS branch1...........................................$NL
cd "$HERE"
bk clone $Q -r1.1 "$HERE/import_trunk" "$HERE/import_branch1"
cd "$HERE/import_branch1"
bk import -bbranch1 $Q -f -tCVS -g1 -k  -Hfree.bk "$CVSROOT/test" . || fail
bk -Ur get $Q
bk treediff . "$HERE/test.branch1" || fail
bk pending $Q && {
	echo shouldn\'t have files pending...
	exit 1
}
bk -r check -a || fail
bk changes -t -nd':REV:$each(:TAG:){ (:TAG:)}' > TAGS
cat <<EOF > WANT_TAGS
1.5 tag_next3
1.4 tag_next2 branch1_1_BASE
1.3 tag_branch1
1.2 tag_start
EOF
bk diff -u TAGS WANT_TAGS
echo OK

echo $N Import CVS branch2...........................................$NL
cd "$HERE"
bk clone $Q -r1.1 "$HERE/import_trunk" "$HERE/import_branch2"
cd "$HERE/import_branch2"
bk import -bbranch2 $Q -f -tCVS -g1 -k  -Hfree.bk "$CVSROOT/test" . || fail
bk -Ur get $Q
bk treediff . "$HERE/test.branch2" || fail
bk pending $Q && {
	echo shouldn\'t have files pending...
	exit 1
}
bk -r check -a || fail
bk changes -t -nd':REV:$each(:TAG:){ (:TAG:)}' > TAGS
cat <<EOF > WANT_TAGS
1.4 tag_branch2
1.3 tag_next1 branch2_BASE
1.2 tag_start
EOF
bk diff -u TAGS WANT_TAGS
echo OK

echo $N Import CVS branch1_1.........................................$NL
cd "$HERE"
bk clone $Q -r1.1 "$HERE/import_trunk" "$HERE/import_branch1_1"
cd "$HERE/import_branch1_1"
bk import -bbranch1_1 $Q -f -tCVS -g1 -k -Hfree.bk "$CVSROOT/test" . || fail
bk -Ur get $Q
bk treediff . "$HERE/test.branch1_1" || fail
bk pending $Q && {
	echo shouldn\'t have files pending...
	exit 1
}
bk -r check -a || fail
bk changes -t -nd':REV:$each(:TAG:){ (:TAG:)}' > TAGS
cat <<EOF > WANT_TAGS
1.5 tag_branch1_1
1.4 tag_next2 branch1_1_BASE
1.3 tag_branch1
1.2 tag_start
EOF
checkfiles TAGS WANT_TAGS
echo OK

echo $N Try pulling branch2 into trunk...............................$NL
cd "$HERE/import_trunk"
bk edit $Q sub_next1 sub_start
# fix up the content so we can get a auto merge
echo 1 > sub_next1
echo 1 > sub_start
bk delta $Q -yfix sub_next1 sub_start
bk commit $Q -yfix
bk pull $Q ../import_branch2 || fail
echo OK

echo $N Try setting up the file1 and file2 do not agree error .......$NL
cd "$HERE/test"
echo new >> sub_start
echo other >> new_start
cvs -Q commit -mjunk > /dev/null || fail
cvs -Q tag -b fakebranch || fail
cvs -Q admin -Nfakebranch:1.2.0.2 sub_start >/dev/null 2>&1 || fail
cd "$HERE"
bk clone $Q -r1.1 "$HERE/import_trunk" "$HERE/import_fake"
cd "$HERE/import_fake"
bk import -bfakebranch $Q -f -tCVS -g1 -k  -Hfree.bk "$CVSROOT/test" . > OUT && {
	echo should have errored
	exit 1
}
grep -q 'The files new_start,v and sub_start,v don' OUT || {
	echo wrong error message
	exit 1
}
echo OK
