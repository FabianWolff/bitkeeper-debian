# Copyright 2008-2012,2015-2016 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

echo $N Create some ensembles sharing components ....................$NL
fresh_commercial bash-sa
echo hi > foo
bk new $Q foo || fail
bk commit $Q --tag=BASE -y'add foo' || fail
# Make another cset now, so it will be old.  Used in sccslog test later.
bk edit $Q foo
bk delta $Q -fyfoo foo
bk commit $Q -yfoo
cd ..
nested project
bk attach --force $Q -rBASE ../bash-sa bash
cd ..
commercial standalone
echo sa1 > sa_file
bk new $Q sa_file || fail
bk commit -y'add sa_file' $Q || fail
cd ..
bk cat standalone/BitKeeper/etc/config > c
bk setup -P -fcc project2 || fail
cd project2
bk portal $Q . || fail
bk attach --force $Q -rBASE ../bash-sa mybash
bk attach --force $Q ../standalone sa2
cd ../project
bk attach --force $Q ../standalone sa1
cd ..
bk clone $Q project project-copy || fail
echo OK

echo $N Test the api for bk portal, leaving project2 a portal .......$NL
# Not in a product
cd "$HERE"
bk portal 2> ERR && { echo failed; exit 1; }
grep -q "bk: Cannot find product root" ERR || { echo wrong msg; exit 1; }
bk portal . 2> ERR && { echo failed; exit 1; }
grep -q "bk: Cannot find product root" ERR || { echo wrong msg; exit 1; }
# In a product
cd project2
bk portal > OUT || { echo failed; exit 1; }
grep -q "This is a portal" OUT || { echo wrong msg; exit 1; }
bk portal -q || { echo failed; exit 1; }
# remove it
bk portal -r > OUT || fail
grep -q "This is no longer a portal" OUT || fail
bk portal -r > OUT || fail
grep -q "This is not a portal" OUT || fail
bk portal . > OUT || { echo failed; exit 1; }
grep -q "This is now a portal" OUT || fail
bk portal . > OUT || { echo failed; exit 1; }
grep -q "This is already a portal" OUT || fail
echo OK

echo $N Port csets from standalone repo to component ................$NL
cd "$HERE"/standalone
echo hi > file0
bk new $Q file0 || fail
bk mv file0 file1
bk commit $Q -y'add file1' || fail
cd ../project2/sa2
bk portal $Q -r || fail
bk pull $Q ../../standalone 2> ERR && {
	echo this should fail
	cat ERR
	exit 1
}
bk portal $Q . || fail
bk pull $Q ../../standalone 2> ERR && {
	echo this should fail
	cat ERR
	exit 1
}
grep -q 'You are trying to pull from an unrelated package.' ERR || {
	echo wrong error message
	cat ERR
	exit 1
}
cd ..
# Check :SPN: because :DPN: doesn't really print the path for ChangeSet.
test "`bk prs -hnd:SPN: -r+ sa2/ChangeSet`" = sa2/SCCS/s.ChangeSet || {
     echo wrong pathnname before port
     exit 1
}
cd sa2
bk portal $Q -r || fail
bk port $Q ../../standalone 2> ERR && fail
grep -q 'port: destination is not a portal.' ERR || {
	echo bad error message
	cat ERR
	exit 1
}
bk portal $Q . || fail
(cd "`bk -P pwd`"
mkdir BitKeeper/triggers
cat > BitKeeper/triggers/pre-incoming <<EOF
#!/bin/sh
set > "$HERE/ENV"
exit 0
EOF
chmod +x BitKeeper/triggers/pre-incoming
)
_BK_NO_PATCHSFIO=1 bk port -C $Q ../../standalone || fail
cd ..
test "`bk prs -hnd:SPN: -r+ sa2/ChangeSet`" = sa2/SCCS/s.ChangeSet || {
     echo wrong pathnname after port
     bk changes -r+
     exit 1
}
bk -r check -ac || fail
bk gfiles -pAC > GOT
cat <<EOF > WANT
sa2/ChangeSet|1.3
EOF
cmpfiles GOT WANT
bk log -C1.2 -d:JOIN::I: sa2/ChangeSet > WANT
printf "1.2,1.1,1.0" > GOT
cmpfiles GOT WANT
# Commit to product.
bk commit $Q -y'port from standalone' || fail
# Make sure another port comes back empty.
cd sa2
bk port $Q ../../standalone || fail
test "`bk changes -S -r+ -nd':REV: :GFILE:'`" = "1.3 ChangeSet" || fail
bk port $Q -r+ ../../standalone || fail
test "`bk changes -S -r+ -nd':REV: :GFILE:'`" = "1.3 ChangeSet" || fail
echo OK

echo $N Make sure the pre-incoming trigger has the right event ......$NL
grep BK_EVENT < "$HERE/ENV" > "$HERE/EVENT"
grep -q 'incoming port' "$HERE/EVENT" || fail
echo OK

echo $N Port csets from component in portal to standalone repo ......$NL
# We want to run this test twice, once where the source component is
# in a portal and once when it is not, so save off the standalone repo
# so we can restore it below.
cd "$HERE"
tar cf standalone.tar standalone
cd standalone
bk pull $Q ../project2/sa2 2> ERR 1>&2 && {
	echo should have failed
	cat ERR
	exit 1
}
grep -q 'component-only pulls are not allowed.' ERR || {
	echo bad error message
	cat ERR
	exit 1
}
test "`bk changes -r+ -nd:REV:`" = 1.3 || fail
bk port $Q ../project2/sa2 || fail
# We should get two csets from the component, and see a null cset
# that sets the ChangeSet path.
bk changes -e -d':JOIN::REV:' > GOT || fail
grep -q '^1.3,1.2,1.1,1.0$' GOT || fail
# Check :SPN: because :DPN: doesn't really print the path for ChangeSet.
test "`bk prs -hnd:SPN: -r+ ChangeSet`" = SCCS/s.ChangeSet || {
	echo wrong pathnname after port
	exit 1
}
bk port $Q ../project2/sa2 || fail
test "`bk changes -r+ -nd:REV:`" = 1.3 || fail
echo OK

echo $N Port csets from component not in portal to standalone repo ..$NL
# Just like the above test but where the component is not in a portal.
cd "$HERE"
rm -rf standalone
tar xf standalone.tar
cd project2
bk portal $Q -r || fail
bk gate $Q -r || fail
cd ../standalone
bk pull $Q ../project2/sa2 2> ERR 1>&2 && {
	echo should have failed
	cat ERR
	exit 1
}
grep -q 'component-only pulls are not allowed.' ERR || {
	echo bad error message
	cat ERR
	exit 1
}
test "`bk changes -r+ -nd:REV:`" = 1.3 || fail
bk port -q ../project2/sa2 2> ERR && fail -f ERR
grep -q 'port source must be a gate' ERR || fail -f ERR
bk --cd=../project2 gate $Q .
bk port $Q ../project2/sa2 || fail
# We should get two csets from the component, and see a null cset
# that sets the ChangeSet path.
bk changes -e -d':JOIN::REV:' > GOT || fail
grep -q '^1.3,1.2,1.1,1.0$' GOT || fail
# Check :SPN: because :DPN: doesn't really print the path for ChangeSet.
test "`bk prs -hnd:SPN: -r+ ChangeSet`" = SCCS/s.ChangeSet || {
	echo wrong pathnname after port
	exit 1
}
bk port $Q ../project2/sa2 || fail
test "`bk changes -r+ -nd:REV:`" = 1.3 || fail
cd "$HERE/project2"
bk portal $Q . || fail
echo OK

echo $N Port csets from component in portal to detached repo ........$NL
# We want to run this test twice, once where the source component is
# in a portal and once when it is not, so save off the detached repo
# and the product it came from so we can restore them in the next test below.
cd "$HERE/project2"
bk detach $Q sa2 "$HERE/sa2-detached" || fail
cd "$HERE"
tar cf sa2-detached.tar sa2-detached || fail
tar cf project2.tar project2 || fail
cd "$HERE/sa2-detached"
# Check :SPN: because :DPN: doesn't really print the path for ChangeSet.
test "`bk prs -hnd:SPN: -r+ ChangeSet`" = SCCS/s.ChangeSet || {
	echo wrong pathnname after detach
	exit 1
}
bk pull $Q ../project2/sa2 2> ERR 1>&2 && {
	echo should have failed
	cat ERR
	exit 1
}
grep -q 'component-only pulls are not allowed.' ERR || {
	echo bad error message
	cat ERR
	exit 1
}
test "`bk changes -r+ -nd:REV:`" = 1.3 || fail
bk port $Q "$HERE/project2/sa2" || fail
test "`bk changes -r+ -nd:REV:`" = 1.3 || fail
test "`bk prs -hnd:SPN: -r+ ChangeSet`" = SCCS/s.ChangeSet || fail
# Add a cset to the component.
cd "$HERE/project2/sa2"
echo hi > sa2-new
bk new $Q sa2-new || fail
bk commit -S $Q -y'add sa2-new' || fail
# Port to the detached repo.
cd "$HERE/sa2-detached"
bk port $Q "$HERE/project2/sa2" || fail
bk changes -e -d':JOIN::REV:' > GOT || fail
grep -q '^1.4,1.3,1.2,1.1,1.0$' GOT || fail
bk port $Q "$HERE/project2/sa2" || fail
test "`bk changes -r+ -nd:REV:`" = 1.4 || fail
test "`bk prs -hnd:SPN: -r+ ChangeSet`" = SCCS/s.ChangeSet || fail
echo OK

echo $N Port csets from component not in portal to detached repo ....$NL
# Like the above test but the portal is removed from project2.
cd "$HERE"
rm -rf sa2-detached project2
tar xf sa2-detached.tar sa2-detached || fail
tar xf project2.tar project2 || fail
cd "$HERE/project2"
bk portal $Q -r || fail
cd "$HERE/sa2-detached"
# Check :SPN: because :DPN: doesn't really print the path for ChangeSet.
test "`bk prs -hnd:SPN: -r+ ChangeSet`" = SCCS/s.ChangeSet || {
	echo wrong pathnname after detach
	exit 1
}
bk pull $Q ../project2/sa2 2> ERR 1>&2 && {
	echo should have failed
	cat ERR
	exit 1
}
grep -q 'component-only pulls are not allowed.' ERR || {
	echo bad error message
	cat ERR
	exit 1
}
test "`bk changes -r+ -nd:REV:`" = 1.3 || fail
bk port $Q "$HERE/project2/sa2" || fail
test "`bk changes -r+ -nd:REV:`" = 1.3 || fail
test "`bk prs -hnd:SPN: -r+ ChangeSet`" = SCCS/s.ChangeSet || fail
# Add a cset to the component.
cd "$HERE/project2/sa2"
echo hi > sa2-new
bk new $Q sa2-new || fail
bk commit -S $Q -y'add sa2-new' || fail
# Port to the detached repo.
cd "$HERE/sa2-detached"
bk port $Q "$HERE/project2/sa2" || fail
bk changes -e -d':JOIN::REV:' > GOT || fail
grep -q '^1.4,1.3,1.2,1.1,1.0$' GOT || fail
bk port $Q "$HERE/project2/sa2" || fail
test "`bk changes -r+ -nd:REV:`" = 1.4 || fail
test "`bk prs -hnd:SPN: -r+ ChangeSet`" = SCCS/s.ChangeSet || fail
cd "$HERE/project2"
bk portal $Q . || fail
echo OK

echo $N Port csets from detached repo to component ..................$NL
cd "$HERE/project2"
test "`bk prs -hnd:SPN: -r+ sa2/ChangeSet`" = sa2/SCCS/s.ChangeSet || fail
bk detach $Q sa2 ../sa2-detached-2
cd "$HERE/sa2-detached-2"
test "`bk prs -hnd:SPN: -r+ ChangeSet`" = SCCS/s.ChangeSet || fail
cd "$HERE/project2/sa2"
test "`bk changes -S -r+ -nd:REV:`" = 1.4 || fail
# We should get the detach cset and a merge cset.
bk port $Q "$HERE/sa2-detached-2" || fail
bk changes -S -e -d':JOIN::REV:' > GOT || fail
grep -q '^1.4,1.3,1.2,1.1,1.0$' GOT || fail
# Add a cset to the detached repo.
cd "$HERE/sa2-detached-2"
echo hi > sa2-new-2
bk new $Q sa2-new-2 || fail
bk commit $Q -y'add sa2-new-2' || fail
# Port to the component.
cd "$HERE/project2/sa2"
bk pull $Q "$HERE/sa2-detached-2" 2> ERR 1>&2 && {
	echo should have failed
	cat ERR
	exit 1
}
grep -q 'You are trying to pull from an unrelated package.' ERR || {
	echo bad error message
	cat ERR
	exit 1
}
test "`bk prs -hnd:SPN: -r+ ChangeSet`" = sa2/SCCS/s.ChangeSet || fail
bk port -C $Q "$HERE/sa2-detached-2" || fail
test "`bk prs -hnd:SPN: -r+ ChangeSet`" = sa2/SCCS/s.ChangeSet || fail
bk changes -S -e -d':JOIN::REV:' > GOT || fail
grep -q '^1.5,1.4,1.3,1.2,1.1,1.0$' GOT || fail
# Nothing else should come over.
bk port -C $Q "$HERE/sa2-detached-2" || fail
test "`bk prs -hnd:SPN: -r+ ChangeSet`" = sa2/SCCS/s.ChangeSet || fail
test "`bk changes -S -r+ -nd:REV:`" = 1.5 || fail
# Add a few more NULL ports to make sure we don't print
# repeated messages
bk port -C $Q "$HERE/sa2-detached-2" || fail
bk port -C $Q "$HERE/sa2-detached-2" || fail
bk port -C $Q "$HERE/sa2-detached-2" || fail
# Commit to the product.
cd ..
bk commit $Q -c || fail
bk changes -r+ -nd'$each(:C:){(:C:)\n}' >GOT
cat <<EOF > WANT
sa2:
  Ported 1 cset from $HERE/standalone
sa2:
  Ported 1 cset from $HERE/sa2-detached-2

EOF
cmpfiles WANT GOT
# now try with a merge
cd "$HERE/sa2-detached-2"
echo stuff > afile
bk new $Q afile
bk commit $Q -yafile
cd "$HERE/project2/sa2"
echo stuff > bfile
bk new $Q bfile
bk commit $Q -ybfile
bk port $Q "$HERE/sa2-detached-2" || fail
bk changes -r+ -nd'$each(:C:){(:C:)\n}' >GOT
cat <<EOF > WANT
sa2:
  Ported and merged 1 cset from $HERE/sa2-detached-2

EOF
cmpfiles WANT GOT
echo OK

echo $N Port csets from standalone repo to detached repo ............$NL
# Create all new repos since re-using the ones used above gets
# too complicated to easily follow.
cd "$HERE"
commercial standalone-3
cd "$HERE/project2"
bk attach --force $Q ../standalone-3 sa3 || fail
bk detach $Q sa3 ../detached-3 || fail
# Detached should have the attach and detach csets.
cd ../detached-3
bk changes -e -d':JOIN::REV:' > GOT || fail
grep -q '^1.1,1.0$' GOT || fail
# Add a cset to standalone-3 and port it to detached-3.
cd "$HERE/standalone-3"
echo hi > sa3-file
bk new $Q sa3-file || fail
bk commit $Q -y'add sa3-file' || fail
cd ../detached-3
bk pull $Q ../standalone-3 2> ERR 1>&2 && {
	echo should have failed
	cat ERR
	exit 1
}
grep -q 'You are trying to pull from an unrelated package.' ERR || {
	echo bad error message
	cat ERR
	exit 1
}
# This case shouldn't require a portal.
bk port $Q ../standalone-3 2> ERR 1>&2 || {
	echo should have worked
	cat ERR
	exit 1
}
bk changes -S -e -d':JOIN::REV:' > GOT || fail
grep -q '^1.2,1.1,1.0$' GOT || fail
# Another immediate port shouldn't get anything new.
bk port $Q ../standalone-3 || fail
bk changes -S -e -d':JOIN::REV:' > GOT || fail
grep -q '^1.2,1.1,1.0$' GOT || fail
echo OK

echo $N Port csets from detached repo to standalone repo ............$NL
cd "$HERE/standalone-3"
bk pull $Q ../detached-3 2> ERR 1>&2 && {
	echo should have failed
	cat ERR
	exit 1
}
# Should get the attach and detach csets, the sa3-file cset on a branch
# with its merge cset, and that's it (no null cset on top for ChangeSet
# file path fix-up).
bk port $Q ../detached-3 || fail
bk changes -e -d':JOIN::REV:' > GOT || fail
grep -q '^1.2,1.1,1.0$' GOT || fail
echo OK

echo $N Test port of matching components in different products ......$NL
cd "$HERE/project2"
test "`bk prs -hnd:DPN: -r+ mybash/ChangeSet`" = ChangeSet || {
     echo wrong pathnname before port
     exit 1
}
cd mybash
echo junk > bar
bk new $Q bar || fail
bk commit -S $Q -y'add bar' || fail
bk -P commit $Q -y'bar to bash' || fail
echo junk2 > baz
bk new $Q baz || fail
bk commit -S $Q -y'add baz' || fail

bk port -C $Q ../../project/bash || fail
cd ..
bk gfiles -pAC > GOT
cat <<EOF > WANT
mybash/ChangeSet|1.4
EOF
cmpfiles GOT WANT
bk commit $Q -ymkcset
bk log -C+ -nd":GFILE:|:I:" mybash/ChangeSet > GOT
cmpfiles GOT WANT
echo OK

echo $N Test port of special graph to stress sccs_csetBoundary ......$NL
cd "$HERE"
commercial branch
touch foo
bk new $Q foo
bk commit $Q -yfoo
cd ..
bk clone $Q branch branch2
cd branch
bk edit $Q foo
bk delta $Q -fyfoo foo
bk commit $Q -yfoo
cd ../project
bk attach --force $Q ../branch branch
cd ../project2
bk attach --force $Q ../branch2 branch2
cd branch2
bk port $Q ../../project/branch || fail
cd ..
printf "1.2,1.1,1.0" > WANT
bk log -C1.2 -d:JOIN::I: branch2/ChangeSet > GOT
cmpfiles GOT WANT
bk commit $Q -y'cset on branch'
bk log -C1.2 -d:JOIN::I: branch2/ChangeSet > GOT
cmpfiles GOT WANT
echo OK

echo $N Try to port csets between matching products..................$NL
cd "$HERE"/project-copy/bash
bk portal $Q .
bk port $Q ../../project/bash 2>ERR && {
	echo should have failed
	cat ERR
	exit 1
}
cat <<EOF >WANT
port: may not port components with identical products
EOF
cmpfiles WANT ERR
echo OK

echo $N Try to port a product .......................................$NL
cd "$HERE"/project-copy
bk port $Q ../project 2>ERR && {
	echo should have failed
	cat ERR
	exit 1
}
cat <<EOF >WANT
port: port not allowed with product.
EOF
cmpfiles WANT ERR
echo OK

echo $N Try to port csets between standalone repos ..................$NL
cd "$HERE"
bk clone $Q standalone standalone-clone || fail
cd standalone-clone
echo new >another
bk new $Q another || fail
bk commit $Q -yanother || fail
cd ../standalone
bk port $Q ../standalone-clone 2> ERR && fail
grep -q 'may not port between identical repositories' ERR || fail
echo OK

echo $N Test out sccslog on a ported ChangeSet file .................$NL
# Make use of the old cset left in bash-sa -- as we need a pending
# cset that is older than the committed cset.  This also has the
# only commited cset on the branch, which really shows the bug well.
cd "$HERE"/project/bash
bk edit $Q foo
bk delta $Q -fyfoo foo
bk commit -S $Q -yfoo
BRANCHTIP=`bk prs -hnd:MD5KEY: -r+ ChangeSet`
bk portal $Q .
bk port -C $Q ../../bash-sa
bk sccslog -A -nd:I: > GOT
printf "1.4\n1.2.1.1\n1.3\n" > WANT
cmpfiles GOT WANT
# test fix for CSETREV when non-cset tagged entry is tip of branch
# the code couldn't find the tagged cset; now it can.
bk -P commit $Q -yprod
test "`bk changes -S -r$BRANCHTIP -nd:CSETREV:`" = "1.4" || fail
echo OK

echo $N Test that abort of a port is abort -S .......................$NL
cd "$HERE/project"
bk detach $Q bash ../bash-port
cd ../bash-port
bk edit $Q foo
echo bash-port >> foo
bk ci -ywhatever $Q foo
bk commit -ywhatever $Q
cd ../project/bash
bk edit $Q foo
echo project >> foo
bk ci -ywhatever $Q foo
bk commit -ywhatever $Q
echo q | bk port ../../bash-port > OUT 2>&1 
test -d RESYNC || {
	echo failed to leave RESYNC
	cat OUT
	exit 1
}
bk abort -qfS
(echo a
 echo y
) | bk port ../../bash-port > OUT 2>&1
test -d RESYNC && {
	echo failed to remove comp RESYNC
	cat OUT
	exit 1
}
echo OK

echo $N Test port -R followed by pull fails..........................$NL
rm -f "HERE/project" "$HERE/gcc" "$HERE/copy"
nested project
touch gcc/foo
bk new $Q gcc/foo
bk commit $Q -yfoo
bk clone $Q . ../copy
cd ../copy
touch gcc/bar
bk new $Q gcc/bar
bk commit $Q -ybar
cd ../project
bk detach $Q gcc ../gcc
cd ../gcc
bk edit $Q foo
echo france > foo
bk delta $Q -yfoo foo
bk commit $Q -yfoo
cd ../project/gcc
bk edit $Q foo
echo spain > foo
bk delta $Q -yfoo foo
bk commit $Q -yfoo
bk port $Q -R ../../gcc || fail
bk pull $Q -R ../../copy >ERR 2>&1 && fail should have failed
cat <<EOF > WANT
Existing RESYNC directory in component 'gcc'
Port in progress
Please run 'bk resolve -S or 'bk abort -S'
in the 'gcc' component
pull: update aborted.
EOF
cmpfiles WANT ERR
test -f RESYNC/BitKeeper/log/port || fail
# finish the resolve
printf "s\nC\n" | bk resolve $Q -S 2>ERR || fail
test -f RESYNC/BitKeeper/log/port && fail
echo OK

echo $N Where are the comments about the foo in the product? ........$NL
cd "$HERE"
nested other
bk detach $Q gdb ../gdb-other
cd ../gdb-other
touch foo
bk new $Q foo
bk commit $Q -f
cd ../other
cd gdb
bk port $Q -C ../../gdb-other
cd ..
touch foo
bk new $Q foo
echo u | bk commit $Q >/dev/null || fail
bk changes -r+ >GOT 2>&1
grep foo GOT && fail "You fixed a bug"
echo failed \(bug port -C loses pending\)

echo $N Port between standalones cset-marks ChangeSet................$NL
cd "$HERE"
cd other
bk detach $Q gdb ../gdb-other2
cd ../gdb-other
touch afile
bk new $Q afile
bk commit $Q -f
cd ../gdb-other2
bk port $Q ../gdb-other || fail
bk repocheck $Q || fail
cd ..
bk clone $Q gdb-other2 gdb-other3
cd gdb-other3
bk repocheck $Q || fail -f GOT
echo OK

echo $N Move a component around and set correct path in port ........$NL
# move component to play with pathname entry
cd "$HERE"/project
mvcomp bash newbash
# Just take that in and resolve
cd ../bash-sa
bk edit $Q foo
bk delta $Q -fynull foo
bk commit $Q -ynull
bk port $Q ../project/newbash || fail
# Now stir things up
cd ../project/newbash
bk port $Q ../../bash-sa 2> ERR && fail -f ERR
# When we get name handling integrated ... remove
grep -q 'flict - "newbash/ChangeSet" and "bash/ChangeSet"' ERR || fail -f ERR
# and add back in:
# # All new csets will have tip local path in pathname and
# # 'ChangeSet' as sortpath
# bk changes -S -end':KEY:||:SORTKEY:' - < BitKeeper/etc/csets-in \
#     | perl -pe 's/[^|]*.([^|]*).*\|\|[^|]*.([^|]*).*/$1 $2/' > GOT
# cat <<EOF > WANT
# newbash/ChangeSet ChangeSet
# bash/ChangeSet ChangeSet
# EOF
# cmpfiles WANT GOT
echo OK
