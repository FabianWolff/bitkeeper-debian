# Copyright 2010-2012 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e

echo $N Setup .......................................................$NL
cd "$HERE"
nested product
cd ..
bk clone $Q product ws || fail
bk clone $Q product clone || fail
bk clone $Q product clone2 || fail
cd ws
bk here set $Q .
cd ../clone/gcc
echo foo > foo
bk new $Q foo
bk commit -S $Q -yfoo
cd ..
bk commit $Q -yfoo
cd ../clone2/gcc
echo bar > bar
bk new $Q bar
bk commit -S $Q -ybar
cd ..
bk commit $Q -ybar
echo OK

echo $N Pull each clone and then populate gcc .......................$NL
cd ../ws
bk here add $Q ./gcc || fail
bk pull $Q --unsafe ../clone || fail
bk pull $Q --unsafe ../clone2 || fail
echo OK

echo $N Roll back the merge and see if it lets us unpopulate gcc ....$NL
bk unpull -fs $Q || fail

# The merge in gcc removes the urllist for that component
# and so after the unpull we don't know about clone anymore
# so we can unpopulate this component.

# Larry thinks this should work

bk here rm $Q gcc 2>ERR && fail -f ERR should fail
sed -e 's/1.2,.*/1.2/' <ERR > ERR2
cat <<EOF > WANT
here: searching $HERE/product...ok (gate)
here: ./gcc cannot be found at a gate
Local changes to ./gcc found:
ChangeSet@1.2
  foo

here: unable to remove ./gcc
EOF
cmpfiles WANT ERR2
echo 'failed (bug commit prunes urllist)'

echo $N Demo Zahy\'s question ........................................$NL
nested repoA
touch c
bk setup -fcc comp1
bk setup -fcc comp2
cd ..

#   1.  Clone REPO_A to REPO_B
bk clone $Q -sALL repoA repoB

#   2. commit changes in REPO_A/comp1 and REPO_A/comp2
cd repoA/comp1
echo hi > new
bk new $Q new
bk commit -S $Q -ynew
cd ../comp2
echo hh > new2
bk new $Q new2
bk commit -S $Q -ynew2
cd ..
bk commit $Q -ystuff

#   3. clone REPO_A/comp1 aside.  Lets call it â€“ REPO_C
cd ..
bk clone $Q -scomp1 repoA repoC

#   4. pull REPO_B <- REPO_C
cd repoB
bk pull -q ../repoC || fail
bk changes -qR ../repoC > OUT
test -s OUT && fail -f OUT
echo OK
