# Copyright 2003-2006,2008,2010-2011,2014-2015 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

PREFIX=file://"$HERE"

# Tests for parent manipulation
echo $N Create initial repositories .................................$NL
commercial project
bk clone $Q . ../clone
echo OK
cores

echo $N See if we can compute normalized url from outside a repo ....$NL
cd "$HERE"
bk parent -N project clone > GOT
cat <<EOF > WANT
file://$HERE/project
file://$HERE/clone
EOF
checkfiles WANT GOT
printf "project\nclone\n" | bk parent -N - > GOT
checkfiles WANT GOT
cd project
printf ".\n../clone\n" | bk parent -N - > ../GOT
cd ..
checkfiles WANT GOT
bk parent -N badrepo 2> ERR && fail
grep -q "Not a repository: 'badrepo'" ERR || fail -f ERR
bk parent -N - repoafterdash 2> ERR && fail
grep -q "parent: '-' must be last" ERR || fail -f ERR
echo OK

echo $N Make sure that we have incoming, outgoing parent set ........$NL
# Make sure we don't have to be at the root.
cd "$HERE/clone"
mkdir src
cd src
bk parent -iq || fail
bk parent -oq || fail
bk parent -q || fail
PARENT=$PREFIX/project
IL_PARENT="`bk parent -il`"
OL_PARENT="`bk parent -ol`"
L_PARENT="`bk parent -l`"
test "$PLATFORM" = "WIN32" && {
	PARENT="`echo $PARENT | tr '[a-z]' '[A-Z]'`"
	IL_PARENT="`echo $IL_PARENT | tr '[a-z]' '[A-Z]'`"
	OL_PARENT="`echo $OL_PARENT | tr '[a-z]' '[A-Z]'`"
	L_PARENT="`echo $L_PARENT | tr '[a-z]' '[A-Z]'`"
}
test "$PARENT" = "$IL_PARENT" || fail
test "$PARENT" = "$OL_PARENT" || fail
test "$PARENT" = "$L_PARENT" || fail
echo OK

echo $N Make sure we have the compat single parent pointer ..........$NL
cd "$HERE/clone"
test -f BitKeeper/log/parent || fail
FILE="`cat BitKeeper/log/parent`"
test "$PLATFORM" = "WIN32" && FILE="`echo $FILE | tr '[a-z]' '[A-Z]'`"
test "$PARENT" = "$FILE" || fail
echo OK

echo $N Make sure we do not have the new pull/push pointers .........$NL
test -f BitKeeper/log/pull_parent && fail
test -f BitKeeper/log/push_parent && fail
echo OK

echo $N Test backwards compat way of setting parent pointer .........$NL
bk parent -q bk://some.host.com || fail
PARENT=bk://some.host.com
test "$PARENT" = "`bk parent -il`" || fail
test "$PARENT" = "`bk parent -ol`" || fail
test "$PARENT" = "`bk parent -l`" || fail
bk parent -qr
bk parent -q bk://different.host.com || fail
PARENT=bk://different.host.com
test "$PARENT" = "`bk parent -il`" || fail
test "$PARENT" = "`bk parent -ol`" || fail
test "$PARENT" = "`bk parent -l`" || fail
echo OK

echo $N Backwards compat should only work with no or one parent .....$NL
bk parent -aq bk://some.host.com || fail
bk parent -q bk://host.com 1>/dev/null 2>&1 && fail
bk parent -qsi bk://host.com
cat > WANT <<EOF
Pull parent: bk://host.com
EOF
bk parent > GOT
cmp -s WANT GOT || {
	echo failed to set incoming only parent
	cat GOT
}
test -f BitKeeper/log/parent && fail
bk parent -q bk://host.com 1>/dev/null 2>&1 && fail
echo OK

echo $N Set single parent, make sure it overrides ...................$NL
bk parent -sq bk://somewhere.org
test `bk parent -l` = bk://somewhere.org || fail
echo OK

echo $N Set several parents, make sure they are all recorded ........$NL
PARENT="$PREFIX/project"
bk parent -sq "$PARENT" bozo@somewhere.com://tmp bk://ibm.com/a/b/c || fail
bk parent -l > GOT
cat > WANT <<EOF
bk://ibm.com/a/b/c
bozo@somewhere.com://tmp
$PARENT
EOF
cmp -s GOT WANT || { echo failed; diff -ur GOT WANT; exit 1; }
echo OK

echo $N Set incoming parents, make sure they are all recorded .......$NL
bk parent -isq bozo@somewhere.com://tmp bk://ibm.com/a/b/c || fail
bk parent -l > GOT
cat > WANT <<EOF
bk://ibm.com/a/b/c
bozo@somewhere.com://tmp
EOF
cmp -s GOT WANT || { echo failed; diff -ur GOT WANT; exit 1; }
bk parent -ol > GOT
cat > WANT <<EOF
This repository has no push parent.
EOF
cmp -s GOT WANT || { echo failed; diff -ur GOT WANT; exit 1; }
echo OK

echo $N Set outgoing parents, make sure they are all recorded .......$NL
bk parent -osq bozo@somewhere.com://tmp bk://ibm.com/a/b/c || fail
bk parent -ol > GOT
cat > WANT <<EOF
bk://ibm.com/a/b/c
bozo@somewhere.com://tmp
EOF
cmp -s GOT WANT || { echo failed; diff -ur GOT WANT; exit 1; }
bk parent -il > GOT
cat > WANT <<EOF
This repository has no pull parent.
EOF
cmp -s GOT WANT || { echo failed; diff -ur GOT WANT; exit 1; }
echo OK

echo $N Set single parent, make sure it overrides ...................$NL
bk parent -sq bk://somewhere.org
test `bk parent -l` = bk://somewhere.org || fail
echo OK

echo $N Add several parents, make sure they are all recorded ........$NL
bk parent -qr
bk parent -q "$HERE/project" || fail
bk parent -aq bozo@somewhere.com://tmp bk://ibm.com/a/b/c || fail
bk parent -l > GOT
cat > WANT <<EOF
bk://ibm.com/a/b/c
bozo@somewhere.com://tmp
$PARENT
EOF
cmp -s GOT WANT || {
	echo failed
	cat GOT
	exit 1
}
echo OK

echo $N Make sure the compat single parent pointer is removed .......$NL
test -f BitKeeper/log/parent && fail
echo OK

echo $N Add incoming only parent, check recording and listing .......$NL
bk parent -aiq bk://oneway.com/incoming || fail
bk parent -l > GOT
cat > WANT <<EOF
bk://ibm.com/a/b/c
bk://oneway.com/incoming
bozo@somewhere.com://tmp
$PARENT
EOF
cmp -s GOT WANT || {
	echo Failed listing of both directions
	cat GOT
	exit 1
}
bk parent -il > GOT
cmp -s GOT WANT || {
	echo Failed listing of incoming
	cat GOT
	exit 1
}
bk parent -ol > GOT
cat > WANT <<EOF
bk://ibm.com/a/b/c
bozo@somewhere.com://tmp
$PARENT
EOF
cmp -s GOT WANT || {
	echo Failed listing of outgoing
	cat GOT
	exit 1
}
echo OK

echo $N Print just the first parent .................................$NL
test "`bk parent -1l`" = "bk://ibm.com/a/b/c" || fail
echo OK

echo $N Add outgoing only parent, check recording and listing .......$NL
bk parent -aoq bk://oneway.com/outgoing || fail
bk parent -l > GOT
cat > WANT <<EOF
bk://ibm.com/a/b/c
bk://oneway.com/incoming
bk://oneway.com/outgoing
bozo@somewhere.com://tmp
$PARENT
EOF
cmp -s GOT WANT || {
	echo Failed listing of both directions
	cat GOT
	exit 1
}
bk parent -il > GOT
cat > WANT <<EOF
bk://ibm.com/a/b/c
bk://oneway.com/incoming
bozo@somewhere.com://tmp
$PARENT
EOF
cmp -s GOT WANT || {
	echo Failed listing of incoming
	cat GOT
	exit 1
}
bk parent -ol > GOT
cat > WANT <<EOF
bk://ibm.com/a/b/c
bk://oneway.com/outgoing
bozo@somewhere.com://tmp
$PARENT
EOF
cmp -s GOT WANT || {
	echo Failed listing of outgoing
	cat GOT
	exit 1
}
echo OK

echo $N Check annotated listing of parents ..........................$NL
bk parent > GOT
cat > WANT <<EOF
Pull parent: bk://oneway.com/incoming
Push parent: bk://oneway.com/outgoing
Push/pull parent: bk://ibm.com/a/b/c
Push/pull parent: bozo@somewhere.com://tmp
Push/pull parent: $PARENT
EOF
cmp -s GOT WANT || {
	echo Failed listing of both directions
	cat GOT
	exit 1
}
bk parent -i > GOT
cat > WANT <<EOF
Pull parent: bk://oneway.com/incoming
Push/pull parent: bk://ibm.com/a/b/c
Push/pull parent: bozo@somewhere.com://tmp
Push/pull parent: $PARENT
EOF
cmp -s GOT WANT || {
	echo Failed listing of incoming
	cat GOT
	exit 1
}
bk parent -o > GOT
cat > WANT <<EOF
Push parent: bk://oneway.com/outgoing
Push/pull parent: bk://ibm.com/a/b/c
Push/pull parent: bozo@somewhere.com://tmp
Push/pull parent: $PARENT
EOF
cmp -s GOT WANT || {
	echo Failed listing of outgoing
	cat GOT
	exit 1
}
echo OK

echo $N Remove one parent, check recording and listing ..............$NL
bk parent -rq "$PARENT" || fail
bk parent -l > GOT
cat > WANT <<EOF
bk://ibm.com/a/b/c
bk://oneway.com/incoming
bk://oneway.com/outgoing
bozo@somewhere.com://tmp
EOF
cmp -s GOT WANT || {
	echo Failed listing of both directions
	cat GOT
	exit 1
}
bk parent -il > GOT
cat > WANT <<EOF
bk://ibm.com/a/b/c
bk://oneway.com/incoming
bozo@somewhere.com://tmp
EOF
cmp -s GOT WANT || {
	echo Failed listing of incoming
	cat GOT
	exit 1
}
bk parent -ol > GOT
cat > WANT <<EOF
bk://ibm.com/a/b/c
bk://oneway.com/outgoing
bozo@somewhere.com://tmp
EOF
cmp -s GOT WANT || {
	echo Failed listing of outgoing
	cat GOT
	exit 1
}
test -f BitKeeper/log/parent && fail
echo OK

echo $N Remove incoming parent, check recording and listing .........$NL
bk parent -rq bk://oneway.com/incoming || fail
bk parent -l > GOT
cat > WANT <<EOF
bk://ibm.com/a/b/c
bk://oneway.com/outgoing
bozo@somewhere.com://tmp
EOF
cmp -s GOT WANT || {
	echo Failed listing of both directions
	cat GOT
	exit 1
}
bk parent -il > GOT
cat > WANT <<EOF
bk://ibm.com/a/b/c
bozo@somewhere.com://tmp
EOF
cmp -s GOT WANT || {
	echo Failed listing of incoming
	cat GOT
	exit 1
}
bk parent -ol > GOT
cat > WANT <<EOF
bk://ibm.com/a/b/c
bk://oneway.com/outgoing
bozo@somewhere.com://tmp
EOF
cmp -s GOT WANT || {
	echo Failed listing of outgoing
	cat GOT
	exit 1
}
test -f BitKeeper/log/parent && fail
echo OK

echo $N Remove outgoing parent, check recording and listing .........$NL
bk parent -rq bk://oneway.com/outgoing || fail
bk parent -l > GOT
cat > WANT <<EOF
bk://ibm.com/a/b/c
bozo@somewhere.com://tmp
EOF
cmp -s GOT WANT || {
	echo Failed listing of both directions
	cat GOT
	exit 1
}
bk parent -il > GOT
cat > WANT <<EOF
bk://ibm.com/a/b/c
bozo@somewhere.com://tmp
EOF
cmp -s GOT WANT || {
	echo Failed listing of incoming
	cat GOT
	exit 1
}
bk parent -ol > GOT
cat > WANT <<EOF
bk://ibm.com/a/b/c
bozo@somewhere.com://tmp
EOF
cmp -s GOT WANT || {
	echo Failed listing of outgoing
	cat GOT
	exit 1
}
test -f BitKeeper/log/parent && fail
echo OK

echo $N Convert parent to incoming, check recording and listing .....$NL
bk parent -roq bk://ibm.com/a/b/c || fail
bk parent -l > GOT
cat > WANT <<EOF
bk://ibm.com/a/b/c
bozo@somewhere.com://tmp
EOF
cmp -s GOT WANT || {
	echo Failed listing of both directions
	cat GOT
	exit 1
}
bk parent -il > GOT
cat > WANT <<EOF
bk://ibm.com/a/b/c
bozo@somewhere.com://tmp
EOF
cmp -s GOT WANT || {
	echo Failed listing of incoming
	cat GOT
	exit 1
}
bk parent -ol > GOT
cat > WANT <<EOF
bozo@somewhere.com://tmp
EOF
cmp -s GOT WANT || {
	echo Failed listing of outgoing
	cat GOT
	exit 1
}
test -f BitKeeper/log/parent && fail
echo OK

echo $N Convert parent to outgoing, check recording and listing .....$NL
bk parent -riq bozo@somewhere.com://tmp || fail
bk parent -l > GOT
cat > WANT <<EOF
bk://ibm.com/a/b/c
bozo@somewhere.com://tmp
EOF
cmp -s GOT WANT || {
	echo Failed listing of both directions
	cat GOT
	exit 1
}
bk parent -il > GOT
cat > WANT <<EOF
bk://ibm.com/a/b/c
EOF
cmp -s GOT WANT || {
	echo Failed listing of incoming
	cat GOT
	exit 1
}
bk parent -ol > GOT
cat > WANT <<EOF
bozo@somewhere.com://tmp
EOF
cmp -s GOT WANT || {
	echo Failed listing of outgoing
	cat GOT
	exit 1
}
test -f BitKeeper/log/parent && fail
echo OK

echo $N Convert to single outgoing, check recording and listing .....$NL
bk parent -rq bk://ibm.com/a/b/c || fail
bk parent -l > GOT
cat > WANT <<EOF
bozo@somewhere.com://tmp
EOF
cmp -s GOT WANT || {
	echo Failed listing of both directions
	cat GOT
	exit 1
}
bk parent -il > GOT
cat > WANT <<EOF
This repository has no pull parent.
EOF
cmp -s GOT WANT || {
	echo Failed listing of incoming
	cat GOT
	exit 1
}
bk parent -ol > GOT
cat > WANT <<EOF
bozo@somewhere.com://tmp
EOF
cmp -s GOT WANT || {
	echo Failed listing of outgoing
	cat GOT
	exit 1
}
test -f BitKeeper/log/parent && fail
echo OK

echo $N Convert to incoming to bidirectional, check .................$NL
bk parent -aq bozo@somewhere.com://tmp || fail
bk parent -l > GOT
cat > WANT <<EOF
bozo@somewhere.com://tmp
EOF
cmp -s GOT WANT || {
	echo Failed listing of both directions
	cat GOT
	exit 1
}
bk parent -il > GOT
cat > WANT <<EOF
bozo@somewhere.com://tmp
EOF
cmp -s GOT WANT || {
	echo Failed listing of incoming
	cat GOT
	exit 1
}
bk parent -ol > GOT
cat > WANT <<EOF
bozo@somewhere.com://tmp
EOF
cmp -s GOT WANT || {
	echo Failed listing of outgoing
	cat GOT
	exit 1
}
echo OK

echo $N Make sure we put back the compat parent file ................$NL
test -f BitKeeper/log/parent || fail
echo OK

echo $N Try remove non-existent parent, check status ................$NL
bk parent -nrq bogus 2> ERR && fail
grep -q "parent: Can't remove 'bogus'" ERR || fail
bk parent -nriq bogus 2> ERR && fail
grep -q "parent: Can't remove 'bogus'" ERR || fail
bk parent -nroq bogus 2> ERR && fail
grep -q "parent: Can't remove 'bogus'" ERR || fail
echo OK

echo $N Try adding non-existent parent, check status ................$NL
bk parent -q || { echo "missing a parent"; exit 1; }
bk parent bogus 2> ERR && { echo failed; cat ERR; exit 1; }
grep -q "Not a repository: 'bogus'" ERR || fail
bk parent -q || { echo "erased parent"; exit 1; }
echo OK

echo $N Remove all parents, check files and listing .................$NL
bk parent -qr || { echo parent failed; ls BitKeeper/log; exit 1; }
test -f BitKeeper/log/push-parent && { ls BitKeeper/log; exit 1; }
test -f BitKeeper/log/pull-parent && { ls BitKeeper/log; exit 1; }
test -f BitKeeper/log/parent && { ls BitKeeper/log; exit 1; }
echo OK

echo $N Make sure we normalize parent pointers by default ...........$NL
bk parent -q ../project || fail
PARENT=$PREFIX/project
IL_PARENT="`bk parent -il`"
OL_PARENT="`bk parent -ol`"
L_PARENT="`bk parent -l`"
test "$PLATFORM" = "WIN32" && {
	PARENT="`echo $PARENT | tr '[a-z]' '[A-Z]'`"
	IL_PARENT="`echo $IL_PARENT | tr '[a-z]' '[A-Z]'`"
	OL_PARENT="`echo $OL_PARENT | tr '[a-z]' '[A-Z]'`"
	L_PARENT="`echo $L_PARENT | tr '[a-z]' '[A-Z]'`"
}
test "$PARENT" = "$IL_PARENT" || fail
test "$PARENT" = "$OL_PARENT" || fail
test "$PARENT" = "$L_PARENT" || fail
test -f BitKeeper/log/parent || fail
echo OK

echo $N Make sure we can force non-normalized pointers ..............$NL
bk parent -rq || fail
bk parent -nq ../project || fail
PARENT=../project
test "$PARENT" = "`bk parent -il`" || fail
test "$PARENT" = "`bk parent -ol`" || fail
test "$PARENT" = "`bk parent -l`" || fail
test -f BitKeeper/log/parent || fail
echo OK

echo $N Make sure the addition of a normalized one is not factored ..$NL
bk parent -aq ../project || fail
cat > WANT <<EOF
../project
$PREFIX/project
EOF
bk parent -l > GOT
test "$PLATFORM" = "WIN32" && {
	tr '[a-z]' '[A-Z]' < WANT > WANT$$
	bk _mv WANT$$ WANT
	tr '[a-z]' '[A-Z]' < GOT > GOT$$
	bk _mv GOT$$ GOT
}
cmp -s WANT GOT || {
	echo failed short listing
	cat GOT
	exit 1
}
cat > WANT <<EOF
Push/pull parent: ../project
Push/pull parent: $PREFIX/project
EOF
bk parent > GOT
test "$PLATFORM" = "WIN32" && {
	tr '[a-z]' '[A-Z]' < WANT > WANT$$
	bk _mv WANT$$ WANT
	tr '[a-z]' '[A-Z]' < GOT > GOT$$
	bk _mv GOT$$ GOT
}
cmp -s WANT GOT || {
	echo failed annotated listing
	cat GOT
	exit 1
}
test -f BitKeeper/log/parent && fail
echo OK

echo $N Remove a normalized pointer with a non-normalized one .......$NL
bk parent -rq ../project || fail
cat > WANT <<EOF
../project
EOF
bk parent -l > GOT
test "$PLATFORM" = "WIN32" && {
	tr '[a-z]' '[A-Z]' < WANT > WANT$$
	bk _mv WANT$$ WANT
	tr '[a-z]' '[A-Z]' < GOT > GOT$$
	bk _mv GOT$$ GOT
}
cmp -s WANT GOT || {
	echo failed short listing
	cat GOT
	exit 1
}
cat > WANT <<EOF
Push/pull parent: ../project
EOF
bk parent > GOT
test "$PLATFORM" = "WIN32" && {
	tr '[a-z]' '[A-Z]' < WANT > WANT$$
	bk _mv WANT$$ WANT
	tr '[a-z]' '[A-Z]' < GOT > GOT$$
	bk _mv GOT$$ GOT
}
cmp -s WANT GOT || {
	echo failed annotated listing
	cat GOT
	exit 1
}
test -f BitKeeper/log/parent || fail
bk parent -aq ../project || fail
echo OK

echo $N Remove a non-normalized pointer with a non-normalized one ...$NL
bk parent -nrq ../project || fail
cat > WANT <<EOF
$PREFIX/project
EOF
bk parent -l > GOT
test "$PLATFORM" = "WIN32" && {
	tr '[a-z]' '[A-Z]' < WANT > WANT$$
	bk _mv WANT$$ WANT
	tr '[a-z]' '[A-Z]' < GOT > GOT$$
	bk _mv GOT$$ GOT
}
cmp -s WANT GOT || {
	echo failed short listing
	cat GOT
	exit 1
}
cat > WANT <<EOF
Push/pull parent: $PREFIX/project
EOF
bk parent > GOT
test "$PLATFORM" = "WIN32" && {
	tr '[a-z]' '[A-Z]' < WANT > WANT$$
	bk _mv WANT$$ WANT
	tr '[a-z]' '[A-Z]' < GOT > GOT$$
	bk _mv GOT$$ GOT
}
cmp -s WANT GOT || {
	echo failed annotated listing
	cat GOT
	exit 1
}
test -f BitKeeper/log/parent || fail
bk parent -naq ../project || fail
echo OK

echo $N Make sure that file://relpath is treated as absolute ........$NL
RELPATH=`echo "$HERE" | sed 's?^/??'`
bk parent -nsq file://"$RELPATH"/project || fail
cd ../project
ID=`bk id -r`
cd ../clone
GOT=`bk -@ -q id -r`
test X"$ID" = X"$GOT" || {
	echo failed
	echo got $GOT
	echo want $ID
	exit 1
}
echo OK

echo $N Make sure that file://abspath is treated as absolute ........$NL
bk parent -nsq file://"$HERE"/project || fail
GOT=`bk -@ -q id -r`
test X"$ID" = X"$GOT" || {
	echo failed
	echo got $GOT
	echo want $ID
	exit 1
}
echo OK

echo $N Show that relative paths from a subdirectory ................$NL
cd src
bk parent $Q -s ../../project || fail
bk -R parent $Q -s ../project || fail
echo OK

echo $N Verify that -n is legal only from product root...............$NL
bk parent $Q -n ../../project 2>/dev/null && fail
echo OK

echo $N Check that non-normalized parent can be removed without -n ..$NL
cd "$HERE/clone"
bk parent -rq "$HERE/project" || fail # cleanup previous
echo "$HERE/project" >> BitKeeper/log/parent
bk parent -rq "$HERE/project" || fail
echo OK

if test $PLATFORM = WIN32; then
echo $N Check that Windows paths are normalized .....................$NL
cd "$HERE/clone"
bk parent -q "$HERE/project"
bk parent -ai ..\\project >OUT 2>&1
test -s OUT && fail -f OUT should not have added parent
echo OK
fi	# if WIN32
