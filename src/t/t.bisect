# Copyright 2014-2015 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

build_want() {
	RANGE=$1
	WANT=$2
	echo "# Setting up work area"
	echo "# Bisecting from `bk changes -nd:MD5KEY: -r1.2` to `bk changes -nd:MD5KEY: -r+`"
	for i in $RANGE
	do
		dspec="# ${i#*:} revisions left to try."
		bk changes -r${i%:*} -nd"$dspec"
	done
	bk changes -r$WANT -nd"\n# Found it! [:MD5KEY:]:"
	bk changes -r$WANT -d"ChangeSet@:I:\n\$each(:C:){  (:C:)\n}\n"
	echo "# Cleaning up"
	echo "# Bisect has finished."
}

echo $N Try specifying both range and search is an error ............$NL
commercial proj
touch afile
bk new $Q afile
i=2
while [ $i -lt 10 ];
do
	bk edit $Q afile
	echo $i >> afile
	bk delta $Q -a -y$i afile
	bk commit $Q -y$i
	i=`expr $i + 1`
done
# this is trying to find which revision introduced '5'
cat <<EOF > find.sh
#!/bin/sh
bk cat afile | grep -q 5 && exit 1
exit 0
EOF
chmod +x find.sh
# Specifying both should cause failure according to man page
bk bisect -qr1.2..+ --search --validate=none --cmd=find.sh 2> ERR \
    && fail -f ERR
echo OK

echo $N Test a simple bisect of a straight line graph................$NL
bk bisect -r.. --validate=none --cmd=find.sh 2>&1 | \
	sed 's/work area.*/work area/g;s/ChangeSet@1.5.*/ChangeSet@1.5/g;/.* ago: .*/d;s/^\# *\(.*\)/\# \1/g;' > GOT
build_want "1.6:6 1.4:3 1.5:1" 1.5 > WANT
cmpfiles WANT GOT
echo OK

echo $N Test verification............................................$NL
bk bisect -r1.2..+ --cmd=find.sh 2>&1 | \
	sed 's/work area.*/work area/g;s/ChangeSet@1.5.*/ChangeSet@1.5/g;s/exit codes.*/exit codes/g;/.* ago: .*/d;s/^\# *\(.*\)/\# \1/g;' > GOT
head -2 WANT > W
echo "# Validating exit codes" >> W
echo "# Validating exit status at `bk changes -nd:MD5KEY: -r1.2`" >> W
bk changes -r1.2 -nd'# :MD5KEY: 2' >> W
echo "# Validating exit status at `bk changes -nd:MD5KEY: -r+`" >> W
bk changes -r+ -nd'# :MD5KEY: 9' >> W
head -2 WANT > SKIP
grep -v -f SKIP WANT >> W
cmpfiles W GOT
echo OK

echo $N Now test two parallel branches...............................$NL
cd "$HERE"
bk clone $Q -r1.2 proj proj_copy
cd proj_copy
for i in a b c d e f g h i j
do
	bk edit $Q afile
	echo $i >> afile
	bk delta $Q -a -y$i afile
	bk commit $Q -y$i
done
cat <<EOF | bk pull $Q ../proj > OUT 2>&1 || fail
s
C
EOF

bk bisect -r1.2..+ --validate=none --cmd=../proj/find.sh 2>&1 | \
	sed 's/work area.*/work area/g;s/ChangeSet@1.5.*/ChangeSet@1.5/g;/.* ago: .*/d;s/^\# *\(.*\)/\# \1/g;' > GOT
build_want "1.2.1.9:17 1.7:8 1.5:4 1.4:2" 1.5 > WANT
cmpfiles WANT GOT
echo OK

echo $N Now look for something from the other side...................$NL
cd "$HERE/proj_copy"
cat <<EOF > find.sh
#!/bin/sh
bk cat afile | grep -q d && exit 1
exit 0
EOF
chmod +x find.sh
bk bisect -r1.2..+ --validate=none --cmd=find.sh 2>&1 | \
	sed 's/work area.*/work area/g;s/ChangeSet@1.2.1.4.*/ChangeSet@1.2.1.4/g;/.* ago: .*/d;s/^\# *\(.*\)/\# \1/g;' > GOT
build_want "1.2.1.9:17 1.2.1.5:8 1.2.1.3:4 1.2.1.4:1" 1.2.1.4 > WANT
cmpfiles WANT GOT
echo OK

echo $N Test skipping revs...........................................$NL
cd "$HERE/proj_copy"
cat <<'EOF' > find.sh
#!/bin/sh
C=`bk changes -nd:C: -r$BK_BISECT_KEY`
for i in 7 8 9
do
	test $C = $i && exit 2
done
bk cat afile | grep -q 5 && exit 1
exit 0
EOF
chmod +x find.sh
bk bisect -r1.2..+ --validate=none --cmd=find.sh 2>&1 | \
	sed 's/work area.*/work area/g;s/ChangeSet@1.5.*/ChangeSet@1.5/g' > GOT
build_want "1.2.1.8:19 1.7:10 1.8:10 1.4:10 1.2.1.9:8 1.6:7 1.2.1.10:7 1.5:6" 1.5 > WANT
# not sure how to test this since it involves random()
grep -q "ChangeSet@1.5" GOT || fail -f GOT
echo OK

echo $N Test skipping all revs.......................................$NL
cd "$HERE/proj_copy"
cat <<EOF > find.sh
#!/bin/sh
exit 2
EOF
chmod +x find.sh
bk bisect -r1.2..+ --validate=none --cmd=find.sh 2>&1 | \
	sed 's/work area.*/work area/g;s/ChangeSet@1.5.*/ChangeSet@1.5/g' > GOT
grep -q "No more changesets to try. Sorry I couldn't find it!" GOT || fail -f GOT
echo OK

# echo $N Test restricting tests to csets which change alias ..........$NL
# cd "$HERE"
# nested project
# # some csets in gcc
# for x in 1 2 3 
# do	touch gcc/foo
# 	bk delta $Q -la -fynull gcc/foo
# 	bk commit $Q -ygcc-work
# done
# touch gdb/foo
# bk new $Q gdb/foo
# bk commit $Q -ygdb-foo
# cat <<EOF > script
# #!/bin/sh
# bk _test -f gdb/SCCS/s.foo && exit 1
# exit 0
# EOF
# chmod +x script
# # No intermediate things change gdb so don't try them according to docs
# bk bisect -s./gdb -r.. --cmd=./script 2>&1 | \
#     sed 's/work area.*/work area/g;s/ChangeSet@1.6.*/ChangeSet@1.6/g' > GOT
# build_want "1.6:1" 1.6 > WANT
# cmpfiles WANT GOT
# echo OK
