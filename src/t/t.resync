# Copyright 1999-2008,2010-2011,2015 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# XXX still need to test propagation of:
# descriptive text
# permissions
# LODs
# per file information (flags, etc.)

_BK_PREVENT_RESOLVE_RERUN=1 
export _BK_PREVENT_RESOLVE_RERUN

# Because we use tar xmf we don't check for timestamp errors here.
unset _BK_DEVELOPER

mkBINs

echo $N Create initial repository ...................................$NL
commercial project
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if [ ! -d BitKeeper/tmp ]; then echo failed to make BitKeeper/tmp; exit 1; fi
if bk _test ! -f SCCS/s.ChangeSet; then echo failed to make ChangeSet; exit 1; fi
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo files are pending; bk pending; exit 1; fi
echo OK
echo $N Create some data ............................................$NL
mkdir src
cd src
echo foo > foo.c
echo bar > bar.c
echo h > h.h
bk ci $Q -i foo.c bar.c h.h
if bk _test ! -f SCCS/s.foo.c; then echo failed to create history; exit 1; fi
echo OK
echo $N Check pending ...............................................$NL
P=`bk pending | wc -l`
if [ $P -ne 15 ]; then echo wrong pending result $P; bk pending; exit 1; fi
echo OK
echo $N Create a change set .........................................$NL
bk commit $S -y"This is a \"Change Set\""
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo failed to clear pending list; bk pending; exit 1; fi
echo OK
cores
echo $N Create a copy of the project with clone .....................$NL
cd "$HERE"
bk clone $Q project clone
if [ ! -d clone ]; then echo failed to make top level directory; exit 1; fi
cd clone
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if [ ! -d BitKeeper/tmp ]; then echo failed to make BitKeeper/tmp; exit 1; fi
if bk _test ! -f SCCS/s.ChangeSet; then echo failed to make ChangeSet; exit 1; fi
if [ ! -f BitKeeper/log/parent ]; then echo failed to record parent; exit 1; fi
echo OK
cd "$HERE"
bk clone $Q project copy
echo $N Should not be able to resync unrelated repositories .........$NL
cd "$HERE"
fresh_commercial project2
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if bk _test ! -f SCCS/s.ChangeSet; then echo failed to make ChangeSet; exit 1; fi
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo files are pending; bk pending; exit 1; fi
echo "don't stand in the doorway, don't block up the hall" > times
bk ci $Q -i -ydylan times
bk commit $S -yCset2
bk pull $Q -R "$HERE/project" 2>pull.out
if [ $? -eq 0 ]; then echo failed; cat pull.out; exit 1; fi
if [ -d project2/src ]; then echo failed; exit 1; fi
echo OK
cores
echo $N Check circular rename .......................................$NL
cd "$HERE/project/src"
echo "File 1" > a.c
echo "File 2" > b.c
echo "File 3" > c.c
bk ci $Q -i a.c b.c c.c
rm -f a.c b.c c.c
bk commit $S -yabc
cd "$HERE/copy"
bk pull $Q "$HERE/project"
cd "$HERE"
tar cf chkpoint.tar copy
cd "$HERE/project/src"
# do circular renames (clockwise rotation)
# b.c = File 1
# c.c = File 2
# a.c = File 3
bk mv SCCS/s.c.c SCCS/s.d.c
bk mv SCCS/s.b.c SCCS/s.c.c
bk mv SCCS/s.a.c SCCS/s.b.c
bk mv SCCS/s.d.c SCCS/s.a.c
bk commit $S -yclockwise
cd "$HERE/copy"
bk pull $Q "$HERE/project"
cd "$HERE/copy/src"
bk get $Q a.c b.c c.c
echo "File 3" > X
bk undos X > ref.c
cmp -s ref.c a.c
if [ $? -ne 0 ]; then echo "failed a"; exit 1; fi
echo "File 1" > X
bk undos X > ref.c
cmp -s ref.c b.c
if [ $? -ne 0 ]; then echo "failed b"; exit 1; fi
echo "File 2" > X
bk undos X > ref.c
cmp -s ref.c c.c
if [ $? -ne 0 ]; then echo "failed c"; exit 1; fi
echo OK
cores
echo $N Check conflict within a patch ...............................$NL
cd "$HERE/project/src"
# d.c = File 2
# c.c = File 4
bk mv c.c d.c
echo "File 4" > c.c
bk ci $Q -i c.c
bk commit $S -y'Add d.c'
cd  "$HERE/copy/src"
bk pull $Q "$HERE/project"
if [ $? -ne 0 ]; then	echo pull failed; exit 1; fi
bk get $Q a.c b.c c.c d.c
echo "File 3" > X
bk undos X > ref.c
cmp -s ref.c a.c
if [ $? -ne 0 ]; then echo "failed a.c"; cat a.c; exit 1; fi
echo "File 1" > X
bk undos X > ref.c
cmp -s ref.c b.c
if [ $? -ne 0 ]; then echo "failed b.c"; cat b.c; exit 1; fi
echo "File 4" > X
bk undos X > ref.c
cmp -s ref.c c.c
if [ $? -ne 0 ]; then echo "failed c.c"; cat c.c; exit 1; fi
echo "File 2" > X
bk undos X > ref.c
cmp -s ref.c d.c
if [ $? -ne 0 ]; then echo "failed d.c"; cat d.c; exit 1; fi
echo OK
cores
echo $N Check conflict within a patch + circular rename..............$NL
# XXX - what conflict?
cd  "$HERE"
rm -rf "$HERE/copy"
tar xmf chkpoint.tar
cd  "$HERE/copy/src"
bk pull $Q -R "$HERE/project"
bk resolve $L $Q
bk get $Q a.c b.c c.c d.c
echo "File 3" > X
bk undos X > ref.c
cmp -s ref.c a.c
if [ $? -ne 0 ]; then echo "failed a.c"; cat a.c; exit 1; fi
echo "File 1" > X
bk undos X > ref.c
cmp -s ref.c b.c
if [ $? -ne 0 ]; then echo "failed b.c"; cat b.c; exit 1; fi
echo "File 4" > X
bk undos X > ref.c
cmp -s ref.c c.c
if [ $? -ne 0 ]; then echo "failed c.c"; cat c.c; exit 1; fi
echo "File 2" > X
bk undos X > ref.c
cmp -s ref.c d.c
if [ $? -ne 0 ]; then echo "failed d.c"; cat d.c; exit 1; fi
echo OK
cores
echo $N Check circular rename in two work spaces ....................$NL
cd  "$HERE"
rm -rf "$HERE/copy"
tar xmf chkpoint.tar
# "$HERE/project" already has circular rename w/ clockwise rotation
# a.c = File 3
# b.c = File 1
# c.c = File 4
# d.c = File 2
cd "$HERE/project/src"
if [ "`bk get -qp a.c`" != "File 3" ]
then	echo a.c is not File 3; exit 1
fi
if [ "`bk get -qp b.c`" != "File 1" ]
then	echo b.c is not File 1; exit 1
fi
if [ "`bk get -qp c.c`" != "File 4" ]
then	echo c.c is not File 4; exit 1
fi
if [ "`bk get -qp d.c`" != "File 2" ]
then	echo d.c is not File 2; exit 1
fi

# For $HERE/copy, we do a circular renames w/ counter clockwise rotation
cd  "$HERE/copy/src"
# a.c = File 2
# b.c = File 3
# c.c = File 1
bk mv a.c tmp
bk mv b.c a.c
bk mv c.c b.c
bk mv tmp c.c
if [ "`bk get -qp a.c`" != "File 2" ]
then	echo a.c is not File 2; exit 1
fi
if [ "`bk get -qp b.c`" != "File 3" ]
then	echo b.c is not File 3; exit 1
fi
if [ "`bk get -qp c.c`" != "File 1" ]
then	echo c.c is not File 1; exit 1
fi
bk commit $S -y'counter clockwise'
cd "$HERE/copy"
bk pull $Q -R "$HERE/project"
cp -rp "$HERE/copy" "$HERE/SAVE"
# This is completely dependent on the ordering of file processing in resolve.
# So what we do is run the first step of the rename processing and then
# go move them into the order we want: File 1, File 2, File 3, File 4
bk resolve $L $Q -234
cd RESYNC/BitKeeper/RENAMES
bk co $Q
for n in 1 2 3 4
do	set `cat $n`
	bk _mv SCCS/s.$n SCCS/s.FILE$2
	if bk _test -f SCCS/r.$n; then bk _mv SCCS/r.$n SCCS/r.FILE$2; fi
	if bk _test -f SCCS/m.$n; then bk _mv SCCS/m.$n SCCS/m.FILE$2; fi
	rm -f $n
done
for n in 1 2 3 4
do	bk _mv SCCS/s.FILE$n SCCS/s.$n
	if bk _test -f SCCS/r.FILE$n; then bk _mv SCCS/r.FILE$n SCCS/r.$n; fi
	if bk _test -f SCCS/m.FILE$n; then bk _mv SCCS/m.FILE$n SCCS/m.$n; fi
	rm -f $n
done
cd  "$HERE/copy"
# This is completely dependent on the ordering of file processing in resolve
# If this doesn't work, check that the files are processed in this order:
# File 1, File 2, File 3, File 4
bk resolve $L $Q -yMerge << EOF 2> resolve.out
r
r
r
src/d.c
u
EOF
if [ $? != 0 ]; then echo failed; cat resolve.out; exit 1; fi
cd  "$HERE/copy/src"
if [ "`bk get -qp a.c`" != "File 3" ]
then	echo a.c is not File 3; exit 1
fi
if [ "`bk get -qp b.c`" != "File 1" ]
then	echo b.c is not File 1; exit 1
fi
if [ "`bk get -qp c.c`" != "File 4" ]
then	echo c.c is not File 4; exit 1
fi
if [ "`bk get -qp d.c`" != "File 2" ]
then	echo d.c is not File 2; exit 1
fi
echo OK
cores
echo $N Check circular rename in two work spaces - alternate ........$NL
cd  "$HERE"
rm -rf "$HERE/copy"
tar xmf chkpoint.tar
# "$HERE/project" already has circular rename w/ clockwise rotation
# a.c = File 3
# b.c = File 1
# c.c = File 4
# d.c = File 2

# For "$HERE/copy", we do a circular renames w/ counter clockwise rotation
cd  "$HERE/copy/src"
# a.c = File 2
# b.c = File 3
# c.c = File 1
bk mv a.c tmp
bk mv b.c a.c
bk mv c.c b.c
bk mv tmp c.c
if [ "`bk get -qp a.c`" != "File 2" ]
then	echo a.c is not File 2; exit 1
fi
if [ "`bk get -qp b.c`" != "File 3" ]
then	echo b.c is not File 3; exit 1
fi
if [ "`bk get -qp c.c`" != "File 1" ]
then	echo c.c is not File 1; exit 1
fi
bk commit $S -y'counter clockwise'
cd "$HERE/copy"
bk pull $Q -R "$HERE/project"
cp -rp "$HERE/copy" "$HERE/SAVE"
# This is completely dependent on the ordering of file processing in resolve.
# So what we do is run the first step of the rename processing and then
# go move them into the order we want: File 1, File 2, File 3, File 4
bk resolve $L $Q -234 
cd RESYNC/BitKeeper/RENAMES
bk co $Q
for n in 1 2 3 4
do	set `cat $n`
	bk _mv SCCS/s.$n SCCS/s.FILE$2
	if bk _test -f SCCS/r.$n; then bk _mv SCCS/r.$n SCCS/r.FILE$2; fi
	if bk _test -f SCCS/m.$n; then bk _mv SCCS/m.$n SCCS/m.FILE$2; fi
	rm -f $n
done
for n in 1 2 3 4
do	bk _mv SCCS/s.FILE$n SCCS/s.$n
	if bk _test -f SCCS/r.FILE$n; then bk _mv SCCS/r.FILE$n SCCS/r.$n; fi
	if bk _test -f SCCS/m.FILE$n; then bk _mv SCCS/m.FILE$n SCCS/m.$n; fi
	rm -f $n
done

cd  "$HERE/copy"
bk resolve -1 $L $Q -yMerge << EOF > resolve.out 2>&1
?
m
src/junk
?
l
?
l
u
EOF
if [ $? != 0 ]; then echo failed; head -100 resolve.out; exit 1; fi
cd  "$HERE/copy/src"
if [ "`bk get -qp a.c`" != "File 2" ]
then	echo a.c is not File 2; exit 1
fi
if [ "`bk get -qp b.c`" != "File 3" ]
then	echo b.c is not File 3; exit 1
fi
if [ "`bk get -qp junk`" != "File 1" ]
then	echo c.c is not File 1; exit 1
fi
if [ "`bk get -qp c.c`" != "File 4" ]
then	echo d.c is not File 4; exit 1
fi
echo OK
cores

echo $N Check name conflict caused by rename ........................$NL
cd "$HERE/project/src"
echo "this is file gca" > g.c
bk ci $Q -i g.c
bk commit $S -yrename
cd  "$HERE"
rm -rf "$HERE/copy"
tar xmf chkpoint.tar
cd "$HERE/copy"
bk pull $Q -R "$HERE/project"
bk resolve $L $Q "$HERE/copy"
cd "$HERE/copy/src"
if bk _test ! -f SCCS/s.g.c; then echo failed, no g.c; exit 1; fi
cd "$HERE/project/src"
bk mv g.c r.c
bk commit $S -yrename
cd "$HERE/copy/src"
bk mv g.c l.c
echo "this is file p" > p.c
bk ci $Q -i p.c
bk mv p.c r.c
bk commit $S -yrename
bk pull $Q -R "$HERE/project"
bk resolve $L $Q -yMerge << EOF 2> resolve.out
r
EOF
if [ $? -eq 0 ]; then echo failed; cat resolve.out; exit 1; fi
echo OK

echo $N resync w/ pending rename in target tree .....................$NL
cd  "$HERE"
rm -rf "$HERE/copy"
tar xmf chkpoint.tar
bk clean "$HERE/copy/src"
cd "$HERE/copy/src"
bk get $Q -p a.c >ref.c
bk mv a.c e.c
bk pull $Q -R "$HERE/project" 2> pull.out
grep -q "has uncommitted changes" pull.out
if [ $? -ne 0 ]; then echo failed; exit 1; else echo OK; fi;
rm -f resync.out
cores

echo $N resync w/ pending rename in source tree .....................$NL
cd "$HERE/project/src"
bk get $Q -e a.c
KSRC=`bk prs -r+ -hnd:MD5KEY: a.c`
bk mv a.c f.c
cd  "$HERE"
rm -rf "$HERE/copy"
tar xmf chkpoint.tar
bk clean "$HERE/copy/src"
cd "$HERE/copy/src"
bk pull $Q -R "$HERE/project" || fail
bk resolve $L $Q $L || fail
KDST=`bk prs -r+ -hnd:MD5KEY: a.c`
test $KSRC = $KDST || {
     echo failed to restore pre-moved delta
     exit 1
}
bk _scat "$HERE/project/src/SCCS/s.b.c" > A
bk _scat "$HERE/copy/src/SCCS/s.b.c" > B
cmpfiles A B
bk _scat "$HERE/project/src/SCCS/s.c.c" > A
bk _scat "$HERE/copy/src/SCCS/s.c.c" > B
cmpfiles A B
rm A B
echo OK
cores

echo $N Key conflict in a single workspace ..........................$NL
# this test is time dependent
# this colud fail on a very fast machine
echo "12" > "$HERE/project/src/aa.c"
bk ci $Q -i "$HERE/project/src/aa.c"
bk mv "$HERE/project/src/aa.c"  "$HERE/project/src/bb.c"
echo "21" > "$HERE/project/src/aa.c"
bk ci $Q -i "$HERE/project/src/aa.c"
KEY1=`bk prs -hr+ -d:KEY: "$HERE/project/src/bb.c"`
KEY2=`bk prs -hr+ -d:KEY: "$HERE/project/src/aa.c"`
if [ "${KEY1}"X = "${KEY2}"X ]; then echo failed: duplicate key; exit 1; fi
echo OK
bk _rm "$HERE/project/src/SCCS/s.aa.c" "$HERE/project/src/SCCS/s.bb.c"
echo $N Key conflict in two workspace ...............................$NL
# this test is time dependent
# this colud fail on a very fast machine
echo "12" > "$HERE/project/src/dup.c"
echo "21" > "$HERE/copy/src/dup.c"
bk ci $Q -i "$HERE/project/src/dup.c" "$HERE/copy/src/dup.c"
KEY1=`bk prs -hr1.0 -d:KEY: "$HERE/project/src/dup.c"`
KEY2=`bk prs -hr1.0 -d:KEY: "$HERE/copy/src/dup.c"`
if [ "${KEY1}"X = "${KEY2}"X ]; then echo failed: duplicate key; exit 1; fi
echo OK
cores
bk _rm "$HERE/project/src/SCCS/s.dup.c" "$HERE/copy/src/SCCS/s.dup.c"

echo $N Check resync with binary file ...............................$NL
cd  "$HERE"
bk _rm -rf "$HERE/copy"
tar xmf chkpoint.tar
cd "$HERE/project/src"
cp "$BIN1" bdata
bk new $Q -Ebinary bdata
bk get $Q -r1.1 -Gbdata bdata
cmp -s bdata "$BIN1"
if [ $? -ne 0 ]; then echo failed test 1; cmp bdata "$BIN1"; exit 1; fi
bk commit $S --tag=binary1 -ybinary1
bk get $Q -e bdata
cp "$BIN2" bdata
bk ci $Q -y bdata
bk commit $S --tag=binary2 -ybinary2
cd  "$HERE/copy/src"
bk pull $Q -R "$HERE/project" || fail
bk resolve $L $Q
test -d RESYNC && {
	echo failed to finish resolve
	exit 1
}
bk get $Q bdata
cmp -s bdata "$BIN2" || fail
bk clone $Q -rbinary1 "$HERE/copy" "$HERE/copy2" || {
	cd "$HERE/copy2"
	bk lock -l
	exit 1
}
cd "$HERE/copy2/src"
bk get $Q bdata
cmp -s bdata "$BIN1"
if [ $? -ne 0 ]; then echo failed; exit 1; fi
(cd "$HERE/copy" && bk cset -B -mbinary2) | (cd "$HERE/copy2" && bk takepatch)
bk resolve $L $Q "$HERE/copy2"
bk get $Q bdata
cmp -s bdata "$BIN2"
if [ $? -ne 0 ]; then echo failed test 4; cmp bdata "$BIN2"; exit 1; fi
echo OK
cores
echo $N Check resolve w/ merge and delete event .....................$NL
cd "$HERE/project/src"
cat > merge.c << EOF
111
222
333
EOF
mkdir sub
echo "To be deleted" > sub/delete.c
bk ci $Q -i merge.c sub/delete.c
bk commit $S -y"abc"
cd "$HERE/copy"
bk pull $Q -R "$HERE/project"
bk resolve $L $Q "$HERE/copy"
cd "$HERE/project/src"
if bk _test ! -f "$HERE/copy/src/sub/SCCS/s.delete.c"; then echo failed; exit 1; fi
bk rm sub/delete.c
#if [ ! -f "$HERE/project/BitKeeper/deleted/SCCS/s..del-delete.c" ]
bk sfiles "$HERE/project/BitKeeper/deleted" | grep -q 's.delete.c~'
if [ $? -ne 0 ]; then echo failed; exit 1; fi
bk co $Q -l merge.c
sed -e"s/111/111-new/" merge.c > merge.tmp
mv merge.tmp merge.c
bk ci $Q -y merge.c
bk commit $S -y"abc"
cd "$HERE/copy/src"
bk co $Q -l merge.c
sed -e "s/333/333-newer/"  merge.c > merge.tmp
mv merge.tmp merge.c
bk ci $Q -y merge.c
bk commit $S -y"abc"
bk pull $Q -R "$HERE/project"
bk resolve $L $Q -a "$HERE/copy"
bk sfiles "$HERE/copy/BitKeeper/deleted" | grep -q "s.delete.c~"
if [ $? -ne 0 ]
then	echo failed to delete delete.c;
	pwd
	bk _find .| grep "delete" 
	exit 1
fi
if [ -d "$HERE/copy/src/sub" ]; then echo failed rmdir; exit 1; fi
bk co $Q merge.c
cat > X <<EOF
111-new
222
333-newer
EOF
bk undos X > merge.ref
cmp -s merge.c merge.ref
if [ $? -ne 0 ]; then echo failed; diff -u merge.c merge.ref; exit 1; fi
echo OK
cores
echo $N Merge back up should have no conflicts ......................$NL
cd "$HERE"
_BK_MV_OK=1 bk ci $Q -yrename project/src/f.c
cd "$HERE/project"
bk pull $Q -R "$HERE/copy"
cd "$HERE"
bk resolve project >resolve.out 2>&1
if [ $? -ne 0 ]
then echo failed
     cat resolve.out
fi
echo OK
cores
rm -f resolve.out

echo $N Test propagation of a symbol on new changeset ...............$NL
cd "$HERE/project/src"
date > symbol_test
bk new $Q symbol_test
bk commit $S -y"symbol+test" --tag='symbol+test'
cd "$HERE/copy"
bk pull $Q "$HERE/project"
if bk _test ! -f src/SCCS/s.symbol_test; then echo failed to send file; exit 1; fi
bk changes -r'symbol+test' > /dev/null || fail
echo OK
cores

echo $N Test propagation of a stand alone symbol "(meta delta)" .......$NL
cd "$HERE/project"
date > dummy
bk new $Q dummy
bk commit $S -y"symbol-test2"
bk admin $Q -S'later+symbol' SCCS/s.ChangeSet
cd "$HERE/copy"
bk pull $Q -R "$HERE/project"
grep -q 'S later+symbol' "$HERE/copy/PENDING/"* || {
	echo symbol not part of the patch
	cat "$HERE/copy/PENDING/"*
	exit 1
}
cp "$HERE/copy/PENDING/"* "$HERE"
bk resolve -a $Q "$HERE/copy"
cd "$HERE/copy"
bk changes -r'later+symbol' > /dev/null || fail
echo OK

echo $N Test propagation of a symbol added later and unrelated data..$NL
cd "$HERE/project"
bk admin $Q -S'additional-symbol=1.1' SCCS/s.ChangeSet || fail
bk co $Q -l dummy
date > dummy
bk ci $Q -m'additional' dummy
bk commit $S -y'additional-symbol-test-2'
cd "$HERE/copy"
bk pull $Q "$HERE/project"
bk changes -r'additional-symbol=1.1' > /dev/null || fail
echo OK

echo $N Test propagation of a symbol added later by itself ..........$NL
cd "$HERE/project"
bk admin $Q -S'YAsymbol=1.5' ChangeSet
cd "$HERE/copy"
bk pull $Q "$HERE/project"
bk changes -r'YAsymbol=1.5' > /dev/null || fail
echo OK
cores

# TEST: Check for parallel work winds up losing a file
# This is a test for the ChangeSet file weave...
echo "----------- Andrew's anomaly (file disappears) -----------"
cd "$HERE"
rm -fr project copy
echo $N Create initial repository ...................................$NL
commercial project
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if bk _test ! -f SCCS/s.ChangeSet; then echo failed to make ChangeSet; exit 1; fi
mkdir src
cd src
cat << EOF > aaa.c
1
2
3
EOF
cp aaa.c bbb.c
cp aaa.c ccc.c
bk ci $Q -i aaa.c bbb.c ccc.c
bk commit $S -yCset
echo OK
echo $N Create a copy of the project ................................$NL
cd "$HERE"
bk clone $Q "$HERE/project" "$HERE/copy"
echo OK
echo $N Commit parallel work ........................................$NL
cd "$HERE/project/src"
for i in aaa.c bbb.c
do
        bk co $Q -l $i
        echo "this is $i" >> $i
        bk ci $Q -y $i
done
bk commit $S -yab << EOF
y
EOF
cd "$HERE/copy/src"
for i in bbb.c ccc.c
do
        bk co $Q -l $i
        sed -e"s/1/111/" $i > $i.T
        mv $i.T $i
        bk ci $Q -y $i
done
bk commit $S -ybc
echo OK
echo $N Resync project to copy, check for file presence in cset .....$NL
cd "$HERE/copy"
bk pull $Q -R "$HERE/project"
bk resolve $L $Q << EOF > resolve.out 2>&1
m
C
comment for merge
.
u
EOF
if [ $? != 0 ]; then echo failed; exit 1; fi
if [ -d RESYNC ]
then	echo failed to finish resolve; exit 1
fi
# There should be anything pending
bk pending | grep -q "aaa.c"
if [ $? -eq 0 ]; then echo "fail: disappeared from ChangeSet"; exit 1; fi
echo OK
echo $N Make sure that we update gfiles appropriately ...............$NL
cd "$HERE/copy/src"
bk co $Q
cd "$HERE/project/src"
bk edit -q aaa.c
echo "NEW NEW NEW" >> aaa.c
bk ci -q -yaaa.c aaa.c
bk commit -q -yaaa.c
cd "$HERE"
cd copy/src
bk pull $Q "$HERE/project"
if [ ! -f aaa.c ]; then echo Failed to get aaa.c; exit 1; fi
bk co -qp aaa.c > aaa.p
diff aaa.p aaa.c
if [ $? -ne 0 ]
then	echo Failed to update aaa.c
	exit 1
fi
rm -f aaa.p aaa.c
echo OK
echo $N Check resolve w/ auto merge and overlap change ..............$NL
cd "$HERE/project/src"
cat > overlap.c << EOF
111
222
333
EOF
bk ci $Q -i overlap.c
bk commit $S -y"abc"
# let's verify that you can have URL's for the first
# argument
cd "$HERE/copy"
bk parent $Q -sn junk
bk pull $Q -R "$HERE/project" || {
	echo failed resync with url
	exit 1
}
bk parent $Q "$HERE/project"
cd "$HERE"; tar cf copy.tar copy; cd "$HERE/project/src"
bk resolve $L $Q "$HERE/copy"
bk co $Q -l overlap.c
sed -e"s/222/222-left/" overlap.c > overlap.tmp
mv overlap.tmp overlap.c
bk ci $Q -y overlap.c
bk commit $S -y"abc"
bk co $Q -l overlap.c
cd "$HERE/copy/src"
bk co $Q -l overlap.c
sed -e "s/222/222-right/"  overlap.c > overlap.tmp
mv overlap.tmp overlap.c
bk ci $Q -y overlap.c
bk commit $S -y"abc"
cd "$HERE/copy"
bk pull $Q -R "$HERE/project"
cd "$HERE"; tar cf copy.tar copy; cd "$HERE/project/src"
bk resolve $L $Q -a "$HERE/copy" 2> resolve.out
grep -q "unresolved conflicts, nothing is applied" resolve.out
if [ $? -ne 0 ]; then echo failed; cat resolve.out; exit 1; fi
echo OK
