# Copyright 2001,2004-2007 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

test -d "$HERE/home" || mkdir "$HERE/home"
export BK_TEST_HOME="$HERE/home"
export _BK_PREVENT_RESOLVE_RERUN=YES
OUT="$HERE/out"
RC="`bk dotbk`/fm3.rc"

echo $N Create some data ............................................$NL
commercial project
cd "$HERE/project/BitKeeper/etc"
mkdir "$HERE/project/src"
cd "$HERE/project/src"
cat >file1 <<EOF
1: this is file1
2: this is part of the original file
3: this is part of the original file
4: this is part of the original file
5: this is part of the original file
6: this is part of the original file
7: this is part of the original file
EOF
cat >file2 <<EOF
1: this is file2
2: this is part of the original file
3: this is part of the original file
4: this is part of the original file
5: this is part of the original file
6: this is part of the original file
7: this is part of the original file
EOF
bk ci $Q -i file1 file2 || exit 1
bk commit $Q -y"initial checkin"
# create clones
cd "$HERE"
bk clone $Q "$HERE/project" "$HERE/remote"
bk clone $Q "$HERE/project" "$HERE/local"
# introduce conflicts
cd "$HERE/remote/src"
bk get $Q -e file1
cat >file1 <<EOF
1: this is file1
2: this has changed in the remote project
3: this has changed in the remote project
4: this is part of the original file
   this has been added in the remote project
   this has been added in the remote project
5: this is part of the original file
6: this has changed in both the local and remote project
7: this is part of the original file
EOF
bk ci $Q -y"introduced conflicts" file1
bk commit $Q -y"introduced conflicts in file1"
cd "$HERE/local/src"
bk get $Q -e file1
cat >file1 <<EOF
1: this is file1
2: this has changed in the local project
3: this is part of the original file
4: this is part of the original file
5: this is part of the original file
6: this has changed in both the local and remote project
7: this is part of the original file
EOF
bk ci $Q -y"introduced conflicts" file1
bk commit $Q -y"introduced conflicts in file1"
# pushing remote changes to parent
cd "$HERE/remote"
bk push $Q
# pulling changes to local
cd "$HERE/local"
bk pull $Q 2>pull.err
if [ ! -d RESYNC ]; then echo failed to create RESYNC directory; exit 1; fi
echo OK

echo $N Simple startup and exit......................................$NL
cd "$HERE/local/RESYNC"
bk guitest fm3tool -f -l1.1.1.1 -r1.2 src/file1 >"$OUT" 2>&1 <<'EOF'
    test_invokeMenu File->Quit
    test_die 99
EOF
err=$?
test -s "$OUT" && { echo failed; cat "$OUT"; exit 1; }
if [ $err -ne 0 ]; then echo failed; echo "exited $err expected 0"; exit 1; fi
echo OK

echo $N Create dotbk/fm3.rc .........................................$NL
test -f "$RC" && rm -f "$RC"
cd "$HERE/local/RESYNC"
bk guitest fm3tool -f -l1.1.1.1 -r1.2 src/file1 >"$OUT" 2>&1 <<'EOF'
    test_invokeMenu File->Quit
    test_die 99
EOF
test -f "$RC" || (echo failed; exit 1; )
echo "OK"

echo $N Proper count of diffs and conflicts..........................$NL
cd "$HERE/local/RESYNC"
bk guitest fm3tool -f -l1.1.1.1 -r1.2 src/file1 >"$OUT" 2>&1 <<'EOF'
    global diffCount conf_todo
    if {$conf_todo != 1 || $diffCount != 3} {
	puts "conf_todo is $conf_to; expected 1"
	puts "diffCount is $diffCount; expected 3"
	exit 1
    }
    exit 0
EOF
err=$?
test -s "$OUT" && { echo failed; cat "$OUT"; exit 1; }
if [ $err -ne 0 ]; then echo failed; echo "exited $err expected 0"; exit 1; fi
echo OK
