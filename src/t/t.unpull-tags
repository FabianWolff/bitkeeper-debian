# Copyright 2006,2010-2011,2015 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

echo $N Unpull after a pull which has a tag as the newest thing .....$NL
commercial project
cd ..
bk clone $Q project tag
cd project
touch foo
bk new $Q foo
bk commit $Q -yfoo
cd ../tag
bk tag $Q TAGIT
bk changes -qk > WANT
bk pull $Q || fail
bk changes -qk > WANT2
bk unpull $Q -f || fail
bk changes -qk > GOT
checkfiles WANT GOT
bk takepatch -af BitKeeper/tmp/unpull.patch
bk changes -qk > GOT2
checkfiles WANT2 GOT2
echo OK

echo $N Unpull after a pull which has a delta as the newest thing ...$NL
cd "$HERE"
bk clone $Q project chg
cd project
bk tag $Q TAGIT
cd ../chg
touch bar
bk new $Q bar
bk commit $Q -ybar
bk changes -qk > WANT
bk pull $Q || fail
bk changes -qk > WANT2
bk unpull $Q -f || fail
bk changes -qk > GOT
checkfiles WANT GOT
bk takepatch -af BitKeeper/tmp/unpull.patch
bk changes -qk > GOT2
checkfiles WANT2 GOT2
echo OK

echo $N Unpull after a pull which was a tag only exchange ...........$NL
cd "$HERE"
bk clone $Q project tagonly
cd project
bk tag $Q PROJ
cd ../tagonly
bk tag $Q TAGONLY
bk changes -qk > WANT
bk pull $Q
bk changes -qk > WANT2
bk unpull $Q -f || fail
bk changes -qk > GOT
checkfiles WANT GOT
bk takepatch -af BitKeeper/tmp/unpull.patch
bk changes -qk > GOT2
checkfiles WANT2 GOT2
echo OK

# If I used :KEY: inside {..} I get the key of the tagged real delta :(
# Hack this function to get the real key associated with tag
_tagkeys() {
	bk changes -ad':MD5KEY:\n$each(:TAG:){x\t(:TAG:)\n}' | while read line
	do
		TAG=`echo "$line" | sed -n 's/x	//p'`
		test -z "$TAG" && {
			KEY="$line"
			continue
		}
		test "$TAG" = "$1" && echo "$KEY"
	done
}

echo $N Create a non-merge resolve tag and unpull it ................$NL
cd "$HERE"
bk clone $Q project resolve-tag
cd resolve-tag
bk edit $Q foo
bk delta $Q -fyfoo foo
bk commit $Q -yfoo --tag=FIRST
bk edit $Q foo
bk delta $Q -fyfoo foo
bk commit $Q -yfoo --tag=SECOND
cd ../project
bk edit $Q foo
bk delta $Q -fyfoo foo
bk commit $Q -yfoo --tag=FIRST
bk edit $Q foo
bk delta $Q -fyfoo foo
bk commit $Q -yfoo --tag=SECOND
cd ../resolve-tag
ORIG=`_tagkeys SECOND | head -1`
bk pull $Q -R
{ echo l; echo l; } | bk resolve $Q 2> ERR || fail
cp BitKeeper/etc/csets-in save-csets-in
bk _scat SCCS/s.ChangeSet > cs
bk unpull $Q -f
FINAL=`_tagkeys SECOND | head -1`
test "$ORIG" = "$FINAL" || {
	echo failed
	echo "ORIG " $ORIG
	echo "FINAL" $FINAL
	exit 1
}
# Roll forward, both to test and to set up the next test
bk takepatch -af BitKeeper/tmp/unpull.patch || fail
bk _scat SCCS/s.ChangeSet > csB
checkfiles cs csB
cp BitKeeper/etc/csets-in save-csets-in
echo OK

echo $N Make a local tag and see that unpull fails ..................$NL
bk tag $Q NEWLOCALTIP
bk _cp SCCS/s.ChangeSet cs
chmod +w cs
bk unpull 2> ERR && {
	echo Should have failed
	exit 1
}
grep -q "unpull: will not unpull because of a local tag" ERR || {
	echo wrong error message
	cat ERR
	exit 1 
}
bk _cp SCCS/s.ChangeSet csB
checkfiles cs csB
echo OK
