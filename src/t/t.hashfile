# Copyright 2009-2012,2015 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

echo ---- hash file read tests

echon empty file ..................................................
touch empty
bk _hashfile_test -r empty >got || fail
test -z "`cat got`" || fail
echo OK

echon two null hashes .............................................
cat <<EOF >in
@
EOF
bk _hashfile_test -r in >got || fail
cat <<EOF >want
---
EOF
cmpfiles want got
echo OK

echon null hash followed by non-null hash .........................
cat <<EOF >in
@
@key
hash2
EOF
bk _hashfile_test -r in >got || fail
cat <<EOF >want
---
key => hash2
EOF
cmpfiles want got
echo OK

echon non-hash followed by hash with header .......................
cat <<EOF >in
old file
@
hybrid file
@key
hash2
@
@key
hash3
EOF
bk _hashfile_test -r in >got || fail
cat <<EOF >want
 => old file
---
 => hybrid file
key => hash2
---
key => hash3
EOF
cmpfiles want got
echo OK


echon two hashes ..................................................
cat <<EOF >in
@key1
value1
@
@key2
value2
EOF
bk _hashfile_test -r in >got || fail
cat <<EOF >want
key1 => value1
---
key2 => value2
EOF
cmpfiles want got
echo OK

echon one value, no key ...........................................
cat <<EOF >in
value1
EOF
bk _hashfile_test -r in >got || fail
cat <<EOF >want
 => value1
EOF
cmpfiles want got
echo OK

echon one value, no key, null 2nd record ..........................
cat <<EOF >in
value1
@
EOF
bk _hashfile_test -r in >got || fail
cat <<EOF >want
 => value1
---
EOF
cmpfiles want got
echo OK

echon one key,value no cr .........................................
cat <<EOF >in
@key1
value1
EOF
bk _hashfile_test -r in >got || fail
cat <<EOF >want
key1 => value1
EOF
cmpfiles want got
echo OK

echon one key,value one cr ........................................
cat <<EOF >in
@key1
value1

EOF
bk _hashfile_test -r in >got || fail
cat <<EOF >want
key1 => value1

EOF
cmpfiles want got
echo OK

echon one key,value two crs .......................................
cat <<EOF >in
@key1
value1


EOF
bk _hashfile_test -r in >got || fail
cat <<EOF >want
key1 => value1


EOF
cmpfiles want got
echo OK

echon key with white space ........................................
# Use a tab in the key since the hash reading code allows it.
cat <<EOF >in
@has	tab
value
EOF
bk _hashfile_test -r in >got || fail
cat <<EOF >want
has	tab => value
EOF
cmpfiles want got
echo OK

echon key with unprintable character ..............................
printf "@has\001ctrlA\n" >in
echo value >>in
bk _hashfile_test -r in >got || fail
printf "has\001ctrlA => value\n" >want
cmpfiles want got
echo OK

echon value with leading @s .......................................
cat <<EOF >in
@key1
@@line1
@@@line2
@@@@line3
EOF
bk _hashfile_test -r in >got || fail
cat <<EOF >want
key1 => @line1
@@line2
@@@line3
EOF
cmpfiles want got
echo OK

echon bad key of single space .....................................
cat <<EOF >in
@ 
value
EOF
bk _hashfile_test -r in >got || fail
cat <<EOF > want
  => value
EOF
cmpfiles got want
echo OK

echon bad key with space 1 ........................................
cat <<EOF >in
@ base6
value
EOF
bk _hashfile_test -r in >got || fail
cat <<EOF > want
 base6 => value
EOF
cmpfiles want got
echo OK

echon bad key with space 2 ........................................
cat <<EOF >in
@ base64 is the best
value
EOF
bk _hashfile_test -r in >got || fail
cat <<EOF > want
 base64 is the best => value
EOF
cmpfiles want got
echo OK

echon single-line base64 value ....................................
cat <<EOF >in
@key1 base64
`echo this is short | bk base64`
EOF
bk _hashfile_test -r in >got || fail
cat <<EOF >want
key1 => this is short

EOF
cmpfiles want got
echo OK

echon mult-line base64 value ......................................
cat <<EOF >data
this is a somewhat long line and it is line 1
this is a somewhat long line and it is line 2
this is a somewhat long line and it is line 3
this is a somewhat long line and it is line 4
this is a somewhat long line and it is line 5
EOF
cat <<EOF >in
@key1 base64
`bk base64 <data`
EOF
bk _hashfile_test -r in >got || fail
cat <<EOF >want
key1 => this is a somewhat long line and it is line 1
this is a somewhat long line and it is line 2
this is a somewhat long line and it is line 3
this is a somewhat long line and it is line 4
this is a somewhat long line and it is line 5

EOF
cmpfiles want got
echo OK

echon two key,values ..............................................
cat <<EOF >in
@key1
value1
@key2
value2
EOF
bk _hashfile_test -r in >got || fail
cat <<EOF >want
key1 => value1
key2 => value2
EOF
cmpfiles want got
echo OK

echo ---- hash file write tests

echon key with white space error ..................................
# Use a tab in the key since the hash reading code allows it.
cat <<EOF >in
@has	tab
value
EOF
bk _hashfile_test -w in >got || fail
cat <<EOF > WANT
@has	tab
value
EOF
cmpfiles got WANT
echo OK

echon key with unprintable character error ........................
printf "@has\001ctrlA\n" >in
echo value >>in
bk _hashfile_test -w in >got || fail
cmpfiles got in
echo OK

echon key with null error .........................................
bk _hashfile_test -n out >got 2>err || fail -f err
grep -q 'not C string' err || fail
echo OK

echon check that written hash is sorted ...........................
cat <<EOF >in
@key2
value2
@key1
value1
EOF
bk _hashfile_test -w in >got || fail
cat <<EOF >want
@key1
value1
@key2
value2
EOF
cmpfiles want got
echo OK

echon ascii value with no cr.......................................
cat <<EOF >in
@key1
value1
EOF
bk _hashfile_test -w in >got || fail
cmpfiles in got
echo OK

echon ascii value with cr .........................................
cat <<EOF >in
@key1
value1

EOF
bk _hashfile_test -w in >got || fail
cmpfiles in got
echo OK

echon multi-line ascii value ......................................
cat <<EOF >in
@key1
value1-1
value2-2
value3-3
EOF
bk _hashfile_test -w in >got || fail
cmpfiles in got
echo OK

echon single-line ascii value with escaped @ ......................
cat <<EOF >in
@key1
@@value1-1
EOF
bk _hashfile_test -w in >got || fail
cmpfiles in got
echo OK

echon multi-line ascii value with escaped @ .......................
cat <<EOF >in
@key1
@@value1-1
@@value1-2
EOF
bk _hashfile_test -w in >got || fail
cmpfiles in got
echo OK

echon 256-character value with no cr gets ascii encoded ...........
# this value is 256 characters and should not get base64 encoded
cat <<EOF >in
@key1
1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456
EOF
bk _hashfile_test -w in >got || fail
cmpfiles in got
echo OK

echon 256-character line gets ascii encoded .......................
# this value is 256 characters (including the cr) and should not
# get base64 encoded
cat <<EOF >in
@key1
1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456

EOF
bk _hashfile_test -w in >got || fail
cmpfiles in got
echo OK

echon 257-character value with no cr gets base64 encoded ..........
# this value is 257 characters and should get base64 encoded
cat <<EOF >in
@key1
12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567
EOF
bk _hashfile_test -w in >got || fail
grep -q 'base64' got || fail -f got
# now dump the base64-encoded file and check the value
bk _hashfile_test -r got >out || fail
cat <<EOF >want
key1 => 12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567
EOF
cmpfiles out want
echo OK

echon 257-character line gets base64 encoded ......................
# this value has a 257-character line and should get base64 encoded
cat <<EOF >in
@key1
12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567

EOF
bk _hashfile_test -w in >got || fail
grep -q 'base64' got || fail
# now dump the base64-encoded file and check the value
bk _hashfile_test -r got >out || fail
cat <<EOF >want
key1 => 12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567

EOF
cmpfiles out want
echo OK

echon value with non-printables gets base64 encoded ...............
echo @key1 >in
printf "has\001ctrlA\n" >>in
bk _hashfile_test -w in >got || fail
grep -q 'base64' got || fail
# now dump the base64-encoded file and check the value
bk _hashfile_test -r got >out || fail
grep -q 'key1 => has.ctrlA' out || fail
echo OK

echon show various empty values ...................................
cat <<EOF > in
@key1
@key2

@key3


@key4 base64
EOF
bk _hashfile_test -rX in > out || fail
cat <<EOF > WANT
key1 => 00
key2 => 00
key3 => 0a 00
key4 => 00
EOF
cmpfiles out WANT
bk _hashfile_test -w in > out || fail
cat <<EOF > WANT
@key1
@key2
@key3


@key4
EOF
cmpfiles out WANT
echo OK
