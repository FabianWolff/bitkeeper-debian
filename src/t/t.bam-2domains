# Copyright 2007-2011,2015 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

BK_NO_HARDLINK_CLONE=1
export BK_NO_HARDLINK_CLONE

echo ---- Server S w/ client C1 to a serverless client C2 ..........
# S and C1 are the server and client, C2 is the serverless client.
# Make sure S is updated in a C1->C2 transfer.
# S3 is the server for *3 clients
# any BAM data until the user requests a checkout.  And also that
# only the checked out versions are sent.
echo $N Set up a repo with some binary data .........................$NL
bk bkd -d -aPORT -ikill  || fail
P=`cat PORT`
trap "bk _kill bk://localhost:$P" 0
commercial S
bk bam server $Q . || fail
BK="`bk bin`/bk"
test $PLATFORM = WIN32 && BK=${BK}.exe
DATA="$HERE"/data
perl -e 'sysread(STDIN, $buf, 81920);
syswrite(STDOUT, $buf, 81920);' < $BK > "$DATA"
cp "$DATA" data
bk new $Q data || fail
test -d BitKeeper/BAM || fail
bk commit $Q -ywhatever
cp "$DATA" moredata
echo foo >> moredata
bk new $Q moredata || fail
bk edit $Q data
echo bar >> data
bk delta $Q -ychanged data
bk commit $Q -ywhatever
echo OK

echo $N clone within domain should not replicate the BAM data .......$NL
cd "$HERE"
bk clone $Q bk://localhost:$P/S C1
cd C1
test -d BitKeeper/BAM && fail should not have BAM directory yet
echo OK

echo $N clone to serverless domain should replicate the BAM data ....$NL
cd "$HERE"
bk clone -Bnone $Q S C2
cd C2
(cd ../S && find BitKeeper/BAM -type f -print ) |
while read x
do	test -f $x || echo $x is missing
done > OUT 2>&1
test -f BitKeeper/log/BAM || echo BitKeeper/log/BAM is missing >> OUT
grep -q missing OUT && fail -f OUT
test -f BitKeeper/log/BAM_SERVER && fail should not have BAM server
echo OK

echo $N rclone to serverless domain should replicate the BAM data ...$NL
cd "$HERE"
bk _rm -rf C2
bk clone $Q -Bnone S bk://localhost:$P/C2
cd C2
(cd ../S && find BitKeeper/BAM -type f -print ) |
while read x
do	test -f $x || echo $x is missing
done > OUT 2>&1
test -f BitKeeper/log/BAM || echo BitKeeper/log/BAM is missing >> OUT
grep -q missing OUT && fail -f OUT
test -f BitKeeper/log/BAM_SERVER && fail should not have BAM server
echo OK

echo $N lclone should replicate the BAM data ........................$NL
cd "$HERE"
bk _rm -rf C2
BK_NO_HARDLINK_CLONE= bk clone $Q -l S C2
cd C2
(cd ../S && find BitKeeper/BAM -type f -print ) |
while read x
do	test -f $x || echo $x is missing
done > OUT 2>&1
test -f BitKeeper/log/BAM || echo BitKeeper/log/BAM is missing >> OUT
grep -q missing OUT && fail -f OUT
echo OK

echo $N Check that pull from server to serverless gets BAM data .....$NL
cd "$HERE"
bk _rm -rf C2
bk clone $Q -Bnone -r1.1 S C2 || fail
test -d C2/BitKeeper/BAM && fail should not have BAM directory yet
cd C2
bk pull $Q
(cd ../S && find BitKeeper/BAM -type f -print ) |
while read x
do	test -f $x || echo $x is missing
done > OUT 2>&1
test -f BitKeeper/log/BAM || echo BitKeeper/log/BAM is missing >> OUT
grep -q missing OUT && {
	cat OUT > ERR
	ls BitKeeper/log >> ERR
	fail -f ERR
}
test -f BitKeeper/log/BAM_SERVER && fail should not have BAM server
echo OK

echo $N Check that push from server to serverless sends BAM data ....$NL
cd "$HERE"
bk _rm -rf C2
bk clone $Q -Bnone -r1.1 S C2
test -d C2/BitKeeper/BAM && fail should not have BAM directory yet
cd S
bk push $Q ../C2
cd ../C2
(cd ../S && find BitKeeper/BAM -type f -print ) |
while read x
do	test -f $x || echo $x is missing
done > OUT 2>&1
test -f BitKeeper/log/BAM || echo BitKeeper/log/BAM is missing >> OUT
grep -q missing OUT && {
	cat OUT > ERR
	ls BitKeeper/log >> ERR
	fail -f ERR
}
test -f BitKeeper/log/BAM_SERVER && fail should not have BAM server
echo OK

echo $N Check that pull can recurse thru C1 to S to get BAM data ....$NL
cd "$HERE"
bk _rm -rf C2
bk clone $Q -Bnone -r1.1 S C2
test -d C2/BitKeeper/BAM && fail should not have BAM directory yet
cd C2
bk pull $Q ../C1
(cd ../S && find BitKeeper/BAM -type f -print ) |
while read x
do	test -f $x || echo $x is missing
done > OUT 2>&1
test -f BitKeeper/log/BAM || echo BitKeeper/log/BAM is missing >> OUT
grep -q missing OUT && fail -f OUT
test -f BitKeeper/log/BAM_SERVER && fail should not have BAM server
echo OK

echo $N Same thing with part of the data in C1 and rest in S ........$NL
cd "$HERE/C1"
test -d BitKeeper/BAM && fail expected C1 to have no BAM data
cp "$DATA" data.c1
echo blah >> data.c1
bk new $Q data.c1
bk commit -ywhatever $Q
find BitKeeper/BAM/*/?? -type f -print > "$HERE/BAMFILES"
cd "$HERE/S"
find BitKeeper/BAM/*/?? -type f -print >> "$HERE/BAMFILES"
cd "$HERE"
tar cf TAR S C1
bk _rm -rf C2
bk clone $Q -Bnone -r1.1 S C2
test -d C2/BitKeeper/BAM && fail should not have BAM directory yet
cd C2
bk pull $Q ../C1
test -f BitKeeper/log/BAM_SERVER && fail should not have BAM server
bk bam check -q || fail failed to get all BAM data
test -f BitKeeper/log/BAM || echo BitKeeper/log/BAM is missing > "$HERE"/OUT
cd ../S
cat "$HERE/BAMFILES" | while read x
do	test -f "$x" || echo $x is missing
done >> "$HERE/OUT" 2>&1 
grep -q missing "$HERE/OUT" && {
	fail -f "$HERE/OUT" failed to update the server from C1
}
cd ../C2
bk co $Q
test -f data -a -f moredata -a -f data.c1 || fail co failed
echo OK

echo $N Clone C1 to C2 with part in C1 and rest in S ................$NL
cd "$HERE"
rm -rf S C1 C2
tar xf TAR
bk clone $Q -Bnone C1 C2
cd C2
test -f BitKeeper/log/BAM_SERVER && fail should not have BAM server
bk bam check -q || fail failed to get all BAM data
test -f BitKeeper/log/BAM || echo BitKeeper/log/BAM is missing > "$HERE"/OUT
cd ../S
cat "$HERE/BAMFILES" | while read x
do	test -f $x || echo $x is missing
done >> "$HERE/OUT" 2>&1 
grep -q missing "$HERE/OUT" && {
	fail -f "$HERE/OUT" failed to update the server from C1
}
cd ../C2
bk co $Q
test -f data -a -f moredata -a -f data.c1 || fail co failed
echo OK

echo $N rClone C1 to C2 with part in C1 and rest in S ...............$NL
cd "$HERE"
bk _rm -rf S C1 C2
tar xf TAR
bk clone $Q -Bnone C1 bk://localhost:$P/C2
cd C2
test -f BitKeeper/log/BAM_SERVER && fail should not have BAM server
bk bam check -q || fail failed to get all BAM data
test -f BitKeeper/log/BAM || echo BitKeeper/log/BAM is missing > "$HERE"/OUT
cd ../S
cat "$HERE/BAMFILES" | while read x
do	test -f $x || echo $x is missing
done >> "$HERE/OUT" 2>&1 
grep -q missing "$HERE/OUT" && {
	fail -f "$HERE/OUT" failed to update the server from C1
}
cd ../C2
bk co $Q
test -f data -a -f moredata -a -f data.c1 || fail co failed
echo OK

echo $N Push C1 to C2 with part in C1 and rest in S .................$NL
cd "$HERE"
rm -rf S C1 C2
tar xf TAR
bk clone -r1.1 $Q -Bnone C1 C2
cd C1
bk push $Q ../C2
cd ../C2
test -f BitKeeper/log/BAM_SERVER && fail should not have BAM server
bk bam check -q || fail failed to get all BAM data
test -f BitKeeper/log/BAM || echo BitKeeper/log/BAM is missing > "$HERE"/OUT
cd ../S
cat "$HERE/BAMFILES" | while read x
do	test -f $x || echo $x is missing
done >> "$HERE/OUT" 2>&1 
grep -q missing "$HERE/OUT" && {
	fail -f "$HERE/OUT" failed to update the server from C1
}
cd ../C2
bk co $Q
test -f data -a -f moredata -a -f data.c1 || fail co failed
echo OK

echo ---- Serverless C2 to C1 ......................................
echo $N Clone C2 to C1, should send unique BAM data .................$NL
cd "$HERE"
bk _rm -rf C1
cd C2
cp "$DATA" data.c2
echo data.c2 >> data.c2
bk new $Q data.c2
bk commit -ywhatever $Q
cd ..
bk clone $Q -Bbk://localhost:$P/S C2 C1
cd C1
bk bam check -q || fail
# The data.c2 file is the only one unique to C2 repo so that's the one
# we expect to see here.  And just that one, the rest are in the server.
test `find BitKeeper/BAM/*/?? -type f -print | wc -l` -eq 1 || {
	find BitKeeper/BAM/*/?? -type f -print > ERR
	fail -f ERR unexpected BAM files
}
for i in BitKeeper/log/BAM BitKeeper/log/BAM_SERVER
do	test -f $i || echo $i
done >> OUT
grep -q missing OUT && {
	(
		cat OUT
		echo C1
		find BitKeeper/BAM -type f -print
		cd ../C2
		echo C2
		find BitKeeper/BAM -type f -print
	) > ERR
	fail -f ERR
}
echo OK

echo $N rClone C2 to C1, should send unique BAM data ................$NL
cd "$HERE"
rm -rf C1
bk clone $Q -Bbk://localhost:$P/S C2 bk://localhost:$P/C1
cd C1
bk bam check -q || fail
# The data.c2 file is the only one unique to C2 repo so that's the one
# we expect to see here.  And just that one, the rest are in the server.
test `find BitKeeper/BAM/*/?? -type f -print | wc -l` -eq 1 || {
	find BitKeeper/BAM/*/?? -type f -print > ERR
	fail -f ERR unexpected BAM files
}
for i in BitKeeper/log/BAM BitKeeper/log/BAM_SERVER
do	test -f $i || echo $i is missing
done >> OUT
grep -q missing OUT && {
	(
		cat OUT
		echo C1
		find BitKeeper/BAM -type f -print
		cd ../C2
		echo C2
		find BitKeeper/BAM -type f -print
	) > ERR
	fail -f ERR
}
echo OK

echo $N Pull C2 to C1, should send unique BAM data ..................$NL
cd "$HERE"
bk _rm -rf C1
bk clone -Bbk://localhost:$P/S -r1.1 $Q C2 C1
cd C1
bk pull $Q
bk bam check -q || fail
# The data.c2 file is the only one unique to C2 repo so that's the one
# we expect to see here.  And just that one, the rest are in the server.
test `find BitKeeper/BAM/*/?? -type f -print | wc -l` -eq 1 || {
	find BitKeeper/BAM/*/?? -type f -print > ERR
	fail -f ERR unexpected BAM files
}
for i in BitKeeper/log/BAM BitKeeper/log/BAM_SERVER
do	test -f $i || echo $i is missing
done >> OUT
grep -q missing OUT && {
	(
		cat OUT
		echo C1
		find BitKeeper/BAM -type f -print
		cd ../C2
		echo C2
		find BitKeeper/BAM -type f -print
	) > ERR
	fail -f ERR
}
echo OK

echo $N Pull C2 to C1, with the BAM server offline ..................$NL
cd "$HERE"
bk _rm -rf C1
bk clone -Bbk://localhost:$P/S -r1.1 $Q C2 C1
cd C1
bk _kill bk://localhost:$P
bk pull $Q 2> ERR && fail fix test
grep -q "nt_unlink" ERR && fail -f ERR
grep -q "BAM fetch failed, aborting pull" ERR || fail -f ERR wrong msg
# restart BKD
# From here on out we need to reset the BAM server after each untar
cd "$HERE"
bk bkd -d -aPORT -ikill  || fail
P=`cat PORT`
trap "bk _kill bk://localhost:$P" 0
echo "failed (bug should fetch BAM data)"

echo $N Push C2 to C1, should send unique BAM data ..................$NL
cd "$HERE"
bk _rm -rf C1 || fail failed rm
bk clone -Bbk://localhost:$P/S -r1.1 $Q C2 C1
cd C2
bk push $Q ../C1
cd ../C1
bk bam check -q || fail
# The data.c2 file is the only one unique to C2 repo so that's the one
# we expect to see here.  And just that one, the rest are in the server.
test `find BitKeeper/BAM/*/?? -type f -print | wc -l` -eq 1 || {
	find BitKeeper/BAM/*/?? -type f -print > ERR
	fail -f ERR unexpected BAM files
}
for i in BitKeeper/log/BAM BitKeeper/log/BAM_SERVER
do	test -f $i || echo $i is missing
done >> OUT
grep -q missing OUT && {
	(
		cat OUT
		echo C1
		find BitKeeper/BAM -type f -print
		cd ../C2
		echo C2
		find BitKeeper/BAM -type f -print
	) > ERR
	fail -f ERR
}
echo OK

echo ---- Two server domains .......................................
echo $N Set up second server, should send all BAM data ..............$NL
cd "$HERE"
bk clone $Q -B. S S3
cd S3
bk bam check -q || fail
echo OK

echo $N Set up client, no BAM data should be sent ...................$NL
cd "$HERE"
bk clone $Q S3 C3
cd C3
test -d BitKeeper/BAM && fail should not have BAM dir
cp "$DATA" data.c3
echo data.c3 >> data.c3
bk new $Q data.c3
bk commit $Q -ywhatever
echo OK

echo $N Clone C3 to other server domain, unique data should go ......$NL
cd "$HERE"
find S3/BitKeeper/BAM -type f -print > BEFORE
bk clone $Q -Bbk://localhost:$P/S C3 C4
cd C4
# The data.c3 file is the only one unique to C3 repo so that's the one
# we expect to see here.  And just that one, the rest are in the server.
test `find BitKeeper/BAM/*/?? -type f -print | wc -l` -eq 1 || {
	find BitKeeper/BAM/*/?? -type f -print > ERR
	fail -f ERR unexpected BAM files
}
for i in BitKeeper/log/BAM BitKeeper/log/BAM_SERVER
do	test -f $i || echo $i is missing
done >> OUT
grep -q missing OUT && {
	(
		cat OUT
		echo C1
		find BitKeeper/BAM -type f -print
		cd ../C2
		echo C2
		find BitKeeper/BAM -type f -print
	) > ERR
	fail -f ERR
}
cd ..
find S3/BitKeeper/BAM -type f -print > AFTER
cmp -s BEFORE AFTER && fail failed to update server
echo OK

echo $N Flush the local data so we know we go to the server .........$NL
cd "$HERE/C3"
bk bam clean -a $Q
test `find BitKeeper/BAM -type f -print | wc -l` -eq 2 || {
	find BitKeeper/BAM -type f -print > ERR
	fail -f ERR failed to flush
}
echo OK

echo $N Clone C3 to other server domain, unique data should go ......$NL
cd "$HERE"
bk _rm -rf C4
bk clone $Q -Bbk://localhost:$P/S C3 C4
cd C4
# The data.c3 file is the only one unique to C3 repo so that's the one
# we expect to see here.  And just that one, the rest are in the server.
test `find BitKeeper/BAM/*/?? -type f -print | wc -l` -eq 1 || {
	find BitKeeper/BAM/*/?? -type f -print > ERR
	fail -f ERR unexpected BAM files
}
for i in BitKeeper/log/BAM BitKeeper/log/BAM_SERVER
do	test -f $i || echo $i is missing
done >> OUT
grep -q missing OUT && {
	(
		cat OUT
		echo C1
		find BitKeeper/BAM -type f -print
		cd ../C2
		echo C2
		find BitKeeper/BAM -type f -print
	) > ERR
	fail -f ERR
}
cd ..
find S3/BitKeeper/BAM -type f -print > AFTER
cmp -s BEFORE AFTER && fail failed to update server
echo OK

echo $N rClone C3 to other server domain, unique data should go .....$NL
cd "$HERE"
bk clone $Q -Bbk://localhost:$P/S C3 bk://localhost:$P/C5
cd C5
# The data.c3 file is the only one unique to C3 repo so that's the one
# we expect to see here.  And just that one, the rest are in the server.
test `find BitKeeper/BAM/*/?? -type f -print | wc -l` -eq 1 || {
	find BitKeeper/BAM/*/?? -type f -print > ERR
	fail -f ERR unexpected BAM files
}
for i in BitKeeper/log/BAM BitKeeper/log/BAM_SERVER
do	test -f $i || echo $i is missing
done >> OUT
grep -q missing OUT && {
	(
		cat OUT
		echo C1
		find BitKeeper/BAM -type f -print
		cd ../C2
		echo C2
		find BitKeeper/BAM -type f -print
	) > ERR
	fail -f ERR
}
echo OK

echo $N Push across domains, unique data should go ..................$NL
cd "$HERE/C5"
bk undo -fsa1.1 $Q || fail
bk _rm -rf BitKeeper/BAM
bk bam check -q 2> ERR|| fail
grep -q "no BAM data" ERR || fail
cd ../C3
bk push $Q ../C5 || fail
cd ../C5
# The data.c3 file is the only one unique to C3 repo so that's the one
# we expect to see here.  And just that one, the rest are in the server.
test `find BitKeeper/BAM/*/?? -type f -print | wc -l` -eq 1 || {
	find BitKeeper/BAM/*/?? -type f -print > ERR
	fail -f ERR unexpected BAM files
}
echo OK

echo $N Pull across domains, unique data should go ..................$NL
cd "$HERE/C5"
bk undo -fsa1.1 $Q
bk _rm -rf BitKeeper/BAM
bk bam check -q 2> ERR|| fail
grep -q "no BAM data" ERR || fail
bk pull $Q ../C3
# The data.c3 file is the only one unique to C3 repo so that's the one
# we expect to see here.  And just that one, the rest are in the server.
test `find BitKeeper/BAM/*/?? -type f -print | wc -l` -eq 1 || {
	find BitKeeper/BAM/*/?? -type f -print > ERR
	fail -f ERR unexpected BAM files
}
echo OK

echo ---- Locking conflicts ........................................
echo $N Clone C1 to C2 with part in C1 and rest in S w/ S wlocked ...$NL
cd "$HERE"
bk _rm -rf S C1 C2
tar xf TAR
(cd C1 && bk bam server -q bk://localhost:$P/S)
L=`cd S ; bk lock -wt`
bk clone -Bnone C1 C2 > OUT 2>&1
bk _kill $L
test -d C2 && {
	find C2 -print > ERR
	fail -f ERR should not have cloned
}
grep -q "ERROR-unable to update BAM server bk://localhost:$P/S (can't get lock)" OUT || {
	fail -f OUT wrong error message
}
echo OK

echo $N Clone C1 to C2 with part in C1 and rest in S w/ S rlocked ...$NL
cd "$HERE"
L=`cd S ; bk lock -rt`
bk clone -Bnone C1 C2 > OUT 2>&1
bk _kill $L
test -d C2 && {
	find C2 -print > ERR
	fail -f ERR should not have cloned
}
grep -q "ERROR-unable to update BAM server bk://localhost:$P/S (can't get lock)" OUT || {
	fail -f OUT wrong error message
}
echo OK

echo $N Clone C1 to C2 with all in S with S wlocked .................$NL
cd "$HERE"
cd C1
bk bam push -aq
bk _rm -rf BitKeeper/BAM
cd ..
L=`cd S ; bk lock -wt`
bk clone -Bnone C1 C2 > OUT 2>&1
bk _kill $L
test -d C2 && {
	find C2 -print > ERR
	fail -f ERR should not have cloned
}
grep -q "ERROR-unable to update BAM server bk://localhost:$P/S (can't get lock)" OUT || {
	fail -f OUT wrong error message
}
echo OK

echo $N Clone C1 to C2 with all in S with S rlocked .................$NL
cd "$HERE"
L=`cd S ; bk lock -rt`
bk clone -Bnone $Q C1 C2 || {
	bk _kill $L
	fail clone should have worked
}
bk _kill $L
echo OK

echo $N rClone C1 to C2 with part in C1 and rest in S w/ S wlocked ..$NL
cd "$HERE"
bk _rm -rf S C1 C2
tar xf TAR
(cd C1 && bk bam server -q bk://localhost:$P/S)
L=`cd S ; bk lock -wt`
bk clone -Bnone C1 bk://localhost:$P/C2 > OUT 2>&1
bk _kill $L
# This one will leave an empty repo, can't be helped if we want to do it 
# post pre-incoming triggers.
bk _test -f C2/SCCS/s.ChangeSet && {
	find C2 -print > ERR
	fail -f ERR should not have cloned
}
grep -q "Unable to update BAM server bk://localhost:$P/S (can't get lock)" OUT || {
	fail -f OUT wrong error message
}
echo OK

echo $N rClone C1 to C2 with part in C1 and rest in S w/ S rlocked ..$NL
cd "$HERE"
L=`cd S ; bk lock -rt`
bk clone -Bnone C1 bk://localhost:$P/C2 > OUT 2>&1
bk _kill $L
# This one will leave an empty repo, can't be helped if we want to do it 
# post pre-incoming triggers.
bk _test -f C2/SCCS/s.ChangeSet && {
	find C2 -print > ERR
	fail -f ERR should not have cloned
}
grep -q "Unable to update BAM server bk://localhost:$P/S (can't get lock)" OUT || {
	fail -f OUT wrong error message
}
echo OK

echo $N rClone C1 to C2 with all in S with S wlocked ................$NL
cd "$HERE"
bk _rm -rf S C1 C2
tar xf TAR
(cd C1 && bk bam server -q bk://localhost:$P/S)
cd C1
bk bam push -aq
bk _rm -rf BitKeeper/BAM
cd ..
L=`cd S ; bk lock -wt`
bk clone -Bnone C1 bk://localhost:$P/C2 > OUT 2>&1
bk _kill $L
# This one will leave an empty repo, can't be helped if we want to do it 
# post pre-incoming triggers.
bk _test -f C2/SCCS/s.ChangeSet && {
	find C2 -print > ERR
	fail -f ERR should not have cloned
}
grep -q "Unable to update BAM server bk://localhost:$P/S (can't get lock)" OUT || {
	fail -f OUT wrong error message
}
echo OK

echo $N rClone C1 to C2 with all in S with S rlocked ................$NL
cd "$HERE"
L=`cd S ; bk lock -rt`
bk clone -Bnone $Q C1 bk://localhost:$P/C2 || {
	bk _kill $L
	fail clone should have worked
}
bk _kill $L
echo OK

echo $N Push C1 to C2 with part in C1 and rest in S w/ S wlocked ....$NL
cd "$HERE"
bk _rm -rf S C1 C2
tar xf TAR
(cd C1 && bk bam server -q bk://localhost:$P/S)
bk clone -Bnone -r1.1 $Q C1 C2
L=`cd S ; bk lock -wt`
cd C1
bk push ../C2 > OUT 2>&1
bk _kill $L
bk changes -L ../C2 > LOCAL
test -s LOCAL || fail should not have sent csets without BAM data
grep -q "unable to update BAM server bk://localhost:$P/S (can't get lock)" OUT || {
	fail -f OUT wrong error message
}
echo OK

echo $N Push C1 to C2 with part in C1 and rest in S w/ S rlocked ....$NL
cd "$HERE"
L=`cd S ; bk lock -rt`
cd C1
bk push ../C2 > OUT 2>&1
bk _kill $L
bk changes -L ../C2 > LOCAL
test -s LOCAL || fail should not have sent csets without BAM data
grep -q "unable to update BAM server bk://localhost:$P/S (can't get lock)" OUT || {
	fail -f OUT wrong error message
}
echo OK

echo $N Push C1 to C2 with all in S with S wlocked ..................$NL
cd "$HERE"
cd C1
bk bam push -aq
bk _rm -rf BitKeeper/BAM
L=`cd ../S ; bk lock -wt`
bk push ../C2 > OUT 2>&1
bk _kill $L
bk changes -L ../C2 > LOCAL
test -s LOCAL || fail should not have sent csets without BAM data
grep -q "unable to update BAM server bk://localhost:$P/S (can't get lock)" OUT || {
	fail -f OUT wrong error message
}
echo OK

echo $N Push C1 to C2 with all in S with S rlocked ..................$NL
cd "$HERE"
L=`cd S ; bk lock -rt`
cd C1
bk push $Q ../C2 || {
	bk _kill $L
	fail push should work
}
bk _kill $L
echo OK

echo $N Pull C1 to C2 with part in C1 and rest in S w/ S wlocked ....$NL
cd "$HERE"
bk _rm -rf S C1 C2
tar xf TAR
(cd C1 && bk bam server -q bk://localhost:$P/S)
bk clone -Bnone -r1.1 $Q C1 C2
L=`cd S ; bk lock -wt`
cd C2
bk pull ../C1 > OUT 2>&1
bk _kill $L
bk changes -R ../C1 > LOCAL
test -s LOCAL || fail should not have sent csets without BAM data
grep -q "Unable to update remote BAM server bk://localhost:$P/S (can't get lock)" OUT || {
	fail -f OUT wrong error message
}
echo OK

echo $N Pull C1 to C2 with part in C1 and rest in S w/ S rlocked ....$NL
cd "$HERE"
L=`cd S ; bk lock -rt`
cd C2
bk pull ../C1 > OUT 2>&1
bk _kill $L
bk changes -L ../C1 > LOCAL
test -s LOCAL || fail should not have sent csets without BAM data
grep -q "Unable to update remote BAM server bk://localhost:$P/S (can't get lock)" OUT || {
	fail -f OUT wrong error message
}
echo OK

echo $N Pull C1 to C2 with all in S with S wlocked ..................$NL
cd "$HERE"
cd C1
bk bam push -aq
bk _rm -rf BitKeeper/BAM
L=`cd ../S ; bk lock -wt`
cd ../C2
bk pull ../C1 > OUT 2>&1
bk _kill $L
bk changes -L ../C1 > LOCAL
test -s LOCAL || fail should not have sent csets without BAM data
grep -q "Unable to update remote BAM server bk://localhost:$P/S (can't get lock)" OUT || {
	fail -f OUT wrong error message
}
echo OK

echo $N Pull C1 to C2 with all in S with S rlocked ..................$NL
cd "$HERE"
L=`cd S ; bk lock -rt`
cd C2
bk pull $Q ../C1 || {
	bk _kill $L
	fail push should work
}
bk _kill $L
echo OK
