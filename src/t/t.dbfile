# Copyright 2012,2015 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

echo $N Check dbexplode .............................................$NL 
commercial project
bk undos >dbfile <<EOF
@check.dot
check.dot

@field1
data1

@field2
data2.1
data2.2

@field3
data3.1
data3.2
@subdir/checkdirs
subdir/checkdirs

@subdir/subdir/checkdirs
subdir/subdir/checkdirs

EOF
cp dbfile dbfile.ref
bk dbexplode $Q dbfile
for i in check.dot subdir/checkdirs subdir/subdir/checkdirs
do	test -f 'dbfile_db.bk_skip'/$i || {
		echo failed to explode field $i
		exit 1
	}
	test `cat 'dbfile_db.bk_skip'/$i` = $i || {
		echo bad contents in $i
		exit 1
	}
done
test `cat 'dbfile_db.bk_skip'/field1` = data1 || {
	echo bad data in field1
	cat 'dbfile_db'/field1
	exit 1
}
bk undos >WANT <<EOF
data2.1
data2.2
EOF
cmpfiles WANT 'dbfile_db.bk_skip'/field2
bk undos >WANT <<EOF
data3.1
EOF
echo $NX "data3.2"$NXL >>WANT
cmpfiles WANT 'dbfile_db.bk_skip'/field3
echo OK

test $PLATFORM != WIN32 && {
echo $N Check dbimplode with a symlink added in - fails bad type ....$NL 
ln -s dbfile.ref dbfile_db.bk_skip/symlink
bk dbimplode $Q dbfile 2> GOT && fail -f GOT
grep -q 'implode: bad file type: dbfile_db.bk_skip/symlink' GOT || fail -f GOT
rm dbfile_db.bk_skip/symlink
echo OK
}

echo $N Check dbimplode .............................................$NL 
bk dbimplode $Q dbfile || fail
cmpfiles dbfile dbfile.ref
test -d dbfile_db.bk_skip && fail dbfile_db.bk_skip still there
echo OK

echo $N Check creating DB file.......................................$NL 
mkdir d
echo 1 > d/field1
echo 2 > d/field2
bk dbimplode $Q -dd file1
test $PLATFORM != "WIN32" && chmod 444 file1
bk dbnew $Q file1 || fail
test -f d/field1 -o -f d/field2 && {
	echo files should have been deleted
	exit 1
}
bk dbexplode $Q -dd file1 || fail
test `cat d/field1` != "1" && {
	echo failed to explode fields
	exit 1
}
test -f file1 && {
	echo there should not be a gfile
	exit 1
}
test -w d/field1 && {
	echo file should not be writable
	exit 1
}
echo OK

echo $N Check that get -eg works for a DB file ......................$NL
mkdir file2.d
touch file2.d/nullfield
bk dbimplode $Q -dfile2.d file2
bk dbnew $Q file2 || fail
mkdir file2.d
echo ONE > file2.d/field1
echo TWO > file2.d/field2
touch file2.d/nullfield
bk get $Q -eg file2 || fail
bk dbimplode $Q -dfile2.d file2
bk delta $Q -ystuff6 file2 || fail
bk dbexplode $Q -dfile2.d file2
test `cat file2.d/field2` = "TWO" || {
	echo wrong contents
	exit 1
}
test -w file2.d/field1 -o -w file2.d/field2 && {
	echo files should not be writable anymore
	exit 1
}
echo OK

echo $N Check prs with db sfile .....................................$NL 
bk dbexplode $Q -dref dbfile
bk dbnew $Q dbfile
test -e dbfile && fail
VAL=`bk prs -hnr+ -d':%field1::%no_such_field:' dbfile`
test "$VAL" = "data1" || { echo failed val; exit 1; }
bk prs -hnr+ -d':%field1:' dbfile > val1
cmpfiles val1 ref/field1
bk prs -hr+ -d':%%field2:' dbfile > val2
cmpfiles val2 ref/field2
echo OK

echo $N Check field access with prs .................................$NL
bk prs -r+ -hd":%field1: :%nullfield: :%field2:\n" file1 > PRS || fail
bk undos <<EOF >"$HERE/REF"
1  2
EOF
diff PRS "$HERE/REF" || { echo prs has wrong stuff; exit 1; }
echo OK

echo $N Check prs FIELDS dspec ......................................$NL
bk prs -r+ -hd:FIELDS: file2 > FIELDS || fail
bk undos <<EOF >"$HERE/REF"
field1
field2
nullfield
EOF
diff FIELDS "$HERE/REF" || { echo produced wrong fields; exit 1; }
bk prs -r+ -hd:FIELDS: dbfile > FIELDS || fail
bk undos <<EOF >"$HERE/REF"
check.dot
field1
field2
field3
subdir/checkdirs
subdir/subdir/checkdirs
EOF
diff FIELDS "$HERE/REF" || { echo produced wrong fields; exit 2; }
echo OK

echo $N Check update of one field ...................................$NL 
bk get $Q -e dbfile
bk dbexplode $Q dbfile
test -w 'dbfile_db.bk_skip'/field1 || { echo failed; exit 1; }
echo data1-1 > 'dbfile_db.bk_skip'/field1
bk dbimplode $Q dbfile
rm -rf ref
bk undos > ref <<EOF
@check.dot
check.dot

@field1
data1-1

@field2
data2.1
data2.2

@field3
data3.1
data3.2
@subdir/checkdirs
subdir/checkdirs

@subdir/subdir/checkdirs
subdir/subdir/checkdirs

EOF
cmpfiles ref dbfile
if [ -f 'dbfile_db'.bk_skip/field1 ]; then echo failed; exit 1; fi
bk delta $Q -ywhatever dbfile
echo OK

echo $N Add a new field, make sure it gets in the DB ................$NL 
bk edit $Q dbfile
bk dbexplode $Q dbfile
echo data0-1 > 'dbfile_db.bk_skip'/field0
bk dbimplode $Q dbfile
bk undos > ref <<EOF
@check.dot
check.dot

@field0
data0-1

@field1
data1-1

@field2
data2.1
data2.2

@field3
data3.1
data3.2
@subdir/checkdirs
subdir/checkdirs

@subdir/subdir/checkdirs
subdir/subdir/checkdirs

EOF
cmpfiles ref dbfile
bk delta $Q -ywhatever dbfile
echo OK

echo $N Check field deletions .......................................$NL 
bk edit $Q dbfile
bk dbexplode $Q -dtmp dbfile
rm tmp/field0
bk dbimplode $Q -dtmp dbfile
bk undos > ref <<EOF
@check.dot
check.dot

@field1
data1-1

@field2
data2.1
data2.2

@field3
data3.1
data3.2
@subdir/checkdirs
subdir/checkdirs

@subdir/subdir/checkdirs
subdir/subdir/checkdirs

EOF
cmpfiles ref dbfile   
bk delta $Q -ywhatever dbfile
echo OK

echo $N Check field additions .......................................$NL 
bk edit $Q dbfile
bk dbexplode $Q -dtmp dbfile
echo foo > tmp/newfield
bk dbimplode $Q -dtmp dbfile
bk undos > ref <<EOF
@check.dot
check.dot

@field1
data1-1

@field2
data2.1
data2.2

@field3
data3.1
data3.2
@newfield
foo

@subdir/checkdirs
subdir/checkdirs

@subdir/subdir/checkdirs
subdir/subdir/checkdirs

EOF
cmpfiles ref dbfile   
echo OK

echo $N Make sure explode from s.file defaults to read-only .........$NL 
bk unedit dbfile
bk dbexplode $Q -dd dbfile || fail
for i in check.dot field1 field2
do	test -f d/$i || { echo failed to explode $i; exit 1; }
	test -w d/$i && { echo failed to explode $i read-only; exit 1; }
done
echo OK

# XXX - if the file is edited but not checked out we will get the wrong modes

echo $N Make sure explode copies read-only modes ....................$NL 
bk unedit dbfile
bk get $Q dbfile || fail
bk dbexplode $Q -dd dbfile || fail
for i in check.dot field1 field2
do	test -f d/$i || { echo failed to explode $i; exit 1; }
	test -w d/$i && { echo failed to explode $i read-only; exit 1; }
done
echo OK

echo $N Make sure explode copies read-write modes ...................$NL 
rm -rf d
bk get $Q -e dbfile || fail
bk dbexplode $Q -dd dbfile || fail
for i in check.dot field1 field2
do	test -f d/$i || { echo failed to explode $i; exit 1; }
	test -w d/$i || { echo failed to explode $i read-write; exit 1; }
done
echo OK

echo $N Check delta dbfile ..........................................$NL 
bk unedit dbfile
bk get $Q -e dbfile || fail
bk dbexplode $Q dbfile || fail
echo data1-2 > 'dbfile_db.bk_skip'/field1
bk dbimplode $Q dbfile || fail
bk delta $Q -yimplode dbfile || fail
if [ -f 'dbfile_db.bk_skip'/field1 ]; then echo failed; exit 1; fi
VAL=`bk prs -hnr+ -d':%field1:' dbfile`
if [ "$VAL" != "data1-2" ]; then echo failed val; exit 1; fi
VAL=`bk prs -hnr1.1 -d':%field1:' dbfile`
if [ "$VAL" != "data1" ]; then echo failed val; exit 1; fi
VAL=`bk prs -hnr+ -d':%field1|1.1:' dbfile`
if [ "$VAL" != "data1" ]; then echo failed val; exit 1; fi
echo OK

echo $N Make sure implode/explode handles empty fields ..............$NL 
mkdir foo.d
touch foo.d/1 foo.d/2
bk dbimplode $Q -dfoo.d foo
bk undos > ref <<EOF
@1
@2
EOF
cmpfiles foo ref
bk dbexplode $Q foo
cmp -s 'foo_db.bk_skip'/1 /dev/null || fail
echo OK

echo $N Check operations in a subdirectory ..........................$NL 
mkdir subdir
touch subdir/dbfile
for f in a b c d 
do	echo @$f >> subdir/dbfile
	echo $f >> subdir/dbfile
	echo >> subdir/dbfile
done
bk dbnew $Q subdir/dbfile || fail
bk get $Q -e subdir/dbfile || fail
bk dbexplode $Q subdir/dbfile
test -f subdir/dbfile_db.bk_skip/a || {
	echo failed to get file
	exit 1
}
echo updated a > subdir/dbfile_db.bk_skip/a
bk dbimplode $Q subdir/dbfile
bk delta $Q -ysubdir subdir/dbfile || {
	echo failed
	exit 1
}
test "`bk prs -hnr+ -d':%a:' subdir/dbfile`" = "updated a" || {
	echo bad data in file, wanted a
	exit 1
}
echo OK

echo $N Check cloning a project with DB files........................$NL 
cd "$HERE"/project
bk edit $Q dbfile || fail
bk delta $Q -f -ynewdb dbfile || fail
bk commit $Q -ywhatever || fail
cd "$HERE"
bk clone $Q project copy || fail
echo OK

echo $N Try pushing DB updates ......................................$NL 
cd copy
bk get $Q -e dbfile || fail
bk dbexplode $Q dbfile
echo new > 'dbfile_db.bk_skip'/ANOTHERFIELD
bk dbimplode $Q dbfile
bk ci $Q -yfoo dbfile || fail
bk commit $Q -yfoo2 || fail
bk push $Q || fail
echo OK

echo $N Check implode explode preserving data .......................$NL
mkdir foo.d
echo "This is data for field 1" > foo.d/FIELD1
echo "This is data for field A" > foo.d/FIELDA
echo "This is data for" > foo.d/FIELDB
echo "@field B (starts with single @)" >> foo.d/FIELDB
echo "This is data for field a" > foo.d/FIELDa
echon "No newline at end" > foo.d/FIELDC
echo -e "Binary\002Field" > foo.d/BINARY_FIELD
echo "@@@fields with lots of @'s" > foo.d/fff
touch foo.d/NULL
cp -rp foo.d t
bk dbimplode $Q -dfoo.d foo
test -f foo || fail
test -d foo.d && fail
bk dbexplode $Q -dt2 foo
diff -r t t2 || { echo Diffs found; exit 1; }
echo OK

echo $N Check deltas  ................................................$NL
bk dbnew $Q foo || fail
bk edit $Q foo || fail
echo > foo
bk delta $Q -yempty foo || fail
touch bar
bk dbnew $Q bar || fail
echo OK

echo $N Check committing an unsorted DB file ........................$NL
cat > sort <<EOF
@w
w
@l
l
@m
l
@a
a
EOF
bk dbnew -l $Q sort || fail
cat > sorted <<EOF
@a
a
@l
l
@m
l
@w
w
EOF
cmpfiles sort sorted
cat > sort <<EOF
@w
w
@l
l
@m
l
@a
a
@c
c
EOF
bk ci $Q -l -yadd_c sort || exit
cat > sorted <<EOF
@a
a
@c
c
@l
l
@m
l
@w
w
EOF
cmpfiles sort sorted
echo OK
