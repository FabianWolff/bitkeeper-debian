# Copyright 2015-2016 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Skip test if no git
test -x "`bk which git`" || exit 0

function do_export () {
	repo_bk=$1
	repo_git=$2
	standalone=${3:+-S}
	rm -rf "$repo_git"
	git init -q "$repo_git"
	(cd "$repo_bk" ; bk fast-export -A"$HERE"/authors $standalone --bk-regressions) > "$HERE/EXPORT"
	(cd "$repo_git" ; git fast-import) < "$HERE/EXPORT" > "$HERE/GOT" 2>&1 || \
	    fail -f "$HERE/GOT" export failed. See "$HERE/EXPORT".
}

function do_incremental () {
	repo_bk="`pwd`/$1"
	repo_git="`pwd`/$2"
	standalone=${3:+-S}
	(cd "$repo_bk" ; \
	 bk fast-export -A"$HERE"/authors \
	    --bk-regressions $standalone --incremental="$repo_git") > "$HERE/EXPORT"
	(cd "$repo_git" ; git fast-import) < "$HERE/EXPORT" > "$HERE/GOT" 2>&1 || \
	    fail -f "$HERE/GOT" export failed. See "$HERE/EXPORT"
}

function cmp_repos() {
	bk_repo=$1
	git_repo=$2
	standalone=${3:+-S}
	export_git="$HERE/export.git"
	export_bk="$HERE/export.bk"
	## build an array of bk revisions mapped to git revisions
	## I need to build it from the git tree since it's the one
	## that has the MD5KEYs in the comments.
	rm -f "$HERE/GOT.1"
	(cd "$git_repo" ; git log --pretty='%H %s' master ) | \
	    while read sha1 md5; 
	    do 
		    rm -rf "$export_git" "$export_bk"
		    (mkdir -p "$export_git" ; cd "$git_repo" ;
		     git --work-tree="$export_git" checkout -f -q $sha1 ;
		    )
		    (cd "$bk_repo" ;
		     bk export $standalone -tplain -kr$md5 "$export_bk" )
		    diff -Nrq "$export_git" "$export_bk" > OUT || {
			fail -f OUT Diffs found $sha1 $md5
		    }
		    echo $md5 >> "$HERE/GOT.1"
	    done
	(cd "$bk_repo" ; bk changes $standalone -end:MD5KEY: ) | sort > "$HERE/WANT"
	sort < "$HERE/GOT.1" > "$HERE/GOT"
	cmpfiles "$HERE/WANT" "$HERE/GOT"
}

echo $N Create a bk tree.............................................$NL
touch authors
commercial project
echo stuff > afile
echo other stuff > bfile
bk new $Q afile bfile
bk commit $Q -y"add files"
cd "$HERE"
do_export project project.git || fail
cmp_repos project project.git || fail
echo OK

echo $N Test a merge with parallel creates...........................$NL
cd "$HERE"
bk clone $Q project project.copy
cd project
echo stuff > file.a
bk new $Q file.a
bk commit $Q -y"add file.a"
cd "$HERE/project.copy"
echo stuff > file.b
bk new $Q file.b
bk commit $Q -y"add file b"
cd "$HERE/project"
bk pull $Q ../project.copy
cd "$HERE"
do_export project project.git || fail
cmp_repos project project.git || fail
echo OK

echo $N Test symlinks................................................$NL
cd "$HERE/project"
echo real > realfile
ln -s realfile link
bk new $Q realfile
bk new $Q link
bk commit $Q -ylink
cd "$HERE"
do_export project project.git || fail
cmp_repos project project.git || fail
echo OK

echo $N Test a simple delete.........................................$NL
cd "$HERE/project"
bk rm -f afile
bk commit $Q -y"delete afile"
cd "$HERE"
do_export project project.git || fail
cmp_repos project project.git || fail
echo OK

echo $N Test a delta in a deleted file...............................$NL
cd "$HERE/project.copy"
bk edit $Q afile
echo different stuff >> afile
bk ci $Q -ychange
bk commit $Q -ychange
cd "$HERE/project"
bk pull $Q ../project.copy
cd "$HERE"
do_export project project.git || fail
cmp_repos project project.git || fail
echo OK

echo $N Test create/delete on branch.................................$NL
cd "$HERE/project.copy"
echo stuff > del-in-branch
bk new $Q del-in-branch
bk commit $Q -y"add del-in-branch"
bk rm -f del-in-branch
bk commit $Q -y"del del-in-branch"
cd "$HERE/project"
bk pull $Q ../project.copy
cd "$HERE"
do_export project project.git || fail
cmp_repos project project.git || fail
echo OK

echo $N Test a simple rename.........................................$NL
cd "$HERE/project"
bk mv bfile bfile.moved
bk commit $Q -y"moved bfile"
cd "$HERE"
do_export project project.git || fail
cmp_repos project project.git || fail
echo OK

echo $N Make sure tags are imported as well..........................$NL
cd "$HERE/project"
bk tag $Q -r+ A_TAG
BK_TAG=`bk changes -d:MD5KEY: -rA_TAG`
cd "$HERE"
do_export project project.git || fail
cd project.git
GIT_TAG=`git log -1 --pretty=%s A_TAG`
test "$BK_TAG" = "$GIT_TAG" || fail Could not find tag A_TAG
# now tag an older cset
cd "$HERE/project"
BK_USER=foo bk tag $Q -r1.3 OLD_TAG
BK_TAG=`bk changes -d:MD5KEY: -rOLD_TAG`
bk fast-export | grep tagger | head -1 | grep -q foo || fail
cd "$HERE"
do_export project project.git || fail
cd project.git
GIT_TAG=`git log -1 --pretty=%s OLD_TAG`
test "$BK_TAG" = "$GIT_TAG" || fail Could not find tag OLD_TAG
echo OK

echo $N Test same tag in different places............................$NL
cd "$HERE"
rm -rf project.copy
bk clone $Q project project.copy
cd project
echo stuff > xxx.file
bk new $Q xxx.file
bk commit $Q --tag=X_TAG -yfirst_tag
cd "$HERE/project.copy"
echo stuff > yyy.file
bk new $Q yyy.file
bk commit $Q --tag=X_TAG -ysecond_tag
cd "$HERE/project"
echo m | bk pull $Q ../project.copy >OUT 2>ERR || fail -f ERR pull failed
BK_TAG=`bk changes -d:MD5KEY: -rX_TAG`
cd "$HERE"
do_export project project.git || fail
cd project.git
GIT_TAG=`git log -1 --pretty=%s X_TAG`
test "$BK_TAG" = "$GIT_TAG" || fail Could not find tag X_TAG
echo OK

echo $N Move a file _inside_ BitKeeper...............................$NL
cd "$HERE/project"
bk mv -f bfile.moved BitKeeper/etc/
bk commit $Q -y"moved a file into BitKeeper"
cd "$HERE"
do_export project project.git || fail
cmp_repos project project.git || fail
echo OK

echo $N Test author file mapping ....................................$NL

cat <<EOF > authors
user1=user1 <user1@foo.com>
user2 = user 2 <user2@bar.com>
user3  =  three eee user  <user3.name@something.com>
EOF

cd project
echo 1 > 1
bk new $Q -l 1
BK_USER=user0 BK_HOST=machine.comp.com bk commit $Q -y1
echo 2 > 1
bk ci $Q -ly2 1
BK_USER=user1 BK_HOST=mach2.comp.com bk commit $Q -y2
echo 3 > 1
bk ci $Q -ly3 1
BK_USER=user2 BK_IMPORTER=user3 BK_HOST=mach3.comp.com bk commit $Q -y3

cd "$HERE"
do_export project project.git || fail
(cd project.git; git log --pretty='%an <%ae>|%cn <%ce>') | grep -v ^bk > OUT
cat <<EOF > WANT
three eee user <user3.name@something.com>|user 2 <user2@bar.com>
user1 <user1@foo.com>|user1 <user1@foo.com>
user0 <user0@machine.comp.com>|user0 <user0@machine.comp.com>
EOF
cmpfiles WANT OUT
cmp_repos project project.git || fail
echo OK

echo $N Establish a baseline for incremental testing.................$NL
cd "$HERE"
commercial incremental

## Establish a baseline
echo file1 > file1 ; bk new $Q file1 ; bk commit $Q -yfile1
bk clone $Q . ../incremental.copy
echo file2 > file2 ; bk new $Q file2 ; bk commit $Q -yfile2
bk clone $Q . ../incremental.copy2
cd ../incremental.copy
echo file1.1 > file1.1 ; bk new $Q file1.1 ; bk commit $Q -yfile1.1
cd ../incremental
bk pull $Q ../incremental.copy
cd ..
do_export incremental incremental.git || fail
cmp_repos incremental incremental.git || fail
echo OK

echo $N Test criss-cross merge.......................................$NL
## 
cd "$HERE/incremental.copy2"
bk pull $Q ../incremental.copy
cd ../incremental
bk pull $Q ../incremental.copy2
cd ..

do_incremental incremental incremental.git || fail
cmp_repos incremental incremental.git || fail
echo OK

echo $N Incremental when there is nothing to do......................$NL
do_incremental incremental incremental.git || fail
cmp_repos incremental incremental.git || fail
echo OK

echo ---- nested tests

echo $N Test a simple nested export..................................$NL
cd "$HERE"
nested product
echo stuff > product_file
echo more stuff > gcc/gcc_file
echo even more stuff > gdb/gdb_file
bk new $Q product_file gcc/gcc_file gdb/gdb_file
bk commit $Q -yfiles
cd "$HERE"
do_export product product.git || fail
cmp_repos product product.git || fail
echo OK

echo $N Test a nested merge..........................................$NL
cd "$HERE"
bk clone $Q product product.copy
(cd product.copy ; bk portal $Q .)
cd "$HERE/product"
echo newfile > gcc/newfile
bk new $Q gcc/newfile
bk commit $Q -ynewfile.gcc
cd "$HERE/product.copy"
echo new > gdb/newfile
bk new $Q gdb/newfile
bk commit $Q -ynewfile.gdb
bk pull $Q ../product
cd "$HERE"
do_export product.copy product.git || fail
cmp_repos product.copy product.git || fail
echo OK

echo $N Test component only .........................................$NL
cd "$HERE"
do_export product/gcc component.git standalone || fail
cmp_repos product/gcc component.git standalone || fail
echo OK

# product only must be before symlink else the diff in cmp_repos()
# will choke on the gcclink link pointing at nothing
echo $N Test product only ...........................................$NL
cd "$HERE"
do_export product product-only.git standalone || fail
cmp_repos product product-only.git standalone || fail
echo OK

echo $N Test symlinks in nested......................................$NL
cd "$HERE/product"
echo symlink > realfile
echo symlink > gcc/realfile
ln -s realfile link
(cd gcc ; ln -s realfile link)
ln -s gcc/realfile gcclink
bk new $Q realfile gcc/realfile link gcclink gcc/link
bk commit $Q -ylinks
cd "$HERE"
do_export product product.git || fail
cmp_repos product product.git || fail
echo OK

echo $N Test deletes in nested.......................................$NL
cd "$HERE/product"
bk rm -f product_file
bk commit $Q -y"delete product_file"
bk rm -f gcc/gcc_file
bk commit $Q -y"delete gcc/gcc_file"
cd "$HERE"
do_export product product.git || fail
cmp_repos product product.git || fail
echo OK

echo $N Test incremental in component................................$NL
cd "$HERE"
do_export product/gcc component.git standalone || fail
cmp_repos product/gcc component.git standalone || fail
cd product/gcc
for i in 1 2 3
do	 echo file$i > file$i
	 bk new $Q file$i
	 bk commit -S $Q -yfile$i
done
bk commit $Q -y"bunch of csets"
cd "$HERE"
do_incremental product/gcc component.git standalone || fail
cmp_repos product/gcc component.git standalone || fail
echo OK

echo $N Test quiet mode..............................................$NL
cd "$HERE"
git init -q junk
(cd project; bk fast-export --quiet --quiet) | (cd junk ; git fast-import --quiet)
echo OK
