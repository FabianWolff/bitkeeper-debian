# Copyright 2001-2006,2008,2010-2012,2015-2016 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Test out the cset split thing
# set up a KEYS file to strip all changing to files 'a' and 'c'
# leave files 'b' and 'd' alone

echo $N Setting up cset split testing respositories .................$NL
TZ=UTC+0 fresh_commercial --compat simple
bk edit $Q BitKeeper/etc/config
bk delta $Q -y'non-airgap: what most customers have' BitKeeper/etc/config
touch a b c d
bk new $Q a b c d
TZ=EST bk commit $Q --tag=BASETAG -y1.2 || fail
bk prs -h -r+ -d':ROOTKEY:\n' a c > ../KEYS
echo OK

# have tip change 'a' and have it removed
echo $N Simple remove ...............................................$NL
cd "$HERE"
rm -rf line
bk clone $Q simple line
cd line
bk edit $Q a
bk delta $Q -fy1.2 a
bk commit $Q -y1.3 || fail
bk edit $Q b
bk delta $Q -fy1.3 b
bk commit $Q -y1.4 || fail
bk edit $Q a
bk delta $Q -fy1.4 a
bk commit $Q -y1.5 || fail
bk commit $Q -F -yempty || fail
OLD=`bk id`
bk admin -Zgzip ChangeSet
bk csetprune $Q -r+ -w'demo' < ../KEYS
if [ $? -ne 0 ]; then echo Failed; exit 1; fi
tip=`bk prs -h -r+ -d':I:\n' ChangeSet`
if [ "$tip" != 1.3 ]; then echo Failed; exit 1; fi
echo OK

echo $N Check that the rootlog was preserved ........................$NL
bk prs -hr+ -d:ROOTLOG: ChangeSet > GOT
# just copy timestamp of new item
echo demo > WANT
echo csetprune command: "`bk prs -r+ -hnd:KEY: ChangeSet`" >> WANT
bk id >> WANT
# recreate timestamp of original entry from cset@1.0
bk prs -hr1.0 -nd':USER:@:HOST: :Dy:/:Dm:/:Dd: :T::TZ:' ChangeSet |
   sed 's/ 20/ /' >> WANT
echo original >> WANT
echo $OLD >> WANT
cmpfiles GOT WANT
echo OK

echo $N Remove empty csets just as bk-4 did .........................$NL
bk edit $Q d
bk delta $Q -fy d
bk commit $Q -yd
bk commit $Q -F -yempty || fail
bk csetprune -q -S - < /dev/null || fail
tip=`bk prs -h -r+ -d':I:\n' ChangeSet`
test "$tip" = 1.4 || fail wrong tip $tip is not 1.4
echo OK

# Test inherit of a time zone (this is single user, so no user or host)
# Remove item contain TZ info, and it should get propogated.
echo $N Timezone inherit test .......................................$NL
cd "$HERE"
rm -rf host_inh
bk clone $Q simple host_inh
cd host_inh
bk edit $Q a
bk delta $Q -fy1.2 a
TZ=UTC+0 bk commit $Q -y1.3
bk edit $Q b
bk delta $Q -fy1.2 b
TZ=UTC+0 bk commit $Q -y1.4
bk csetprune < ../KEYS 2> ERROR
if [ $? -ne 0 ]; then echo Failed; cat ERROR; exit 1; fi
zone=`bk prs -h -r+ -d':TZ:\n' ChangeSet`
if [ "$zone" != "+00:00" ]; then echo Failed; echo Zone:$zone; exit 1; fi
echo OK

# Tags don't go away, they just move to valid ancestor
echo $N Test tag graph ..............................................$NL
cd "$HERE"
rm -rf tag
bk clone $Q simple tag
cd tag
bk edit $Q a
bk delta $Q -fy1.2 a
bk commit $Q --tag=TAG1_3 -y1.3
bk edit $Q a
bk delta $Q -fy1.3 a
bk commit $Q -y1.4
bk tag $Q TAG1_4
bk edit $Q b
bk delta $Q -fy1.2 b
bk commit $Q --tag=TAG1_5 -y1.5
bk tag $Q TAG1_6
bk csetprune < ../KEYS 2> ERROR
if [ $? -ne 0 ]; then echo Failed; cat ERROR; exit 1; fi
tip=`bk prs -h -rTAG1_3 -d':I:\n' ChangeSet`
if [ "$tip" != 1.2 ]; then echo Failed; exit 1; fi
tip=`bk prs -h -rTAG1_4 -d':I:\n' ChangeSet`
if [ "$tip" != 1.2 ]; then echo Failed; exit 1; fi
tip=`bk prs -h -rTAG1_5 -d':I:\n' ChangeSet`
if [ "$tip" != 1.3 ]; then echo Failed; exit 1; fi
tip=`bk prs -h -rTAG1_6 -d':I:\n' ChangeSet`
if [ "$tip" != 1.3 ]; then echo Failed; exit 1; fi
echo OK

# Used to be a bug where same name in R and D caused an assert
echo $N Test duplicates collapsing on to already tagged delta .......$NL
cd "$HERE"
rm -rf tagdup
bk clone $Q simple tagdup
cd tagdup
bk edit $Q b
bk delta $Q -fy1.2 b
bk commit $Q --tag=TAGDUP -y1.3
bk edit $Q a
bk delta $Q -fy1.2 a
bk commit $Q -y1.4
bk tag $Q TAGDUP
bk csetprune < ../KEYS 2> ERROR
if [ $? -ne 0 ]; then echo Failed; cat ERROR; exit 1; fi
echo OK

echo $N Test blocking files with ChangeSet in the name ..............$NL
cd "$HERE"
commercial badname
mkdir src
touch src/ChangeSet newfile
_BK_BADNAME=1 bk new $Q src/ChangeSet newfile
_BK_BADNAME=1 bk commit $Q -ybadname || fail
# rootkey test
echo newfile | bk csetprune -q 2> ERR
grep -q "a rootkey has a reserved BitKeeper name" ERR || fail -f ERR
# The workaround - get rid of the file
echo src/ChangeSet | bk csetprune $Q
# test a file renamed to ChangeSet
mkdir src
touch src/bar
bk new $Q src/bar
bk commit $Q -ygoodname
_BK_BADNAME=1 bk mv src/bar src/ChangeSet
_BK_BADNAME=1 bk commit $Q -ybadname
echo newfile | bk csetprune -q 2> ERR
grep -q "a deltakey has a reserved BitKeeper name" ERR || fail -f ERR
# The workaround -- get rid of it
echo src/bar | bk csetprune $Q
echo OK

echo $N Tag graph rewiring test: fork, merge, collapse, leaf ........$NL
cd "$HERE"
rm -rf tag_a, tag_b, tag_c
bk clone $Q simple tag_a
bk clone $Q simple tag_b
cd "$HERE/tag_b"
bk tag $Q -r1.1 OLDEST-OLD
bk edit $Q b
bk delta $Q -fy1.2 b
bk commit $Q --tag=TAG_B1 -y"Tagged node on trunk"
cd "$HERE/tag_a"
bk edit $Q b
bk delta $Q -fy1.2 b
bk commit $Q --tag=TAG_A1 -y"Tagged node before fork on branch"
bk edit $Q b
bk delta $Q -fy1.2 b
bk commit $Q -y"nothing node"
cd "$HERE"
bk clone $Q tag_a tag_c
cd "$HERE/tag_a"
bk edit $Q b
bk delta $Q -fy1.2 b
bk commit $Q -y"node on trunk of branch with no label"
cd "$HERE/tag_c"
bk edit $Q b
bk delta $Q -fy1.2 b
bk commit $Q --tag=TAG_C1 -y"Tagged node on branch of branch"
cd "$HERE/tag_b"
bk edit $Q b
bk delta $Q -fy1.2 b
bk commit $Q --tag=TAG_B2 -y"Tagged node on trunk"
cd "$HERE/tag_c"
bk edit $Q b
bk delta $Q -fy1.2 b
bk commit $Q --tag=TAG_C2 -y"Tagged node on branch of branch (again)"
bk pull $Q "$HERE/tag_a"
bk edit $Q b
bk delta $Q -fy1.2 b
bk commit $Q --tag=TAG_C3 -y"Tagged node on branch after merge"
bk pull $Q "$HERE/tag_b"
bk edit $Q a
bk delta $Q -fy1.2 a
bk commit $Q -y"tip to be deleted"
bk tag $Q -r1.1 OLDEST-NEW
bk csetprune < ../KEYS 2> ERROR
if [ $? -ne 0 ]; then echo Failed; cat ERROR; exit 1; fi
tip=`bk prs -h -rOLDEST-OLD -d':I:\n' ChangeSet`
if [ "$tip" != 1.1 ]; then echo Failed; exit 1; fi
tip=`bk prs -h -rOLDEST-NEW -d':I:\n' ChangeSet`
if [ "$tip" != 1.1 ]; then echo Failed; exit 1; fi
cd "$HERE"
bk clone $Q -rTAG_B2 tag_c tag_clone 2> ERROR
if [ $? -ne 0 ]; then echo Failed; cat ERROR; exit 1; fi
echo OK

echo $N Make a tag on a merge node that gets removed ................$NL
# bk-4 csetprune by default collapsed a tag graph onto a real graph.
# a subsequent csetprune can take the real nodes and turn them back
# into graph nodes.  This ungone'ing was mishandled in bk-5.0 by
# leaving include and exclude litter on gone'd nodes (merge was cleared).
commercial tag-master
bk clone $Q . ../tag-copy
touch foo bar
bk new $Q foo bar
FOO=`bk prs -r1.0 -hnd:KEY: foo`
BAR=`bk prs -r1.0 -hnd:KEY: bar`
bk commit $Q -yfiles
bk cset $Q -x+
# While we are here, see that multiple tags can exist on a node
bk tag $Q TAG1
bk tag $Q TAG2
# Set up next test
cd ../tag-copy
touch x
bk new $Q x
bk commit $Q -f
bk tag $Q TAG3
bk tag $Q TAG4
bk pull $Q
cd ../tag-master
# resume this test ...
# collapse tag graph onto real graph
echo "$BAR" | bk csetprune $Q --tag-csets || fail
bk changes -ar+ -d:TAGS: > GOT
cat <<EOF > WANT
S TAG2
S TAG1
EOF
cmpfiles WANT GOT
# tickle the bug
echo "$FOO" | bk csetprune $Q || fail
echo OK

dspec=':DT:-:DS:-:DP:-:MGP:-:TAG_PSERIAL:-:TAG_MSERIAL:$if(:TAG_ISLEAF:){-leaf}'
echo $N Test collapsing with two tag tips ...........................$NL
cd ../tag-copy
bk tag $Q -r1.0 TAG1   # will be 'tag delete' in the future (probably)
echo "$BAR" | bk csetprune $Q --tag-csets || fail
bk changes -and"$dspec" > GOT
cat <<'EOF' > WANT
D-6-4-5-4-5-leaf
D-5-2-0--
D-4-3-0--
D-3-2-0--
D-2-1-0--
D-1-0-0--
EOF
cmpfiles WANT GOT
echo OK

# have tip change 'b' and remove 'a' and check for tip reparented
echo $N Reparent tip ................................................$NL
cd "$HERE"
rm -rf remove
bk clone $Q simple remove
cd remove
bk edit $Q a
bk delta $Q -fy1.2 a
bk commit $Q -y1.3
bk edit $Q b
bk delta $Q -fy1.2 b
bk commit $Q -y1.4
key=`bk prs -h -r+ -d':KEY:\n' ChangeSet | sed 's/\(.*\)|.*/\1/'`
bk csetprune < ../KEYS 2> ERROR
if [ $? -ne 0 ]; then echo Failed; cat ERROR; exit 1; fi
par=`bk prs -h -r+ -d':PARENT:\n' ChangeSet`
newkey=`bk prs -h -r+ -d':KEY:\n' ChangeSet | sed 's/\(.*\)|.*/\1/'`
if [ "$key" != "$newkey" ]; then echo Failed:key; echo $key $newkey; exit 1; fi
if [ "$par" != 1.2 ]; then echo Failed:par; echo $par; exit 1; fi
echo OK

# diamond tests: make a change on the branch and trunk and bring them
# together and do a strip.
# The 4 tests are:
#   strip both branch and trunk; strip branch; strip trunk; strip none

echo $N Merge: no change left on parent and branch ..................$NL
cd "$HERE"
bk clone $Q simple merge
bk clone $Q merge copy

cd merge
bk edit $Q a
bk delta $Q -fy1.2 a
bk commit $Q -y1.3

cd ../copy
bk edit $Q c
bk delta $Q -fy1.2 c
bk commit $Q -y1.3

bk pull $Q
tip=`bk prs -h -r+ -d':I:\n' ChangeSet`
bk csetprune < ../KEYS 2> ERROR
if [ $? -ne 0 ]; then echo Failed; cat ERROR; exit 1; fi
new=`bk prs -h -r+ -d':I:\n' ChangeSet`
if [ "$tip" != "1.4" ]; then echo Failed:old; echo $tip; exit 1; fi
if [ "$new" != 1.2 ]; then echo Failed:new; echo $new; exit 1; fi
echo OK

echo $N Merge: no change left on parent, change on branch ...........$NL
cd "$HERE"
rm -rf merge_m copy_m
bk clone $Q simple merge_m
bk clone $Q merge_m copy_m

cd merge_m
bk edit $Q a
bk delta $Q -fy1.2 a
bk commit $Q -y1.3

cd ../copy_m
bk edit $Q b
bk delta $Q -fy1.2 b
bk commit $Q -y1.3
key=`bk prs -h -r+ -d':KEY:\n' ChangeSet | sed 's/\(.*\)|.*/\1/'`

bk pull $Q
bk csetprune < ../KEYS 2> ERROR
if [ $? -ne 0 ]; then echo Failed; cat ERROR; exit 1; fi
newkey=`bk prs -h -r+ -d':KEY:\n' ChangeSet | sed 's/\(.*\)|.*/\1/'`
if [ "$key" != "$newkey" ]; then echo Failed; echo $key $newkey; exit 1; fi
echo OK

echo $N Merge: no change left on branch, change on parent ...........$NL
cd "$HERE"
rm -rf merge_p copy_p
bk clone $Q simple merge_p
bk clone $Q merge_p copy_p

cd merge_p
bk edit $Q b
bk delta $Q -fy1.2 b
bk commit $Q -y1.3
key=`bk prs -h -r+ -d':KEY:\n' ChangeSet | sed 's/\(.*\)|.*/\1/'`

cd ../copy_p
bk edit $Q a
bk delta $Q -fy1.2 a
bk commit $Q -y1.3

bk pull $Q
bk csetprune < ../KEYS 2> ERROR
if [ $? -ne 0 ]; then echo Failed; cat ERROR; exit 1; fi
newkey=`bk prs -h -r+ -d':KEY:\n' ChangeSet | sed 's/\(.*\)|.*/\1/'`
if [ "$key" != "$newkey" ]; then echo Failed; echo $key $newkey; exit 1; fi
echo OK

echo $N Merge: change on branch and parent ..........................$NL
cd "$HERE"
rm -rf merge_pb copy_pb
bk clone $Q simple merge_pb
bk clone $Q merge_pb copy_pb

cd merge_pb
bk edit $Q b
bk delta $Q -fy1.2 b
bk commit $Q -y1.3

cd ../copy_pb
bk edit $Q d
bk delta $Q -fy1.2 d
bk commit $Q -y1.3

bk pull $Q
key=`bk prs -h -r+ -d':KEY:\n' ChangeSet | sed 's/\(.*\)|.*/\1/'`
bk csetprune < ../KEYS 2> ERROR
if [ $? -ne 0 ]; then echo Failed; cat ERROR; exit 1; fi
newkey=`bk prs -h -r+ -d':KEY:\n' ChangeSet | sed 's/\(.*\)|.*/\1/'`
if [ "$key" != "$newkey" ]; then echo Failed; echo $key $newkey; exit 1; fi
echo OK

# Test a merge containing a merge for the recalculation of -i
# This is done by setting up a merge where the branch delta is a merge
# If the branch merge gets collapsed because of no change on the trunk side
# And that is merged with the real trunk which does have a change, then
# the include needs to be recalculated because the original branch on a
# branch delta was included into the tip by a recursive include.
echo $N Merge: merge on a merge: includes recalculated ..............$NL
cd "$HERE"
rm -rf merge_mm copy_mm copy2_mm
bk clone $Q simple merge_mm
bk clone $Q merge_mm copy_mm
bk clone $Q copy_mm copy2_mm

cd copy2_mm
bk edit $Q b
bk delta $Q -fy1.2 b
bk commit $Q -y1.3

cd ../copy_mm
bk edit $Q a
bk delta $Q -fy1.2 a
bk commit $Q -y1.3

cd ../merge_mm
bk edit $Q d
bk delta $Q -fy1.2 d
bk commit $Q -y1.3

cd ../copy_mm
bk pull $Q

cd ../copy2_mm
bk pull $Q
bk csetprune < ../KEYS 2> ERROR
if [ $? -ne 0 ]; then echo Failed; cat ERROR; exit 1; fi
inc=`bk prs -h -r+ '-d:DI:\n' ChangeSet`
if [ "$inc" != "+5" ]; then echo Failed; echo $inc; exit 1; fi
echo OK

# Test a code corner case where the delta being searched for is a merge tip
echo $N Merge: test a corner case: search delta is merge tip.........$NL
cd "$HERE"
rm -rf corner copy_corner
bk clone $Q simple corner
bk clone $Q corner copy_corner

cd copy_corner
bk edit $Q b
bk delta $Q -fy1.2 b
bk commit $Q -y1.3

cd ../corner
bk edit $Q d
bk delta $Q -fy1.2 d
bk commit $Q -y1.3

cd ../copy_corner
bk pull $Q
key=`bk prs -h -r+ -d':KEY:\n' ChangeSet | sed 's/\(.*\)|.*/\1/'`

cd ../corner
bk edit $Q a
bk delta $Q -fy1.2 a
bk commit $Q -y1.4

cd ../copy_corner
bk pull $Q
bk csetprune < ../KEYS 2> ERROR
if [ $? -ne 0 ]; then echo Failed; cat ERROR; exit 1; fi
newkey=`bk prs -h -r+ -d':KEY:\n' ChangeSet | sed 's/\(.*\)|.*/\1/'`
if [ "$key" != "$newkey" ]; then echo Failed; echo $key $newkey; exit 1; fi
echo OK

# Test a renumber condition: leave tip on branch
echo $N Renumber: test when prune leaves a tip on branch ............$NL
cd "$HERE"
rm -rf renum copy_renum
bk clone $Q simple renum
bk clone $Q renum copy_renum

cd copy_renum
bk edit $Q a
bk delta $Q -fy1.2 a
bk commit $Q -y1.3

cd ../renum
bk edit $Q b
bk delta $Q -fy1.2 b
bk commit $Q -y1.3

cd ../copy_renum
bk edit $Q d
bk delta $Q -fy1.2 d
bk commit $Q -y1.4
bk pull $Q
bk csetprune < ../KEYS 2> ERROR
if [ $? -ne 0 ]; then echo Failed; cat ERROR; exit 1; fi
rev=`bk prs -h -r+ -d':I:\n' ChangeSet`
if [ "$rev" != "1.4" ]; then echo Failed; echo Rev:$rev; exit 1; fi
echo OK

echo $N Remove all files - which should leave BK files alone ........$NL
cd "$HERE"
rm -rf pruneall
bk clone $Q simple pruneall
cd pruneall
bk -r prs -hr+ -nd:ROOTKEY: > ../ALLKEYS
bk csetprune < ../ALLKEYS 2> ERROR
if [ $? -ne 0 ]; then echo Failed; cat ERROR; exit 1; fi
echo OK

# Try leaving tag graph structure alone
echo $N Keep tag graph structure ....................................$NL
cd "$HERE"
rm -rf kg1
bk clone $Q simple kg1
cd kg1
bk edit $Q a
bk delta $Q -fy1.2 a
bk commit $Q --tag=KG1A -y1.3
bk edit $Q a
bk delta $Q -fy1.3 a
bk commit $Q --tag=KG1B -y1.4
bk cset $Q -x1.4
bk tag $Q KG1C
bk csetprune -S < ../KEYS 2> ERROR
if [ $? -ne 0 ]; then echo Failed; cat ERROR; exit 1; fi
tip=`bk prs -rKG1A -hnd':I:' ChangeSet`
if [ "$tip" != 1.2 ]; then echo Failed; exit 1; fi
tip=`bk prs -rKG1B -hnd':I:' ChangeSet`
if [ "$tip" != 1.2 ]; then echo Failed; exit 1; fi
tip=`bk prs -rKG1C -hnd':I:' ChangeSet`
if [ "$tip" != 1.2 ]; then echo Failed; exit 1; fi
echo OK

# Test specifying the package root
echo $N Specify random bits to use in new package root key ..........$NL
cd "$HERE"
rm -rf ranbit
bk clone $Q simple ranbit
cd ranbit
bk edit $Q a
bk delta $Q -fy1.2 a
bk commit $Q --tag=KG2A -y1.3
# Test for invalid keys not working ..
bk csetprune -k 1234567890abcdeg < ../KEYS 2> ERROR && {
	echo Failed
	echo Must be hex characters: worked with 'g'
	exit 1
}
bk csetprune -k 1234567890abcdeF < ../KEYS 2> ERROR && {
	echo Failed
	echo Hex characters must be lower case: worked with 'F'
	exit 1
}
RDOM="1234567890abcdef"
SALTED="e9c6ae3a919b57be"
bk csetprune -k "$RDOM" < ../KEYS 2> ERROR
if [ $? -ne 0 ]; then echo Failed; cat ERROR; exit 1; fi
rbits=`bk prs -r+ -hnd':RANDOM:' ChangeSet`
test "$rbits" = "$SALTED" || {
	echo Failed
	echo "RANDOM bits in rootkey: wanted '$RDOM', got '$rbits'"
	exit 1
}
echo OK

# This is an example of a activation set which does match the real,but
# is not expected.

_mkcset() {
	bk edit $Q $1
	test $# -gt 1 && echo "$2" > $1
	bk delta $Q -fynull $1
	bk commit $Q -ynull
}

set -e

# Print out some table entry:
#   d <ser> <par>
#   i list-of-serials
#   x list-of-serials
PERLFILT='print if s/\001d D ([^ ]*).* (\d+ \d+$)/d $1 $2/ or s/\001([xi])/$1/' 

echo $N Create a particular graph using csetprune ...................$NL
cd "$HERE"
# Very wacky graph relying on structure of SCCS bookkeeping. Use compat.
fresh_commercial --compat project
touch del1 del2 keep
bk new $Q del1 del2 keep
bk admin $Q -Znone del1 del2 keep
bk commit $Q -yfiles
bk clone $Q . ../work
bk clone $Q . ../native
_mkcset del1
bk cset $Q -i+
cd ../work
_mkcset del2
cd ../project
_mkcset keep
cd ../native
_mkcset keep
cd ../work
_mkcset keep
bk cset $Q -i+
bk tag $Q NODE
cd ../project
_mkcset keep
cd ../native
bk clone $Q . ../native2
_mkcset keep
cd ../work
bk cset $Q -xNODE
bk clone $Q . ../work2
cd ../project
bk pull $Q -rNODE ../work
bk pull $Q ../work
bk clone $Q . ../pruned
cd ../pruned
bk log -r+ -nd:ROOTKEY: del1 > list
bk csetprune $Q -S < list
bk changes -vrNODE -nd'NODE :GFILE: :I:' > ../PRUNE.GRAPH
bk set -s ChangeSet >> ../PRUNE.SET
bk _scat SCCS/s.ChangeSet | perl -ne "$PERLFILT" > ../PRUNE.TABLE
echo OK

echo $N Create a particular graph natively ..........................$NL
cd "$HERE/native"
bk pull $Q -rNODE ../work
bk pull $Q ../work
bk changes -vrNODE -nd'NODE :GFILE: :I:' > ../NATIVE.GRAPH
bk set -s ChangeSet >> ../NATIVE.SET
bk _scat SCCS/s.ChangeSet | perl -ne "$PERLFILT" > ../NATIVE.TABLE
echo OK

echo $N The graphs are the same .....................................$NL
cmpfiles ../NATIVE.GRAPH ../PRUNE.GRAPH
echo OK

echo $N The sets that they expand to do not match ...................$NL
# use diff -u to see more in context.  It included date which made
# the regression more a pain to write.
# This shows that the swap the occurs when 'del1' gets pruned
# means an extra include is needed (that's the 7 in the 7 11 line)
# and the missing i 4 is just to demonstrate compression going on
# of an include that is already included.
#
# This also obliquely shows the fix done in cset.c to limit tags
# processing.  Without that fix, this test will fail showing a dup:
# +6c6
# +< x 7 7
# +---
# +> x 7
#
set +e
diff ../NATIVE.TABLE ../PRUNE.TABLE > GOT
cat <<EOF > WANT
2c2
< i 11
---
> i 11 7
9d8
< i 6
EOF
cmpfiles WANT GOT
# A different picture of the 5 in i 5 9:
diff ../NATIVE.SET ../PRUNE.SET > GOT
cat <<EOF > WANT
6a7
> 1.5
EOF
cmpfiles WANT GOT
echo OK

echo $N Create an exclude delta in a merge node .....................$NL
# The dual of above
bk log -r+ -nd:ROOTKEY: del2 > ../list2
bk csetprune $Q -S < ../list2
bk _scat SCCS/s.ChangeSet | perl -ne "$PERLFILT" > ../NATIVE.TABLE2
cd ../pruned
bk csetprune $Q -S < ../list2
bk _scat SCCS/s.ChangeSet | perl -ne "$PERLFILT" > ../PRUNE.TABLE2
diff ../NATIVE.TABLE2 ../PRUNE.TABLE2 > GOT
cat <<EOF > WANT
3d2
< x 6
EOF
cmpfiles WANT GOT
echo OK

echo $N Change a merge node to normal node plus include .............$NL
# an exclude is older than an include but the include goes away.
# the include was in a merge node for bookkeeping sake.
cd "$HERE"
# Very wacky graph relying on structure of SCCS bookkeeping. Use compat.
fresh_commercial --compat branch
touch keep del
bk new $Q keep del
bk commit $Q -yboth
bk clone $Q . ../trunk
cd ../trunk
# both define trunk (first after fork) and create a vanishing node (del)
bk edit $Q del
bk delta $Q -fydel del
bk commit $Q -ydel
# 2 csets - a keeper and a kept -x of the TIPPER node.
cd ../branch
bk edit $Q keep
bk delta $Q -fykeep keep
bk commit $Q --tag=TIPPER -ykeep
bk cset $Q -xTIPPER
# pull in the keeper - this creates a -i to TIPPER to mark the merge
# This merge node will go away, meaning the -i of the TIPPER will go
cd ../trunk
bk pull $Q -rTIPPER
# now pull again; this one should go away, but doesn't because of keeping
# the set for this node the same.  It requires a -iTIPPER.  No collapse then
bk pull $Q
bk prs -r+ -hnd:ROOTKEY: del > prune
bk csetprune $Q < prune
bk changes -r+ -nd:RI: > GOT
bk changes -rTIPPER -nd+:I: > WANT
cmpfiles WANT GOT
echo OK

echo $N Test the file sort order ....................................$NL
cd "$HERE/trunk"
bk -r prs -hnd':GFILE:|:ROOTKEY:' > WANT
bk csetprune --test-bypath=WANT > GOT || fail
cmpfiles WANT GOT
# test edges including things that can't happen, but can with gone files
cat <<EOF > WANT
a|rk
a|rk
ab|rk
a/b/c|rk
ab/c|rk
EOF
bk csetprune --test-bypath=WANT > GOT || fail
cmpfiles WANT GOT
cat <<EOF > unsorted
a|rk
a/b/c|rk
a|rk
ab/c|rk
ab|rk
EOF
bk csetprune --test-bypath=unsorted > GOT || fail
cmpfiles WANT GOT
echo OK

# echo $N More things that can be done that were not completed ........$NL
# cd ../work2
# bk csetprune $Q -S -k123456789abcdef0 < ../list2
# cd ../native2
# bk csetprune $Q -S -k123456789abcdef0 < ../list2
# bk pull $Q -rNODE ../work2
# bk pull $Q ../work2
# bk _scat SCCS/s.ChangeSet | perl -ne "$PERLFILT" > ../NATIVE2.TABLE2
# echo OK

# Create a graph that has a unique file in every cset, then
# make a binary counter out of the files to try removing every combination
# of nodes from the graph and see what the surprises are -- mostly that
# the old and new code will do the same thing.
# Trick is to build a little graph with lots of properties.
