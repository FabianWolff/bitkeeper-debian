# Copyright 2005-2010,2014-2016 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# $image -u
# $image --upgrade
# $image relative
# $image absolute
# $image
# 
# We pick up the config from dotbk but don't leave it in config.
# We pick up the config from a repo, if present, but don't leave it in config.
# Upgrades do not install config files, they leave them.
#
# Not done yet:
# Installs do install embedded config files but no others.
# All files are read-only after the install/upgrade (XXX - leave config?)

BK_INSTALLER=
# Lazy way to get full path
find "`bk bin`/utils" -name 'bk*win32-console-setup.exe' -o -name 'bk*.bin'| grep "`bk version -s`" > /tmp/bk$$
test `wc -l < /tmp/bk$$` -gt 1 && {
	echo You have too many bk images, skipping this test
	cat /tmp/bk$$
	$RM -f /tmp/bk$$
	exit 0
}
test `wc -l < /tmp/bk$$` -eq 1 && BK_INSTALLER="`cat /tmp/bk$$`"
$RM /tmp/bk$$
test "X$BK_INSTALLER" = X && exit 0

mkBINs

if [ X$PLATFORM = X"WIN32" ]
then #-------------------- WIN32 tests ---------------------

echo $N Check registry is good and has been saved....................$NL
# make sure we haven't hosed the registry up to this point
. win32_common
win32_regDiff || {
	echo failed
	echo corrupt registry, aborting
	exit 1
}
echo OK

fi	# end of WIN32 tests

echo $N Relative path installation, no config file...................$NL
"$BK_INSTALLER" relative > OUT 2>&1 || fail -f OUT
test -d relative || fail -f OUT
test -f relative/config && fail -f OUT left config file
bk _rm -rf relative
echo OK

echo $N Absolute path installation, no config file...................$NL
"$BK_INSTALLER" "$HERE/absolute" > OUT 2>&1 || fail -f OUT
test -d absolute || fail -f OUT
test -f absolute/config && fail -f OUT left config file
echo OK

echo $N Upgrade with installed config, leave it and it should work ..$NL
# XXX - it would be nice if we looked in the destination for the config
# on upgrades.
chmod +w absolute >/dev/null 2>&1	# SCO's chmod barfs
echo "foo: bar" >> absolute/config
OLDPATH="$PATH"
PATH="`pwd`/absolute:$PATH"
export PATH
"$BK_INSTALLER" -u > OUT 2>&1 || fail -f OUT
PATH="$OLDPATH"
export PATH
cd "$HERE"
test -f absolute/config || fail -f OUT
grep -q "foo: bar" absolute/config || fail -f OUT stomped on config
echo OK
bk _rm -rf absolute

if [ X$PLATFORM = X"WIN32" ]
then #-------------------- WIN32 tests ---------------------
echo $N Make sure we preserve registry settings and use long paths...$NL
"$BK_INSTALLER" "$HERE/DEAD BEEF" > OUT 2>&1 || {
	echo failed $?
	echo Installer failed to install
	cat OUT
	exit 1
}
# XXX: careful leaving this setting: in -u,
# bk.sh _install tests for the var = 1
bk _registry set $SHELLXKEY LocalDrive 100 || fail
# We need the new BK to come first in the path, so we mangle it by hand
P=`bk _registry get "$SYSPATHKEY" Path`
P="$HERE/DEAD BEEF;$P"
bk _registry set "$SYSPATHKEY" Path expand_sz:"$P"
PATH="$P" "$BK_INSTALLER" -u > OUT 2>&1 || {
	echo failed $?
	echo Installer failed to upgrade
	cat OUT
	exit 1
}
grep -qi "DEAD BEEF" OUT || {
	echo failed
	echo Installer used short path names e.g. dead~1
	cat OUT
	exit 1
}
grep -qi "^Installing.*docume~1" OUT && {
	echo failed
	echo Installer short path names e.g. docume~1
	cat OUT
	exit 1
}
bk _registry get "$SYSPATHKEY" Path | grep "DEAD BEEF" >TEXT || {
	echo failed
	echo Installer did not modify PATH
	cat TEXT
	tail -16 OUT
	exit 1
}
KEY1=`bk _registry get "$SHELLXKEY" LocalDrive` || fail

if [ $KEY1 -ne 100 ]; then
	echo failed
	echo Failed to preserve LocalDrive: $KEY1
	exit 1
fi
echo OK

echo $N Make sure the installer accepts command line options.........$NL
"$BK_INSTALLER" -l "$HERE/DEAD2" > OUT 2>&1 || {
	echo failed $?
	echo Installer failed to install with -l
	cat OUT
	exit 1
}
KEY1=`bk _registry get "$SHELLXKEY" LocalDrive` || fail

if [ $KEY1 -ne 1 ]; then
	echo failed
	echo Failed to set LocalDrive: $KEY1
	exit 1
fi
#CTRLPROV="HKEY_LOCAL_MACHINE\\Software\\SourceCodeControlProvider"
#INSTPROV="HKEY_LOCAL_MACHINE\\Software\\SourceCodeControlProvider\\InstalledSCCProviders"
#SCCKEY1=`bk _registry get "$BMKEY" SCCServerName` || fail
#SCCKEY2=`bk _registry get "$BMKEY" SCCserverPath` || fail
#PROVKEY1=`bk _registry get "$CTRLPROV" ProviderRegkey` || fail
#PROVKEY2=`bk _registry get "$INSTPROV" BitKeeper` || fail
#SCCPATH=`bk pwd -w "$HERE/DEAD2"`\\bkscc.dll

# test "$SCCKEY1" = "BitKeeper" || {
# 	echo failed
# 	echo SCCServerName was "$SCCKEY1" instead of "BitKeeper"
# 	exit 1
# }
# test "$SCCKEY2" = "$SCCPATH" || {
# 	echo failed
# 	echo SCCServerPath was "$SCCKEY2" instead of "$SCCPATH"
# 	exit 1
# }
#PK1="SOFTWARE\\bitmover\\bitkeeper"
#test "$PROVKEY1" = "$PK1" || {
#	echo failed
#	echo ProviderRegkey was "$PROVKEY1" instead of "$PK1"
#	exit 1
#}
# test "$PROVKEY2" = "$PK1" || {
# 	echo failed
# 	echo InstalledSCCProviders was "$PROVKEY2" instead of "$PK1"
# 	exit 1
# }
echo OK

echo $N Make sure -l will stomp previous setting.....................$NL
OP=`bk _registry get "$SYSPATHKEY" Path`
bk _registry set $SHELLXKEY LocalDrive 100 || fail
# Depends on $P from above, make the path same as it was
# before the first -u test else the uninstall test fails
bk _registry set "$SYSPATHKEY" Path expand_sz:"$P"
PATH="$P" "$BK_INSTALLER" -u -l > OUT 2>&1 || {
	bk _registry set "$SYSPATHKEY" Path expand_sz:"$OP"
	echo failed $?
	echo Installer failed to upgrade with -l
	cat OUT
	exit 1
}
KEY1=`bk _registry get "$SHELLXKEY" LocalDrive` || fail
test $KEY1 -eq 1 || {
	bk _registry set "$SYSPATHKEY" Path expand_sz:"$OP"
	echo failed
	echo Failed to set LocalDrive: $KEY1
	exit 1
}
bk _registry set "$SYSPATHKEY" Path expand_sz:"$OP"
echo OK

echo $N Make sure uninstaller works as advertised....................$NL
BIN="$HERE/DEAD BEEF"
BK="$HERE/DEAD BEEF/bk"
VERSION=`bk _registry get "$BMKEY" rel`
# Make sure there is a BK installed in BIN
test -f "$BK" || {
	echo failed
	echo There is no BK in $BIN
	exit 1
}
"$BK" uninstall -f >OUT 2>&1
test $? -ne 0 && {
	echo failed
	echo "uninstall exited non-zero"
	cat OUT
	exit 1
}
test -d "$BIN" && {
	echo failed
	echo "$BIN" still exists
	cat OUT
	exit 1
}
bk _registry get "$SYSPATHKEY" Path | grep "DEAD BEEF" > TEXT && {
	echo failed
	echo BitKeeper left in System PATH
	cat TEXT OUT
	exit 1
}
# Make sure we're not polluting the Uninstall area
bk _registry get "$UNINSTALLKEY" $VERSION | grep "DEAD BEEF" > TEXT && {
	echo failed
	echo BitKeeper left crud in the Uninstall registry key
	cat TEXT OUT
	exit 1
}
echo OK

echo $N Uninstaller in upgrade mode should not remove everything.....$NL
"$BK_INSTALLER" "$HERE/DEADBEEF" >OUT 2>&1
bk _registry get "$SYSPATHKEY" Path | grep "DEADBEEF" > TEXT || {
	echo failed
	echo Installer did not install PATH
	cat TEXT OUT
	exit 1
}
test -f "$HERE/DEADBEEF/bk" || {
	echo failed
	echo Installer failed to install
	cat OUT
	exit 1
}
BK="$HERE/DEADBEEF/bk"
"$BK" uninstall -u >OUT 2>&1 || {
	echo failed $?
	echo Uninstaller in upgrade mode
	cat OUT
	exit 1
}
bk _registry get "$SYSPATHKEY" Path | grep "DEADBEEF" > TEXT || {
	echo failed $?
	echo Uninstaller in upgrade mode removed BK from SYSPATH
	bk _registry get "$SYSPATHKEY" Path
	cat TEXT OUT
	exit 1
}
echo OK

echo $N Restoring registry...........................................$NL
# we know we corrupt the registry, so put it back
win32_regRestore || fail
echo OK

else #-------------------- UNIX tests ---------------------
echo $N Make sure uninstaller removes subdirs........................$NL
BIN="$HERE/DEADBEEF"
"$BK_INSTALLER" "$HERE/DEADBEEF" >OUT 2>&1 || fail -f OUT
test -f "$HERE/DEADBEEF/bk" || fail -f OUT
find "$HERE/DEADBEEF" -type d -exec chmod 555 {} \;
chmod 777 "$HERE/DEADBEEF"
"$BIN/bk" uninstall -f || {
	echo failed
	echo bk uninstall failed
	chmod -R +w "$HERE/DEADBEEF"
	exit 1
}
test -d "$HERE/DEADBEEF" && {
	# some platforms, like hp11, need some time,
	# because a background process is spawned to clean up
	# bk after bk exits.
	times=5
	while [ "$times" -ne 0 ]; do
		sleep 1
		times=`expr $times - 1`
		test -d "$HERE/DEADBEEF" || break
	done
	test -d "$HERE/DEADBEEF" && {
		echo failed
		echo did not obliterate "$HERE/DEADBEEF"
		chmod -R +w "$HERE/DEADBEEF"
		exit 1
	}
}
echo OK

echo $N Make sure installer and bk links adds functioning symlinks ..$NL
BIN="$HERE/DEADBEEF.1"
"$BK_INSTALLER" "$BIN" >OUT 2>&1 || fail -f OUT
test -f "$BIN/bk" || fail -f OUT bk file missing
test -f "$BIN/prs" && fail -f OUT ATT SCCS still there
"$BIN/bk" version -s > WANT || fail
mkdir "$HERE/bin"
"$BIN/bk" links "$HERE/bin" >OUT 2>&1 || fail -f OUT could not create symlinks
# try out a symlink
"$HERE/bin/bk" version -s > GOT || fail
cmpfiles WANT GOT
echo OK

OLDBK=/build/bitkeeper-6.0
test -d $OLDBK && {
echo $N Make sure installer cleans up from old bk ...................$NL
mkdir "$HERE/oldbin"
"$OLDBK/bk" links "$HERE/oldbin" >OUT 2>&1 || fail -f OUT oldbk did not work
test -h "$HERE/oldbin/prs" || fail no prs
"$BIN/bk" links "$HERE/oldbin" >OUT 2>&1 || fail -f OUT newbk did not work
# try out a symlink
"$HERE/oldbin/bk" version -s > GOT || fail
cmpfiles WANT GOT
# See that other things not there
test -h "$HERE/oldbin/prs" && fail still prs
echo OK
} # end of test only if bk-6.0 is lying around in /build

echo $N Make sure uninstaller removes symlinks.......................$NL
OLDPATH="$PATH"
PATH="$HERE/bin:$PATH"
export PATH
"$BIN/bk" uninstall -f || {
	echo failed
	echo bk uninstall failed
	exit 1
}
test -h "$HERE/bin/bk" && {
	echo failed
	echo left symlinks
	ls "$HERE/bin" | tr '\n' ' '
	echo ""
	exit 1
}
PATH="$OLDPATH"
echo OK

echo $N Uninstaller in upgrade mode should not remove symlinks.......$NL
BIN="$HERE/DEADBEEF.2"
"$BK_INSTALLER" "$BIN" >OUT 2>&1
test -f "$BIN/bk" || {
	echo failed
	echo installer failed
	cat OUT
	exit 1
}
# Make sure there are symlinks
"$BIN/bk" links "$HERE/bin" >OUT 2>&1 || {
	echo failed
	echo could not create symlinks
	cat OUT
	exit 1
}
test -h "$HERE/bin/bk" || fail
OLDPATH="$PATH"
PATH="$HERE/bin:$PATH"
export PATH
"$BIN/bk" uninstall -u >OUT 2>&1 || {
	echo failed
	echo Uninstaller in upgrade mode failed
	cat OUT
	exit 1
}
PATH="$OLDPATH"
times=2
while [ -d "$BIN" ]; do
	test $times -eq 0 && {
		echo failed to uninstall
		exit 1
	}
	times=`expr $times - 1`
	sleep 1
done
test -h "$HERE/bin/bk" || fail Uninstaller in upgrade mode removed symlinks
echo OK
fi
