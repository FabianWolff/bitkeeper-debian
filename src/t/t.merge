# Copyright 1999-2001,2008-2010 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

echo $N Test bk merge -h ............................................$NL

# keys l-new, r-new, l-only, r-only, confict, 2new-same, 2new-diff
#      l-delete, r-delete, delete-both
cat <<EOF > left
@l-new
v1
v2

@l-only
v3
v4

@conflict
v5
v6

@2new-same
v7
v8

@2new-diff
v9
v8

@r-delete
v2
v5

EOF

cat <<EOF > gca
@l-only
v2
v4

@r-only
v3
v2

@conflict
v3
v6

@l-delete
v7
v6

@r-delete
v2
v5

@delete-both
v3
v2

EOF

cat <<EOF > right
@r-new
v1
v2

@l-only
v2
v4

@r-only
v3
v7

@conflict
v3
v9

@2new-same
v7
v8

@2new-diff
v1
v2

@l-delete
v7
v6

EOF

bk merge -hs left gca right out || fail

cat <<EOF > want
@2new-diff
v1
v2
v8
v9

@2new-same
v7
v8

@conflict
v5
v9

@l-new
v1
v2

@l-only
v3
v4

@r-new
v1
v2

@r-only
v3
v7

EOF
cmpfiles out want

bk merge -h left gca right out || fail
sed -e 's/^<.*/<<<< left/' -e 's/^>.*/>>>> right/' < out > got

cat <<EOF > want
@2new-diff
<<<< left
v9
v8
=======
v1
v2
>>>> right

@2new-same
v7
v8

@conflict
<<<< left
v5
v6
=======
v3
v9
>>>> right

@l-new
v1
v2

@l-only
v3
v4

@r-new
v1
v2

@r-only
v3
v7

EOF
cmpfiles got want
echo OK

echo $N Setup for following tests ...................................$NL
commercial project
R=1
for D in '87/05/28 23:49:57' '97/05/28 23:49:57' '97/05/30 01:34:11' '97/06/23 01:33:45+06:30' '98/01/30 17:45:17-05:00'
do	cat > INITX <<EOF
D 1.$R $D $USER 0 0 0/0/0
c This is revision 1.$R of $D
c This the second comment of 1.$R
P this/is/the/pathname.$R
------------------------------------------------
EOF
	echo 1.$R >> FILE
	if [ $R -eq 1 ]
	then	bk delta $Q -i -IINITX FILE
	else	bk delta $Q -IINITX FILE
	fi
	R=`expr $R + 1`
	bk _get $Q -e FILE
done
bk unedit FILE
bk _get -e  $Q -r1.3 FILE
echo "added in 1.3.1.1" >> FILE
_BK_MV_OK=1 bk ci $Q -y FILE
bk _get -e $Q -r1.3.1 FILE
echo "added in 1.3.1.2" >> FILE
_BK_MV_OK=1 bk ci $Q -y FILE
echo OK

echo $N 'Check get -M (1 node from GCA)...............................'$NL
bk _get $Q -e -r1.5 -M1.3.1.1 FILE
_BK_MV_OK=1 bk delta $Q -y FILE
echo 6 > X
bk undos X > CMP1
bk prs -h -r1.6 -d':MGP:\n' FILE > CMP2
cmp -s CMP1 CMP2
if [ $? -ne 0 ]; then echo Failed.; exit 1; fi
echo OK
echo $N 'Check get -M (2 node from GCA)...............................'$NL
cat > X << EOF
1.1
1.2
1.3
added in 1.3.1.1
added in 1.3.1.2
1.4
1.5
EOF
bk undos X > CMP1
bk _get $Q -e -r1.6 -M1.3.1.2 FILE
bk undos FILE > CMP2
cmp -s CMP1 CMP2
if [ $? -ne 0 ]; then echo Failed.; exit 1; fi
bk delta $Q -y FILE
echo 7 > X 
bk undos X > CMP1
bk prs -h -r1.7 -d':MGP:\n' FILE > CMP2
cmp -s CMP1 CMP2
if [ $? -ne 0 ]; then echo Failed.; exit 1; fi
echo OK
echo $N 'Check co -M (2 node from GCA)................................'$NL
bk _get -e $Q -r1.7 -M1.3.1.2 FILE
bk ci $Q -y FILE
echo 7 > X 
bk undos X > CMP1
bk prs -h -r1.8 -d':MGP:\n' FILE > CMP2
cmp -s CMP1 CMP2
if [ $? -ne 0 ]; then echo Failed.; exit 1; fi
echo OK
echo $N Check admin -M ..............................................$NL
bk _get $Q -e -i1.3.1.1 FILE
bk delta $Q -y FILE
bk admin -M1.3.1.1 FILE
echo 6 > X 
bk undos X > CMP1
bk prs -h -r1.9 -d':MGP:\n' FILE > CMP2
cmp -s CMP1 CMP2
if [ $? -ne 0 ]; then echo Failed.; exit 1; fi
echo OK
echo $N Check admin -r -M ...........................................$NL
bk admin -r1.8 -M1.3.1.1 FILE
echo 6 > X 
bk undos X > CMP1
bk prs -h -r1.8 -d':MGP:\n' FILE > CMP2
cmp -s CMP1 CMP2
if [ $? -ne 0 ]; then echo Failed.; exit 1; fi
echo OK
# Do some SET merge tests.  Test one:
#   Build on FILE with branches where elements _get -x , then do -M
#   -x elements should not reappear.
echo $N Merge with delta on branch excluded on branch ...............$NL
bk _get $Q -e -r1.3.1 FILE
echo DISAPPEAR >> FILE
bk delta $Q -y1.3.1.3 FILE
bk _get $Q -e -r1.3.1 -x1.3.1.3 FILE
bk delta $Q -y1.3.1.4 FILE
bk _get $Q -e -M1.3.1.4 FILE
grep -q DISAPPEAR FILE
if [ $? -eq 0 ]; then echo Failed locked; exit 1; fi
bk delta $Q -y FILE
bk _get $Q FILE
grep -q DISAPPEAR FILE
if [ $? -eq 0 ]; then echo Failed unlocked; exit 1; fi
echo OK
# Do a weird graph, in the sense that it is knocking out things
# it doesn't even have.  This isn't as much a test of the set gca
# as when we _get to the merge stuff.  Need to handle this case.
echo $N Merge a graph with some weird pathalogical -i and -x ........$NL
echo 1.1 > bar.c
bk ci $Q -i bar.c
if bk _test ! -f SCCS/s.bar.c; then echo failed to create history; exit 1; fi
bk _get $Q -e bar.c
echo 1.2 >> bar.c
bk delta $Q -y1.2 bar.c
# make 2 new branches and include trunk 1.2 into each
bk _get $Q -e -i1.2 -r1.1 bar.c
echo 1.1.1.1 >> bar.c
bk delta $Q -y1.1.1.1 bar.c
bk _get $Q -e -i1.2 -r1.1 bar.c
echo 1.1.2.1 >> bar.c
bk delta $Q -y1.1.2.1 bar.c
# add to branch, excluding something from the other side
bk _get $Q -e -x1.1.2.1 -r1.1.1 bar.c
echo 1.1.1.2 >> bar.c
bk delta $Q -y1.1.1.2 bar.c
bk _get $Q -e -x1.1.1.1 -r1.1.2 bar.c
echo 1.1.2.2 >> bar.c
bk delta $Q -y1.1.2.2 bar.c
# do a merge of 1.1.1 and 1.1.2 branches, see what happens
bk _get $Q -e -r1.1.1.2 -M1.1.2.2 bar.c
echo 1.1.1.3 >> bar.c
bk delta $Q -y1.1.1.3 bar.c
bk _get $Q -r1.1.1 bar.c
cat - <<EOF > X
1.1
1.1.2.2
1.1.1.2
1.1.1.3
EOF
bk undos X > CMP1
cmp -s bar.c CMP1
# will pass if a real 2 parent SCCS merge
if [ $? -ne 0 ]; then echo Failed; exit 1; fi
echo OK

echo $N Demonstrate how we can lose lines in a merge.................$NL
cd "$HERE"
commercial A
cat <<EOF >afile
0
1
2
3
4
5
6
7
8
9
EOF
bk new $Q afile
bk commit $Q -yfile
cd "$HERE"
bk clone $Q A B
bk clone $Q A C
bk clone $Q A D
bk clone $Q A E
bk clone $Q A F
cd "$HERE"
for repo in B C
do	cd $repo
	bk edit $Q afile
	cat <<EOF >afile
0
1
2
3
4
this line changed by $repo
5
6
7
8
9
EOF
	bk ci $Q -y"$repo fix" afile
	bk commit $Q -y"$repo fix"
	cd "$HERE"
done
cd "$HERE"/D
bk pull $Q ../B
bk pull -R $Q ../C
(
echo ul
echo use local
echo .
) | bk resolve $Q >$DEV_NULL 2>&1
bk cat afile | grep -q "this line changed by B" || {
	echo failed
	echo did not use B
	exit 1
}
cd "$HERE"/E
bk pull $Q ../B
bk pull -R $Q ../C
(
echo ur
echo use remote
echo .
) | bk resolve $Q >$DEV_NULL 2>&1
bk cat afile | grep -q "this line changed by C" || {
	echo failed
	echo did not use B
	exit 1
}
cd "$HERE"/F
bk pull $Q ../D || fail
echo q | bk pull $Q ../E 2>ERR && {
	echo should have failed
	exit 1
}
grep -q "Conflicts during automerge of afile" ERR || {
	cat ERR    
	exit 1
}
echo OK
