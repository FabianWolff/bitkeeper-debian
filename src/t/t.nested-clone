# Copyright 2008-2011,2014-2015 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Tests for product clone.

echo $N Create initial ensemble......................................$NL
bk bkd -q -aPORT -ikill
M=localhost:`cat PORT`
trap "bk _kill bk://$M" 0
nested project
test -d gcc/BitKeeper/tmp -a -d gdb/BitKeeper/tmp || fail
# Now add some stuff
for r in gcc gdb
do
	cd $r
	for i in 1 2 3 4
	do
		echo $i > file$i
		bk new $Q file$i
	done
	bk commit -S $Q -y"add some files" || fail
	cd ..
done
bk commit $Q -y"Added files to gcc & gdb" || fail
echo OK

echo $N See if we can override clone_default in BitKeeper/log .......$NL
cd "$HERE/project"
echo 'clone_default:PRODUCT!' > BitKeeper/log/config
cd "$HERE"
bk clone $Q project clone
cd clone
bk here > GOT
echo PRODUCT > WANT
cmpfiles WANT GOT
echo OK

echo $N See if we go back to DEFAULT in the clone ...................$NL
bk here set $Q ALL || fail
cd ..
bk clone $Q clone clone2
cd clone2
bk here > GOT
echo DEFAULT > WANT
echo PRODUCT >> WANT
cmpfiles WANT GOT
cd ..
rm -rf clone clone2 project/BitKeeper/log/config
echo OK

echo $N Clone the product............................................$NL
cd "$HERE"
bk clone $Q project copy || {
	echo failed
	exit 1
}
cd copy
bk $Q -e -r check -a || {
	echo failed
	exit 1
}
echo OK

echo $N Clone with pending delete in product.........................$NL
cd "$HERE"
bk clone $Q project pending-rm
# first put a file in the product
cd pending-rm
echo 'foo' > afile
bk new $Q afile
bk commit -S $Q -yprod
# now in the component
echo 'foo' > gcc/afile
bk new $Q gcc/afile
bk --cd=gcc commit -S $Q -ygcc
bk commit $Q -ygcc
# now leave a pending delete in gcc
bk rm gcc/afile
cd "$HERE"
# clone w/partial_check to trigger Zahy's bug
BK_CONFIG=partial_check:on\! bk clone $Q pending-rm pending-rm-copy 2>ERR || \
	fail -f ERR
echo OK

echo $N Clone the product using a bk:// url .........................$NL
cd "$HERE"
bk clone $Q bk://$M/project bkurl || fail
cd bkurl
bk $Q -e -r check -a || fail
echo OK

echo $N Clone the product using an http:// url ......................$NL
cd "$HERE"
bk clone $Q http://$M/project httpurl || fail
cd httpurl
bk $Q -e -r check -a || fail
echo OK

echo $N Rclone the product using a bk:// url ........................$NL
cd "$HERE"
bk clone $Q project bk://$M/rbkurl || fail
cd rbkurl
bk $Q -e -r check -a || fail
echo OK

echo $N Rclone the product using an http:// url .....................$NL
cd "$HERE"
bk clone $Q project http://$M/rhttpurl || fail
cd rhttpurl
bk $Q -e -r check -a || fail
echo OK

echo $N Test the parent pointer in copy .............................$NL
cd "$HERE"/copy
P=`bk parent -l`
EP=file://"$HERE"/project
test "$P" = "$EP" || {
	echo failed
	echo "got  '$P'"
	echo "want '$EP'"
	exit 1
}
echo OK

echo $N Test that components have parent pointer ....................$NL
for r in gcc gdb
do
	cd "$HERE/copy/$r"
	P=`bk parent -l`
	EP=file://"$HERE"/project
	test "$P" = "$EP" || {
		echo failed
		echo "expected: $EP"
		echo "got     : $P"
		exit 1
	}
done
echo OK

echo $N Try clone with a failing outgoing trigger ...................$NL
cd "$HERE"/project
# need BAM for failure
echo 1 > bin
bk new -b $Q bin || fail
bk commit -ybam $Q || fail
mkdir BitKeeper/triggers
cat <<EOF > BitKeeper/triggers/post-outgoing.fail
#!/bin/sh

exit 1
EOF
chmod +x BitKeeper/triggers/post-outgoing.fail
cd ..
bk clone $Q project badcopy || fail
rm project/BitKeeper/triggers/post-outgoing.fail
echo OK

echo $N Test that clone on a component fails ........................$NL
cd "$HERE"
bk clone $Q project/gcc mynewgcc 2>ERR && {
	echo failed
	exit 1
}
grep -q "clone of a component is not allowed" ERR || {
	echo wrong msg
	cat ERR
	exit 1
}
bk clone $Q copy/gcc mynewgcc 2> ERR && {
	echo failed
	exit 1
}
grep -q "clone of a component is not allowed" ERR || {
	echo wrong msg
	cat ERR
	exit 1
}
echo OK

cd "$HERE"
cd project
bk sfiles -R | grep -v gcc > ../LIST
cd ..

echo $N Show that I can clone a product under another product .......$NL
cd project
bk clone $Q ../copy junk || fail
cd junk || fail
bk parent -l | grep -q copy || fail
cd ..
rm -rf junk
cd ..
echo OK

echo $N Show that I can clone a standalone repo undo a product ......$NL
commercial standalone
cd ../project
bk clone $Q ../standalone junk2 || fail
cd junk2 || fail
bk parent -l | grep -q standalone || fail
cd ..
rm -rf junk2
cd ..
rm -rf standalone
echo OK

echo $N Test that -s^ALIAS does not work ............................$NL
bk clone $Q -s^gcc project no-create 2> ERR && fail -f ERR
test -d no-create && fail created dir
grep -q 'clone: no leading \^ allowed: \^gcc' ERR || fail -f ERR
echo OK

echo $N Test that -skey clones work .................................$NL
KEY=`bk changes -Sr+ -q -d:ROOTKEY: project/gcc`
rm -rf mynewgcc
bk clone $Q -s"$KEY" project mynewgcc 2> ERR || {
	echo failed
	cat ERR
	exit 1
}
test -d mynewgcc -a -d mynewgcc/gcc || {
	echo did not bring gcc alias across
	cat ERR
	exit 1
}
for i in `cat LIST`
do	test -d mynewgcc/$i && {
		echo should not have brought $i
		cat ERR
		exit 1
	}
done
echo OK

echo $N Test that we can clone using the COMPONENTS file.............$NL
rm -rf mynewgcc
cd project
bk alias new justgcc gcc || fail
cd ..
bk clone $Q -sjustgcc project mynewgcc || {
	echo failed
	exit 1
}
test -d mynewgcc -a -d mynewgcc/gcc || {
	echo did not bring gcc alias across
	cat ERR
	exit 1
}
for i in `cat LIST`
do	test -d mynewgcc/$i && {
		echo should not have brought $i
		cat ERR
		exit 1
	}
done
echo OK

echo $N Test that we can clone just that component with -s./gcc .....$NL
rm -rf mynewgcc
bk clone $Q -s./gcc project mynewgcc || {
	echo failed
	exit 1
}
test -d mynewgcc -a -d mynewgcc/gcc || {
	echo did not bring gcc alias across
	cat ERR
	exit 1
}
for i in `cat LIST`
do	test -d mynewgcc/$i && {
		echo should not have brought $i
		cat ERR
		exit 1
	}
done
echo OK

echo $N Make sure that the COMPONENTS file is correct ...............$NL
cd mynewgcc
bk alias -k here | bk _sort > GOT
(echo PRODUCT; cd gcc; bk id -S) | bk _sort > WANT
cmpfiles GOT WANT
echo OK

echo $N Make sure that the COMPONENTS file propagates on clone ......$NL
cd "$HERE"
bk clone -shere $Q mynewgcc mynewgcc2 || fail
cd mynewgcc2
(cd ../mynewgcc; bk alias -k here) > BEFORE
bk alias -k here > AFTER
cmpfiles BEFORE AFTER
echo OK

echo $N Add a component with components add ./gdb ...................$NL
cd "$HERE/mynewgcc"
bk here add $Q ./gdb || fail
test -d gdb || {
	echo failed to get gdb
	exit 1
}
echo OK

echo $N Make sure that the COMPONENTS file is correct ...............$NL
bk alias -k here | bk _sort > GOT
(echo PRODUCT; cd gcc; bk id -S; cd ../gdb; bk id -S) | bk _sort > WANT
cmpfiles GOT WANT
echo OK

echo $N Check that components is idempotent .........................$NL
cd "$HERE/mynewgcc"
bk here add $Q ./gdb || fail
test -d gdb || {
	echo failed to get gdb
	exit 1
}
echo OK

echo $N Make sure that the COMPONENTS file is still correct .........$NL
bk alias -k here | bk sort > GOT
cmpfiles GOT WANT
echo OK

echo $N Update a component now that it is here ......................$NL
cd gdb
bk edit $Q file1
bk delta $Q -fyempty file1
bk commit -S $Q -ytouch
cd ..
bk commit $Q -ytouch
echo OK

echo $N Pull in new cset without component, then populate ...........$NL
cd "$HERE/mynewgcc2"
bk pull --unsafe -q || fail
BEFORE=`bk changes -r+ -nd:I:`
bk here add $Q -@"$HERE/mynewgcc" ./gdb  || fail
AFTER=`bk changes -r+ -nd:I:`
test "$BEFORE" != "$AFTER" && {
	echo was $BEFORE and now $AFTER
	exit 1
}
echo OK

# This is somewhat different in that the parent has a COMPONENTS file.
# In a fully populated tree you wouldn't expect one.
echo $N clone -s./gcc should have only that in COMPONENTS ...........$NL
cd "$HERE"
bk clone $Q -s./gcc mynewgcc mynewgcc3
cd mynewgcc3
test -d gdb && {
	echo should not have gdb
	exit 1
}
bk alias -k here > GOT
(echo PRODUCT; cd gcc; bk id -S) > WANT
cmpfiles GOT WANT
echo OK

echo $N clone -sjunk will only clone product ........................$NL
cd "$HERE"
bk clone $Q -sjunk mynewgcc3 mynewgcc4 2> ERR && {
	echo should have failed and did not
	cat ERR
	exit 1
}
grep -q "clone: junk must be either a glob, key" ERR || {
	echo wrong error message
	cat ERR
	exit 1
}
grep -q "clone: component fetch failed, only product is populated" ERR || {
	echo wrong error message
	cat ERR
	exit 1
}
rm -rf mynewgcc4
echo OK

echo $N clone -s./junk when no such directory exists should fail ....$NL
cd "$HERE"
bk clone $Q -s./junk mynewgcc3 mynewgcc4 2> ERR && {
	echo should have failed and did not
	cat ERR
	exit 1
}
grep -q "clone: ./junk must be either a glob, key" ERR || {
	echo wrong error message
	cat ERR
	exit 1
}
grep -q "clone: component fetch failed, only product is populated" ERR || {
	echo wrong error message
	cat ERR
	exit 1
}
rm -rf mynewgcc4
echo OK

echo $N clone -s./gdb when the parent only has gcc ..................$NL
cd "$HERE"
bk clone $Q -s./gdb mynewgcc3 mynewgcc4 || fail
rm -rf mynewgcc4
echo OK

echo $N Check that we can populate gdb from elsewhere ...............$NL
bk clone -shere $Q mynewgcc3 mynewgcc4 || fail
cd mynewgcc4 || fail
rm -rf gdb
bk here add $Q -@../mynewgcc ./gdb  || fail
bk _test -d gdb -a -f gdb/SCCS/s.ChangeSet || {
	echo failed
	cat OUT
	exit 1
}
echo OK

echo $N Add more stuff to gcc........................................$NL
cd "$HERE/project/gcc"
for i in 1 2 3 4
do
	bk edit $Q file$i
	echo "stuff $i" > file$i
	bk delta $Q -y"modify" file$i
	bk commit -S $Q -y"Add $i to file$i"
done
cd ..
bk commit $Q -y"more stuff to gcc"
echo OK

echo $N clone -r test................................................$NL
TIP=`cd "$HERE/copy" && bk changes -nd:REV: -r+`
cd "$HERE"
bk clone $Q -r"$TIP" project copy2 || {
	echo failed
	exit 1
}
cd copy2
T=`bk changes -nd:REV: -r+`
test x$T = x$TIP || {
	echo failed
	echo cloned copy has $T as tip, expected $TIP
	exit 1
}
echo OK

echo $N Test that we can run changes -R in a component ..............$NL
cd gcc
bk changes -SR > OUT || fail
grep -q "Add 4 to file4" OUT || {
	echo failed
	cat OUT
	exit 1
}
echo OK

echo $N Test clone through a bkd.....................................$NL
cd "$HERE/project"
# what is coming out stdout? and stderr?
# bk bkd -q -d -p$P -ikill > "$HERE/BKD" 2>&1
bk bkd -q -d -aPORT -ikill || fail
P=`cat PORT`
cd "$HERE"
bk clone $Q bk://localhost:$P clone3 || {
	echo failed
	cat OUT
	exit 1
}
bk _kill bk://localhost:$P || fail
echo OK

echo $N Test lclone..................................................$NL
cd "$HERE"
bk clone $Q -l project lcopy || {
	echo failed
	exit 1
}
cd lcopy
bk -e -r $Q check -a  || {
	echo failed
	exit 1
}
echo OK

echo $N Test the parent pointer......................................$NL
P=`bk parent -l`
EP=file://"$HERE"/project
STATUS="OK"
test "$P" = "$EP" || {
	EP=file:/"$HERE"/project
	test "$P" = "$EP" || {
		echo failed
		echo "got '$P'"
		exit 1
	}
	STATUS="failed (bug in url handling)"
}
echo $STATUS

echo $N Test that components have parent pointer ....................$NL
for r in gcc gdb
do
	cd "$HERE/copy/$r"
	P=`bk parent -l`
	EP=file://"$HERE"/project
	test "$P" = "$EP" || {
		echo failed
		echo "expected: $EP"
		echo "got     : $P"
		exit 1
	}
done
echo OK

echo $N Test lclone -r...............................................$NL
cd "$HERE"
bk clone $Q -l -r"$TIP" project lcopy2 || {
	echo failed
	exit 1
}
cd lcopy2
T=`bk changes -nd:REV: -r+`
test x$T = x$TIP || {
	echo failed
	echo cloned copy has $T as tip, expected $TIP
	exit 1
}
echo OK

echo $N Test clone with args.........................................$NL
cd "$HERE"
bk clone -EBKU_TEST=ff $Q project copy_args || {
	echo failed
	exit 1
}
echo OK

echo $N Test deep nest populate scenarios ...........................$NL
cd "$HERE"/project/gcc
(cd "$HERE"; commercial deep)
mv "$HERE/deep" .
cd ..
bk attach $Q -N gcc/deep
test -f BitKeeper/log/deep-nests || {
	echo failed to make deep-nests
	exit 1
}
grep -q gcc/deep BitKeeper/log/deep-nests || {
	echo failed to add gcc/deep to deep-nests
	exit 1
}
bk sfiles -p
bk _nested > LIST
grep -q gcc/deep LIST || {
	echo ensemble list did not list gcc/deep
	bk comps -h
	exit 1
}
cd ..
bk clone $Q -s./gdb project deeppop
cd deeppop
bk here add $Q ./gcc/deep || {
	echo failed
	exit 1
}
bk here add $Q ./gcc 2> ERR || {
	echo failed
	exit 1
}
echo OK

# gcc
# gcc/deep
# gdb
echo $N Test populate with no args ..................................$NL
cd "$HERE"
bk clone $Q -s. project product || fail
cd product
bk comps -h > LIST
test -s LIST && {
	echo should not have any components yet
	cat LIST
	exit 1
}
bk here add $Q DEFAULT || fail
bk comps -h > GOT
cat > WANT <<EOF
./gcc
./gcc/deep
./gdb
EOF
cmpfiles WANT GOT
echo OK

echo $N Test populate in repair mode with nothing to do .............$NL
bk here add $Q || fail
echo OK

echo $N Test populate in repair mode with gdb missing ...............$NL
rm -rf gdb
bk here add $Q || fail
bk comps -h > GOT
cat > WANT <<EOF
./gcc
./gcc/deep
./gdb
EOF
cmpfiles WANT GOT
echo OK

echo $N Test populate in repair mode with gcc/deep missing ..........$NL
rm -rf gcc/deep
bk here add $Q || fail
bk comps -h > GOT
cat > WANT <<EOF
./gcc
./gcc/deep
./gdb
EOF
cmpfiles WANT GOT
echo OK

echo $N Test populate in repair mode with gcc/deep and gcc missing ..$NL
rm -rf gcc
bk here add $Q || fail
bk comps -h > GOT
cat > WANT <<EOF
./gcc
./gcc/deep
./gdb
EOF
cmpfiles WANT GOT
echo OK

echo $N Unpopulate all components ...................................$NL
bk here set $Q PRODUCT || {
	echo unpopulate failed
	exit 1
}
for i in `bk comps -h`
do	test -d $i && {
		echo failed to remove $i
		exit 1
	}
done
echo OK

echo $N Test populate in repair mode with all components missing ....$NL
echo DEFAULT > BitKeeper/log/HERE
bk here add $Q || fail
bk comps -h > GOT
cat > WANT <<EOF
./gcc
./gcc/deep
./gdb
EOF
cmpfiles WANT GOT
echo OK

echo $N Test populate with no parent ................................$NL
bk parent -r $Q
rm -rf gcc gdb
bk here add $Q || fail
echo OK

echo $N Test populate -r with url ...................................$NL
rm -rf gcc gdb
bk here add $Q -@../project || fail
bk comps -h > GOT
cat > WANT <<EOF
./gcc
./gcc/deep
./gdb
EOF
cmpfiles WANT GOT
echo OK

echo $N Test populate with url ......................................$NL
rm -rf gcc gdb
bk here add $Q -@../project || fail
bk comps -h > GOT
cat > WANT <<EOF
./gcc
./gcc/deep
./gdb
EOF
cmpfiles WANT GOT
echo OK

echo $N Test unpopulate with local extras ...........................$NL
bk parent $Q ../project
touch gcc/extra gdb/extra
bk here rm $Q DEFAULT 2>OUT && {
	echo unpopulate should have failed
	cat OUT
	exit 1
}
grep -q 'Extra file' OUT || {
	echo bad error message
	cat OUT
	exit 1
}
for i in `bk comps -h`
do	test -d $i || {
		echo should not have removed $i
		exit 1
	}
done
echo OK

echo $N Test unpopulate with local extras forcing it ................$NL
bk parent $Q ../project
touch gcc/extra gdb/extra
bk here set -f $Q PRODUCT || {
	echo unpopulate should not have failed
	exit 1
}
for i in `bk comps -h`
do	test -d $i && {
		echo should have removed $i
		exit 1
	}
done
echo OK

echo $N Test unpopulate with local cset .............................$NL
bk parent $Q ../project
bk here add $Q all || fail
test -d gdb || fail
(cd gdb
echo foo > foo
bk new $Q foo
bk commit -S $Q -yfoo
)
LIST=`bk comps -h`
bk here rm -q all 2>ERR && {
	echo unpopulate should have failed
	cat ERR
	exit 1
}
cat <<EOF > WANT
here: unable to remove ./gdb, it contains csets not committed in product.
EOF
cmpfiles ERR WANT
for i in $LIST
do	test -d $i || {
		echo should not have removed $i
		exit 1
	}
done
echo OK

echo $N Test unpopulate with local cset forcing it ..................$NL
bk here rm -f $Q  all || {
	echo unpopulate should not have failed
	exit 1
}
for i in `bk comps -h`
do	test -d $i && {
		echo should have removed $i
		exit 1
	}
done
echo OK

echo $N Show a clone with a local baseline ..........................$NL
cd "$HERE"/mynewgcc3/gcc
echo hi > file
bk new $Q file || fail
bk commit $Q -yjunk || fail
cd "$HERE"
bk clone $Q -s./gdb -@mynewgcc bk://$M/mynewgcc3 clonemod || fail
cd clonemod || fail
bk comps -h > GOT
echo ./gdb > WANT
cmpfiles GOT WANT
echo OK

echo $N Demo clone --identical ......................................$NL
cd "$HERE"
bk clone $Q --identical -sHERE project testiden 2>/dev/null && fail
bk clone $Q --identical project testiden || fail
cd testiden
cat <<EOF > WANT
./gcc/deep
ALL
PRODUCT
EOF
bk here > GOT
cmpfiles GOT WANT
echo OK

echo $N Check that partial check and -s. gets correct HERE file .....$NL
cd "$HERE/project"
bk repocheck -q
cd ..
BK_CONFIG='partial_check:on!;checkout:none!'
export BK_CONFIG
bk clone -s. $Q project just_product
cmp -s project/BitKeeper/log/HERE just_product/BitKeeper/log/HERE && {
	echo failed, same HERE files
	head -100 project/BitKeeper/log/HERE just_product/BitKeeper/log/HERE
	exit 1
}
echo OK

echo $N Check that compat clones work in nested with -r .............$NL
cd copy
touch gcc/foo
bk new $Q gcc/foo
bk commit $Q --tag=NEWER -yfoo
bk pull $Q || fail
bk clone $Q --compat -rNEWER . ../compat-clone-r || fail compat clone dash r
bk clone $Q --compat . ../whole-compat || fail
cd ../whole-compat
bk clone $Q --upgrade -rNEWER . ../upgrade-clone-r || fail upgrade clone dash r
echo OK
