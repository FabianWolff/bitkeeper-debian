# Copyright 2008-2010,2014-2015 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

BK_NO_HARDLINK_CLONE=1
export BK_NO_HARDLINK_CLONE

echo $N Create initial repository ...................................$NL
commercial project
echo OK

echo $N Create some binary data and check BAM .......................$NL
bk edit $Q BitKeeper/etc/config
grep -v checkout < BitKeeper/etc/config > c
echo 'checkout: last!' >> c
mv c BitKeeper/etc/config
bk delta -ycheckout $Q BitKeeper/etc/config
BK="`bk bin`/bk"
test $PLATFORM = WIN32 && BK=${BK}.exe
DATA="$HERE"/data
perl -e 'sysread(STDIN, $buf, 81920);
syswrite(STDOUT, $buf, 81920);' < $BK > "$DATA"
cp "$DATA" data 
cp "$DATA" data2 
echo make me different >> data2
bk new $Q data data2 || fail
ls > text
bk new $Q text || fail
test -d BitKeeper/BAM || fail
bk commit $Q -ybaseline
bk clone $Q . ../clone
echo OK

echo $N Check for wagerworks auto-edit bug - serverless .............$NL
bk edit $Q data data2 text
echo foo >> data
echo foo bar >> data2
echo foo >> text
bk delta $Q -y2 data data2 text
bk commit $Q -y2 
cd ../clone
bk -r clean
bk -r co -q
for i in data data2 text 
do	test -f $i -a ! -w $i || {
		ls -l > ERR
		fail -f ERR $i should be read only
	}
done
bk pull $Q || fail
for i in data data2 text 
do	test -f $i -a ! -w $i || {
		ls -l > ERR
		fail -f ERR after pull, $i should be read only
	}
done
echo OK

echo $N Check for wagerworks auto-edit bug - with bam server ........$NL
bk unpull -fsq || fail
bk bam server -q ../project
bk bam clean -a > /dev/null 2>&1
find BitKeeper/BAM -type f | grep -v index.db | grep -v BAM.index > FILES
test -s FILES && {
	fail -f FILES failed to flush data
	cat FILES
}
bk -r clean
bk -r co -q
for i in data data2 text 
do	test -f $i -a ! -w $i || {
		ls -l > ERR
		fail -f ERR $i should be read only
	}
done
bk pull $Q || fail
for i in data data2 text 
do	test -f $i -a ! -w $i || {
		ls -l > ERR
		fail -f ERR after pull, $i should be read only
	}
done
echo OK

echo $N Create some new BAM files and commit them ...................$NL
cd "$HERE/project"
for i in x y z
do	cp "$DATA" $i
	echo $i >> $i
done
RK=`bk id | sed 's/|/-/g'`
BEFORE=`wc -l < BitKeeper/BAM/$RK/BAM.index`
bk new $Q x y z
AFTER=`wc -l < BitKeeper/BAM/$RK/BAM.index`
test `expr $BEFORE + 3` -eq $AFTER || {
	fail did not add 3 lines to BitKeeper/BAM/$RK/BAM.index
}
bk commit $Q -yxyz
bk -r check -ac || fail
echo OK
cp BitKeeper/BAM/$RK/BAM.index .

echo $N Make sure we can regenerate the lines in BAM.index ..........$NL
bk prs -hr+ -nd'$if(:BAMHASH:){:BAMLOG:}' x > GOT
FILE=`bk prs -hr+ -nd'$if(:BAMHASH:){:BAMENTRY:}' x`
grep "$FILE" BitKeeper/BAM/$RK/BAM.index > WANT
cmpfiles WANT GOT
echo OK

echo $N Make sure fix -c does not confuse BAM .......................$NL
bk fix -c
echo u | bk new $Q x y z > OUT 2>&1
bk commit $Q -yxyz
bk -r check -acc || fail
echo OK

echo $N Make sure we can gone bam files and check works .............$NL
ROOTKEY=`bk prs -hr+ -nd:ROOTKEY: x`
bk _fslrm -f SCCS/s.x
bk gone $Q "$ROOTKEY"
bk commit $Q -ygone
bk bam check $Q || fail
echo OK

echo $N Again with dups in gone file.................................$NL
bk edit $Q BitKeeper/etc/gone
cat BitKeeper/etc/gone > GONE
cat BitKeeper/etc/gone >> GONE
mv GONE BitKeeper/etc/gone
bk bam check $Q || fail
bk -r check -ac || fail
bk unedit BitKeeper/etc/gone
echo OK


echo $N Gamelogic - checkin repo1/foo from repo2 updates wrong log ..$NL
cd "$HERE"
bk clone $Q project gamelogic
cd gamelogic
bk edit $Q data
echo 1234 >> data
cd ../project
bk delta $Q -ywhatever ../gamelogic/data
cd ../gamelogic
bk -r check -ac || fail
echo OK

echo $N Show that an lclone of an old BAM dir works .................$NL
cd "$HERE"
_BK_BAM_V2=1 bk clone $Q project project.old || fail
BK_NO_HARDLINK_CLONE= bk clone $Q -l project.old copy.new || fail
cd copy.new
bk bam check $Q || fail
test -f BitKeeper/BAM/index.db || fail
test `find BitKeeper/BAM -name '*@*' -print | wc -l` = 0 || fail
echo OK

echo $N Make a standalone under a nested with BAM server ............$NL
cd "$HERE"
# The BAM_SERVER file was looked for (and in this case, found) in the product
nested nesting
echo binary > bam
bk new $Q -b bam
bk bam server $Q .
commercial standing
bk bam server > GOT
echo "This repository has no BAM server." > WANT
cmpfiles WANT GOT
echo OK
