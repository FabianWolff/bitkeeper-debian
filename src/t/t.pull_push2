# Copyright 2001-2006,2009 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Tests for pull, push, and clone.
echo $N Create initial repository ...................................$NL
commercial project
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if bk _test ! -f SCCS/s.ChangeSet; then echo failed to make ChangeSet; exit 1; fi
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo files are pending; bk pending; exit 1; fi
mkdir src
cd src
echo foo > 'F!O#O$ B%A^R&RR(R)RR'
echo bar > bar.c
echo h > h.h
bk ci $Q -i 'F!O#O$ B%A^R&RR(R)RR' bar.c h.h
if bk _test ! -f SCCS/s.'F!O#O$ B%A^R&RR(R)RR'; then echo failed to create history; exit 1; fi
P=`bk pending | wc -l`
if [ $P -ne 15 ]; then echo wrong pending result $P; bk pending; exit 1; fi
bk commit $S -yCset
echo OK

echo $N pull to a repo with edited files should fail ................$NL
bk clone $Q "$HERE/project" "$HERE/copy"
cd "$HERE/project/src"
bk edit $Q bar.c h.h
echo new > bar.c
echo new > h.h
bk delta $Q -ynew_stuff bar.c h.h
bk commit $S -ynew_stuff
bk mv h.h h.newname || fail
cd "$HERE/copy/src"
bk edit $Q bar.c h.h
echo new2 > bar.c
echo new2 > h.h
bk pull > pull.out 2>&1 && {
	echo should have failed
	cat pull.out
	exit 1
}
# We test the output in t.miscbugs
echo OK

echo $N push to a repo with edited files should fail ................$NL
cd "$HERE/project"
bk push "$HERE/copy" > push.out 2>&1 && {
	echo should have failed
	cat push.out
	exit 1
}
grep -q "The following files are modified locally and in" push.out || fail
grep -q "	src/bar.c" push.out || fail
echo OK

echo $N pull into repo with edited non-locked files overwrites.......$NL
cd "$HERE"
rm -rf *
commercial project
echo bar > bar
bk new $Q bar || fail
bk commit $Q -ywhat || fail
cd "$HERE"
bk clone $Q project copy
cd project
bk edit $Q bar
echo foo >> bar
bk delta $Q -ywhat2 bar || fail
bk commit $Q -ywhat3 || fail
cd "$HERE/copy"
bk get $Q bar
chmod +w bar
echo foo2 >> bar
chmod -w bar
bk pull $Q
if [ $? -eq 0 ]; then
	# local changes lost!
	echo 'failed (bug 2001-05-11-001)'
else
	echo 'buf 2001-05-11-001 passing! update testcase.'
	exit 1
fi

echo $N check pull into busted repo containing part of a change......$NL
cd "$HERE"
rm -rf *
commercial project
mkdir src
echo bar > src/bar
bk new $Q src/bar || fail
bk commit $Q -ywhat1 || fail
bk edit $Q src/bar || fail
echo foo >> src/bar
bk delta $Q -ysecond src/bar || fail
bk commit $Q -ywhat1 || fail
cd ..
bk clone $Q project copy
cd copy
bk stripdel $Q -Cr+ ChangeSet
bk pull $Q || fail
echo OK

OS=`uname -s`
if [ "$OS" = "Linux" ]
then #-----------------------------------------------------------------
echo $N Make sure pull via pipe does not leave zombie process .......$NL
bk clone $Q "$HERE/project" "$HERE/copy2"
L=`cd "$HERE/project" ; bk lock -wt`
cd "$HERE/copy2"
bk pull "$HERE/project" > /dev/null 2>&1 &
PULL_PID=$!
# Wait for pull to lock the repo
bk lock -L
sleep 1
ps alxwwwww 2>/dev/null | grep ${PULL_PID} | grep -q "defunc" && {
	echo failed
	kill -9 ${PULL_PID}
	bk _kill $L
	exit 1
}
bk _kill $L
wait $PULL_PID	# wait for pull
cd "$HERE"
rm -rf copy2
echo OK
fi #---------------------------------------------------------------------

echo $N check pull -s with -i .......................................$NL
cd "$HERE"
bk clone $Q project copy3
cd copy3
bk pull $Q -si 2> ERR && fail
grep -q "cannot be used together" ERR || fail
echo OK

echo $N check pull -s with automergable change ......................$NL
cd "$HERE/project"
bk edit $Q src/bar
echo first > src/bar
bk get $Q -kp src/bar >> src/bar
bk delta $Q -yfirst src/bar
bk commit $Q -yfirst
cd ../copy3
bk edit $Q src/bar
echo last >> src/bar
bk delta $Q -ylast src/bar
bk commit $Q -ylast
bk pull $Q -s || fail
test -d RESYNC && fail
echo OK

echo $N check pull -s with non-automergable change ..................$NL
cd "$HERE/project"
touch foo
bk new $Q foo
bk commit $Q -yfoo
cd ../copy3
touch foo
bk new $Q foo
bk commit $Q -yfoo
bk pull $Q -s 2> ERR && {
	echo failed
	exit 1
}
grep -q "RESYNC directory left intact" ERR || {
	echo failed
	exit 1
}
test -d RESYNC || fail
echo OK
