# Copyright 2005-2006,2009-2010,2014-2015 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if [ X$PLATFORM != X"WIN32" ]
then
	echo "For win32 only...............................................skipped"
	exit 0;
fi

cd "$HERE"

echo $N Test win32 waitpid when child has exited.....................$NL
# See src/win32/t/waitpid-test-01.c
waitpid-test-01 || {
	echo failed
	exit 1
}
echo OK

echo $N Test for expected ARCHITECTURE env variables ................$NL
# See this page to learn about env var setting:
# http://msdn.microsoft.com/en-us/library/aa384274(VS.85).aspx
# Arguments against hardcoding the list of architecture:
# http://blogs.msdn.com/oldnewthing/archive/2005/02/01/364563.aspx
# But at this time the installer is going with the hard coded list
# So test here to see that things work
test "$PROCESSOR_ARCHITECTURE" = "x86" || {
	echo "failed: bk/msys not running as x86 (32bit)?"
	echo "Fix this and next test"
	echo Proc arch = "$PROCESSOR_ARCHITECTURE"
	exit 1
}
# assumes "$PROCESSOR_ARCHITECTURE" = "x86"
test X"$PROCESSOR_ARCHITEW6432" = X -o \
     "$PROCESSOR_ARCHITEW6432" = "AMD64" || {
	echo "failed: unexpected architecture"
	echo Proc arch = "$PROCESSOR_ARCHITECTURE"
	echo Proc arch 6432 = "$PROCESSOR_ARCHITEW6432"
	exit 1
}
echo OK

echo $N See that open still works with no retry .....................$NL
commercial project
BK_WIN_NORETRY=0 bk changes -r+ -ndx > GOT || fail
echo x > WANT
cmpfiles WANT GOT
echo OK

echo $N See that sfile command pipeline does not hang ...............$NL
# Build a repo big enough that the sfiles list will fill the pipeline
for i in 0 1; do
	mkdir directory-$i
	for j in 0 1 2 3 4 5 6 7 8 9; do
		for k in 0 1 2 3 4 5 6 7 8 9; do
			touch directory-$i/emptyfile-$i$j$k
			bk new $Q directory-$i/emptyfile-$i$j$k
		done
	done
done
bk commit $Q -y'added many files'
bk -r exit 1 >/dev/null 2>&1 &
PID=$!
# Give the background bk a chance to finish
sleep 2
ps | grep -q " $PID " && {
	echo failed
	kill $PID
	exit 1
}
echo OK

echo $N See that the .bk tree is hidden .............................$NL
cd "$HERE"
bk clone $Q --hide-sccs-dirs project clone
cd clone
attrib .bk > OUT
grep -q "    H   [ I] " OUT || fail -f OUT
echo OK

echo $N Test nt_rmdir retry loop ....................................$NL
cd "$HERE/clone"
mkdir rmdir
cd rmdir
(
	while test ! -f "$HERE/stopit"; do
		bk _usleep 500000
	done
) &
cd ..
bk _rmdir rmdir > OUT 2>&1 &
PID=$!
bk _usleep 10000000
touch "$HERE/stopit"
# Harvesting rmdir should mean the interfering process is done
wait $PID
test -d rmdir && fail directory still there
grep -q "retrying lock on rmdir" OUT || fail -f OUT wrong error
echo OK
