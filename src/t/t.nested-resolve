# Copyright 2011-2013 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

echo $N Set up the repos.............................................$NL
nested parent
cd gcc
echo a > afile
bk new $Q afile
bk commit $Q -yafile
cd ../gdb
echo b > bfile
bk new $Q bfile
bk commit $Q -ybfile
bk -P commit $Q -yadd
cd "$HERE"
bk clone $Q parent child
cd parent
cd gcc
bk edit $Q afile
echo b > afile
bk ci $Q -y.
bk commit $Q -y.
cd ../gdb
bk edit $Q bfile
echo c > bfile
bk ci $Q -y.
bk commit $Q -y.
bk -P commit $Q -y.
echo OK

echo $N Simple pull w/resolve should work............................$NL
cd "$HERE"/child
bk pull $Q >OUT 2>&1 || fail -f OUT
bk unpull -f $Q
echo OK

echo $N conflict in one comp still transfers the other...............$NL
cd "$HERE"/child
cd gcc
bk edit $Q afile
echo conflicts > afile
bk ci $Q -y. afile
bk commit $Q -y.
bk -P commit $Q -y.
cd ../gdb
TIP=`bk changes -Snd:KEY: -r+`
cd ..
echo q | bk pull $Q >OUT 2>&1 && fail -f OUT
test -d RESYNC || fail did not leave RESYNC in product
test -d gcc/RESYNC || fail did not leave RESYNC in gcc
test -d gdb/RESYNC && fail left RESYNC in gdb
NTIP=`bk changes -Snd:KEY: -r+`
test "$TIP" = "$NTIP" && fail did not resolve gdb
echo OK

echo $N Now finish the resolve.......................................$NL
cd "$HERE"/child
cd gcc
bk resolve $Q -T >OUT 2>&1 <<EOF || fail -f OUT resolve failed
s
C
.
EOF
echo OK

echo $N Failed component resolve should fail product resolve.........$NL
cd "`bk root -P`"
bk unpull $Q -f || fail
echo q | bk pull $Q -T >OUT 2>&1 && fail -f OUT
# make resolve of gcc fail
cd gcc
mkdir -p BitKeeper/triggers
cat <<EOF >BitKeeper/triggers/pre-apply
#!/bin/sh
echo FORCED FAILURE
exit 1
EOF
chmod +x BitKeeper/triggers/pre-apply
bk resolve $Q -S <<EOF >OUT 2>&1 && fail -f OUT should have failed
s
C
.
EOF
grep -q "FORCED FAILURE" OUT || fail -f OUT wrong failure
test -d RESYNC && fail -f OUT left comp RESYNC
cd ..
test -d RESYNC && fail -f OUT left prod RESYNC
echo OK

echo $N Again, but leaving RESYNC....................................$NL
bk pull $Q -R >OUT 2>&1 || fail -f OUT pull failed
cd gcc
# modify trigger
cat <<EOF >BitKeeper/triggers/pre-apply
#!/bin/sh
echo FORCED FAILURE
exit 3
EOF
chmod +x BitKeeper/triggers/pre-apply
bk resolve $Q -S <<EOF >OUT 2>&1 && fail -f OUT should have failed
s
C
.
EOF
grep -q "FORCED FAILURE" OUT || fail -f OUT wrong failure
cd ..
test -d RESYNC && fail left prod RESYNC
echo OK

echo $N Try a port and see if resolve works..........................$NL
cd "$HERE/parent"
bk detach $Q gcc "$HERE/gcc"
cd "$HERE/gcc"
echo stuff > stuff
bk new $Q stuff
bk commit $Q -y.
cd "$HERE"
bk clone $Q parent child2
cd child2
bk portal $Q .
cd gcc
bk port $Q -R "$HERE/gcc" || fail
bk resolve >OUT 2>&1 || fail
grep -q "Nothing to resolve." OUT || fail -f OUT wrong error
bk resolve -S $Q -S >OUT 2>&1 || fail -f OUT should have worked
echo OK

echo $N Make sure bk conflicts works with nested.....................$NL
cd "$HERE/gcc"
bk edit $Q stuff afile
echo some line > stuff
echo more line > afile
bk ci $Q -ygcc stuff afile
bk commit $Q -ygcc
cd "$HERE/child2/gcc"
bk edit $Q stuff afile
echo totally different line > stuff
echo more different stuff > afile
bk ci $Q -ynested stuff afile
bk commit $Q -ynested
bk port $Q -R "$HERE/gcc" || fail
cat >WANT <<EOF
gcc/afile
gcc/stuff
EOF
bk conflicts > GOT
test $? = 1 || fail wrong exit status
cmpfiles WANT GOT
echo OK

echo $N Test again after resolving the conflict......................$NL
bk resolve -S $Q -T >$DEV_NULL 2>&1 <<EOF
s
q
EOF
cat >WANT <<EOF
gcc/stuff
EOF
bk conflicts > GOT
cmpfiles WANT GOT
echo OK


echo $N Test pull -i only prompts once ..............................$NL
nested project
echo line > gcc/foo
bk new $Q gcc/foo
bk $Q -e commit $Q -yline
bk clone $Q . ../copy
bk edit $Q gcc/foo
printf "before\nline\n" > gcc/foo
bk delta $Q -ybefore gcc/foo
bk $Q -e commit $Q -ybefore
cd ../copy
bk edit $Q gcc/foo
echo after >> gcc/foo
bk delta $Q -yafter gcc/foo
bk $Q -e commit $Q -yafter
echo q | bk pull -i -T -q 2>ERR && fail -f ERR
cat <<EOF > WANT
resolve: RESYNC directory left intact.
====================================================
(content conflict) foo>> 1 unresolved component:
 gcc
pull: Unresolved components.
resolve: RESYNC directory left intact.
====================================================
EOF
cmpfiles ERR WANT
echo OK

echo $N Test pull -i does not automerge .............................$NL
bk abort -qf
(echo ul ; echo C) | bk pull -i -T 1>ERR 2>&1 || fail -f ERR
bk cat gcc/foo >GOT
cat >WANT <<EOF
line
after
EOF
cmpfiles WANT GOT
echo OK

echo $N Test that product pass4 does not trip up on comps check .....$NL
# This was getting tripped up on comparing changeset files in the prod
# RESYNC and in the component.  Normally they are the same, but after
# the cset is made, they differ by cset marks.  Don't check if no
# r.ChangeSet file.  This happened when pass4 failed because of
# read only product root directory, then the owner of the repo ran resolve
cd "$HERE"/parent
touch foo
bk new $Q foo
bk commit $Q -yfoo
bk clone $Q . ../copy
touch gcc/project
bk new $Q gcc/project
bk edit $Q foo
echo project > foo
bk delta $Q -yfoo foo
bk commit $Q -yproject
cd ../copy
touch gcc/copy
bk new $Q gcc/copy
bk edit $Q foo
echo copy > foo
bk delta $Q -yfoo foo
bk commit $Q -ycopy
echo q | bk pull $Q 2> PULL
bk _test -f RESYNC/gcc/SCCS/d.ChangeSet || fail dfile not there
# This will complete pass3 which makes the merge cset
printf "s\nC\n" > IN 
bk resolve $Q -4 <IN 2> RESOLVE1
bk _test -f RESYNC/gcc/SCCS/d.ChangeSet && fail dfile there
# Do pass 4 now
bk resolve $Q || fail
echo OK

echo $N Test that a resolve on a read only repo root fails ..........$NL
bk unpull $Q -f
echo q | bk pull $Q 2> PULL2
chmod 555 .
printf "s\nC\n" > ../IN
bk resolve $Q < ../IN 2> ../ERR && fail -f ../ERR
grep -q 'repository root directory is not writable.' ../ERR || fail -f ../ERR
echo OK
