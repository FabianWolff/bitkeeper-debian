# Copyright 2001,2005 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

echo $N checking "a//b" ...............................................$NL
P=`bk _cleanpath a//b`
if [ "$P" != "a/b" ]; then echo failed: expect a/b, got $P; exit 1; fi
echo OK
echo $N checking "a///b" ..............................................$NL
P=`bk _cleanpath a///b`
if [ "$P" != "a/b" ]; then echo failed: expect a/b, got $P; exit 1; fi
echo OK
echo $N checking "a/b" ................................................$NL
P=`bk _cleanpath a/b`
if [ "$P" != "a/b" ]; then echo failed: expect a/b, got $P; exit 1; fi
echo OK
echo $N checking "a/./b" ..............................................$NL
P=`bk _cleanpath a/./b`
if [ "$P" != "a/b" ]; then echo failed: expect a/b, got $P; exit 1; fi
echo OK
echo $N checking "./a/./b" ............................................$NL
P=`bk _cleanpath ./a/./b`
if [ "$P" != "a/b" ]; then echo failed: expect a/b, got $P; exit 1; fi
echo OK
echo $N checking "a/../b" .............................................$NL
P=`bk _cleanpath a/../b`
if [ "$P" != "b" ]; then echo failed: expect b, got $P; exit 1; fi
echo OK
echo $N checking "a/..//b" ............................................$NL
P=`bk _cleanpath a/..//b`
if [ "$P" != "b" ]; then echo failed: expect b, got $P; exit 1; fi
echo OK
echo $N checking "../a/..//b" .........................................$NL
P=`bk _cleanpath ../a/..//b`
if [ "$P" != "../b" ]; then echo failed: expect ../b, got $P; exit 1; fi
echo OK
echo $N checking "..//a/..//b" ........................................$NL
P=`bk _cleanpath ..//a/..//b`
if [ "$P" != "../b" ]; then echo failed: expect ../b, got $P; exit 1; fi
echo OK
echo $N checking "../..//a/..//b" .....................................$NL
P=`bk _cleanpath ../..//a/..//b`
if [ "$P" != "../../b" ]; then echo failed: expect ../../b, got $P; exit 1; fi
echo OK
echo $N checking "..//..//a/..//b" ....................................$NL
P=`bk _cleanpath ..//..//a/..//b`
if [ "$P" != "../../b" ]; then echo failed: expect ../../b, got $P; exit 1; fi
echo OK
echo $N checking ".//..//a/..//b" .....................................$NL
P=`bk _cleanpath .//..//a/..//b`
if [ "$P" != "../b" ]; then echo failed: expect ../../b, got $P; exit 1; fi
echo OK
echo $N checking "/ab//b" .............................................$NL
W=`bk _cleanpath / | sed 's,/$,,'`/ab/b
P=`bk _cleanpath /ab//b`
if [ "$P" != "$W" ]; then echo failed: expect $W, got $P; exit 1; fi
echo OK
echo $N checking "C:/a//b" ............................................$NL
P=`bk _cleanpath C:/a//b`
if [ "$P" != "C:/a/b" ]; then echo failed: expect /a/b, got $P; exit 1; fi
echo OK
echo $N checking "C://a//b" ...........................................$NL
P=`bk _cleanpath C://a//b`
if [ "$P" != "C:/a/b" ]; then echo failed: expect /a/b, got $P; exit 1; fi
echo OK
test "$PLATFORM" = "WIN32" && {
echo $N checking network drive "//work/path//to//repo" ................$NL
W=//work/path/to/repo
P=`bk _cleanpath //work/path//to/repo`
if [ "$P" != "$W" ]; then echo failed: expect $W, got $P; exit 1; fi
echo OK
echo $N checking non-network path "///work/path//to//repo" ............$NL
# do it like cygwin
W=/work/path/to/repo
P=`bk _cleanpath ///work/path//to/repo`
if [ "$P" != "$W" ]; then echo failed: expect $W, got $P; exit 1; fi
echo OK
}
test "$PLATFORM" != "WIN32" && {
echo $N checking "/" ..................................................$NL
P=`bk _cleanpath /`
if [ "$P" != "/" ]; then echo failed: expect /, got $P; exit 1; fi
echo OK
}
echo $N checking "/./" ................................................$NL
W=`bk _cleanpath /`
P=`bk _cleanpath /./`
if [ "$P" != "$W" ]; then echo failed: expect $W, got $P; exit 1; fi
echo OK
echo $N checking "//./" ...............................................$NL
W=/	# XXX funny on windows
P=`bk _cleanpath //./`
if [ "$P" != "$W" ]; then echo failed: expect $W, got $P; exit 1; fi
echo OK
echo $N checking "a/b/c/../.." ........................................$NL
P=`bk _cleanpath a/b/c/../..`
if [ "$P" != "a" ]; then echo failed: expect a, got $P; exit 1; fi
echo OK
echo $N checking "a/b/c/../../" .......................................$NL
P=`bk _cleanpath a/b/c/../../`
if [ "$P" != "a" ]; then echo failed: expect a, got $P; exit 1; fi
echo OK
echo $N checking "a/b/c/../..//" ......................................$NL
P=`bk _cleanpath a/b/c/../..//`
if [ "$P" != "a" ]; then echo failed: expect a, got $P; exit 1; fi
echo OK
echo $N checking "a/b//c/../..///" ....................................$NL
P=`bk _cleanpath a/b//c/../..///`
if [ "$P" != "a" ]; then echo failed: expect a, got $P; exit 1; fi
echo OK
echo $N checking \"..\" ...............................................$NL
P=`bk _cleanpath ..`
if [ "$P" != ".." ]; then echo failed: expect .., got $P; exit 1; fi
echo OK
echo $N checking \".\" ................................................$NL
P=`bk _cleanpath .`
if [ "$P" != "." ]; then echo failed: expect ., got $P; exit 1; fi
echo OK
