# Copyright 2005-2006,2009,2013 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

echo $N Create initial repository ...................................$NL
commercial project
echo time > date
bk new $Q date
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if bk _test ! -f SCCS/s.ChangeSet; then echo failed to make ChangeSet; exit 1; fi
mkdir src
cd src
echo bar > bar.c
echo h > h.h
bk new $Q bar.c h.h
bk commit $Q -yCset
KEY=`bk changes -kr+`
MD5KEY=`bk changes -r+ -nd:MD5KEY:`
echo OK

echo $N Create clones and unique changes in each clone ..............$NL
cd "$HERE"
for i in a b
do	bk clone $Q project $i
done
for i in a b project
do	cd "$HERE"/$i
	bk edit $Q date
	echo date > date
	bk ci $Q -ydate date
	bk commit $Q -y$i
	bk changes -kr+ > "$HERE/KEY.$i"
done
echo OK

echo $N Check repogca ...............................................$NL
cd "$HERE/a"
REPOGCA=`bk repogca -k ../project ../b`
test "X$REPOGCA" = "X$KEY" || {
	echo Failed
	echo "Want $KEY"
	echo "Got  $REPOGCA"
	exit 1
}
echo OK

echo $N Check repogca with MD5KEY ...................................$NL
cd "$HERE/a"
REPOGCA=`bk repogca -d:MD5KEY: ../project ../b`
test "X$REPOGCA" = "X$MD5KEY" || {
	echo Failed
	echo "Want $MD5KEY"
	echo "Got  $REPOGCA"
	exit 1
}
echo OK

echo $N Check repogca from subdir ...................................$NL
cd "$HERE/a/src"
REPOGCA=`bk repogca -k ../../project ../../b`
test "X$REPOGCA" = "X$KEY" || {
	echo Failed
	echo "Want $KEY"
	echo "Got  $REPOGCA"
	exit 1
}
echo OK

echo $N Check repogca of a list .....................................$NL
cd "$HERE/b"
bk pull $Q ../a
bk pull $Q ../project
cd ../a
bk pull $Q ../project
# newest cset made in the loop is project
bk repogca -k ../b > GOT
cmpfiles ../KEY.project GOT
# newest cset first
bk repogca -k -a ../b > GOT
cat ../KEY.project ../KEY.a > WANT
cmpfiles WANT GOT
test `bk repogca -a ../b` = 1.2.1.1,1.3 || {
	echo wrong output
	exit 1
}
echo OK

echo $N Show diffs -L will fail with list GCA .......................$NL
bk -U diffs -L../b 2>ERR && fail -f ERR should fail
cat <<EOF > WANT
diffs: non-unique baseline revision
EOF
cmpfiles ERR WANT
echo OK

echo $N Show that repogca --only-one does the same thing ............$NL
bk repogca --only-one ../b >ERR 2>&1 && fail -f ERR should fail
echo repogca: non-unique baseline revision > WANT
cmpfiles WANT ERR
echo OK

echo $N Demo a repogca with a single GCA across multiple parents.....$NL
cd "$HERE"
commercial parent
cd "$HERE"
bk clone $Q parent c1 ; (cd c1 ; touch c1; bk new $Q c1; bk commit $Q -y.)
bk clone $Q parent c2 ; (cd c2 ; touch c2; bk new $Q c2; bk commit $Q -y.)
bk clone $Q parent c3 ; (cd c3 ; touch c3; bk new $Q c3; bk commit $Q -y.)
cd c3
bk repogca ../c1 > GCAS
bk repogca ../c2 >> GCAS
uniq < GCAS > WANT
rm -f GCAS
test "`wc -l <WANT`" -eq "1" || fail -f WANT too many gcas
rm -f GCAS
bk parent $Q -r
bk parent $Q -a -o ../c1
bk parent $Q -a -o ../c2
bk repogca --only-one > GOT 2>ERR
cmp -s WANT GOT && fail "you fixed repogca"
echo failed \(bug \)
