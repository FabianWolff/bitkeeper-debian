# Copyright 2003-2008,2010-2011,2016 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Because we use tar xmf we don't check for timestamp errors here.
unset _BK_DEVELOPER

commercial project

echo $N Create some data ............................................$NL
cat > INITX <<EOF
D 1.1 97/05/28 23:49:57 joe_user@joes_hostname 0 0 0/0/0
c This is revision 1.1
P this/is/the/pathname
------------------------------------------------
EOF
echo Please obscure me > foo
bk delta $Q -i -IINITX foo
# multi-line comment
cat <<'EOF' > comment
This is a multiline comment, with the next line blank

And then a final line after the blank line.
EOF
bk edit $Q foo
_BK_MV_OK=1 bk delta $Q -f -Ycomment foo
test 'This is revision 1.1' = "`bk prs -hr1.1 -nd:C: foo`" || {
	echo bad comment message
	exit 1
}
test 'Please obscure me' = "`bk cat foo`" || {
	echo bad contents
	exit 1
}
echo OK

echo $N Save a copy of the repository ...............................$NL
bk -r get $Q
tar cf ../TAR `bk sfiles -g | bk undos`
echo OK

echo $N Make sure that bk obscure fails .............................$NL
bk obscure > OUT 2>&1 && { echo should have failed; exit 1; }
test 'usage: bk obscure --I-know-this-destroys-my-tree' = "`cat OUT`" || {
	echo bad output
	cat OUT
	exit 1
}
echo OK

echo $N Obscure tree, check contents ................................$NL
test -f foo || bk get $Q foo
bk obscure --I-know-this-destroys-my-tree > OUT 2>&1 || fail
test 'This is revision 1.1' = "`bk prs -hr1.1 -nd:C: foo`" && {
	echo failed to obscure comments
	cat OUT
	exit 1
}
test 'Please obscure me' = "`bk get -kpq foo`" && {
	echo failed to obscure sfile contents
	cat OUT
	exit 1
}
test 'Please obscure me' = "`bk cat foo`" && {
	echo failed to clean gfile contents
	cat OUT
	exit 1
}
bk -r get -qS
mkdir "$HERE/data"
cd "$HERE/data"
tar xmf ../TAR
find . -type f | while read x
do	cmp -s $x ../project/$x && echo $x
done | sort > ../SAME
cat > ../WANT <<EOF
./BitKeeper/etc/attr
./BitKeeper/etc/collapsed
./BitKeeper/etc/config
./BitKeeper/etc/gone
./BitKeeper/etc/ignore
./ChangeSet
EOF
cmp -s ../SAME ../WANT || {
	echo failed to leave system files unobscured
	diff ../SAME ../WANT
	exit 1
}
find . -type f | while read x
do	cmp -s $x ../project/$x || echo $x
done | sort > ../DIFFERENT
test "`cat ../DIFFERENT`" = ./foo || {
	echo failed to obscure foo
	exit 1
}
echo OK

echo $N Make sure modified files fail the entire obscure ............$NL
cd "$HERE/project"
bk edit $Q foo
echo blah >> foo
echo foo > bar
bk new $Q bar
bk obscure --I-know-this-destroys-my-tree > OUT 2>&1 && {
	echo should have failed
	exit 1
}
test `bk cat bar` = foo || {
	echo should not have obscured bar
	exit 1
}
echo OK
