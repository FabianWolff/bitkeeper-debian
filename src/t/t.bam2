# Copyright 2006-2011,2015 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#export _BK_TCP_CONNECT_FAIL=1

BK_NO_HARDLINK_CLONE=1
export BK_NO_HARDLINK_CLONE

echo $N Create initial repository ...................................$NL
for f in 1 2 3 4 5 6 7 8 9
do	echo $f > F$f
	perl -e 'printf "a\000b\n"' >> F$f
done
commercial pmaster
bk bam server $Q . || fail
echo OK

echo $N Create some binary / text data and check BAM ................$NL
cp "$HERE"/F1 bin.data
bk new $Q bin.data
cp ../F1 copy
echo foo > text
bk new $Q copy text
bk commit $Q -ydata
test -d BitKeeper/BAM || fail
echo OK

echo $N Transfer file with sfio -B ..................................$NL
cd ..
bk clone $Q pmaster ptest || fail
cd pmaster
# transfer both keys and files
bk -r prs -hnd'$if(:BAMHASH:){:BAMHASH: :KEY: :MD5KEY|1.0:}' > keys
echo keys >> keys
bk sfio -qBo - < keys > out || fail
cd ../ptest
bk bam server -sr || fail	# no BAM server
test -d BitKeeper/BAM && fail no BAM yet
test -e keys && fail
bk sfio -qBi - < ../pmaster/out || fail
test -d BitKeeper/BAM || fail
bk get $Q bin.data || fail
cmpfiles keys ../pmaster/keys
echo OK

echo $N Set up a remote fetch of a file .............................$NL
cd ..
bk clone $Q pmaster pcopy || fail
cd pcopy
test -d BitKeeper/BAM && fail
bk get $Q bin.data || fail
test -d BitKeeper/BAM || fail BAM pool not restored
test -f bin.data || fail File not gotten
checkfiles "$HERE"/F1 bin.data
echo OK

echo $N "Verify that bk clone fails if it can't find the bp server ...$NL"
cd "$HERE"/pmaster
bk clone $Q . ../gone || fail
bk bam server $Q -f ../gone || fail
rm -rf ../gone
cd ..
bk clone $Q pmaster pcopy2 2> ERR && fail
grep -q 'ERROR-unable to update BAM server' ERR || fail -f ERR
(cd pmaster; bk bam server $Q . || fail)
echo OK

# XXX - this error message leaves a lot to be desired.
# cat ERR

echo $N Verify that bk fails if it cannot find BAM data .............$NL
bk clone $Q pmaster pjunk || fail
cd pjunk
test -d BitKeeper/BAM && fail
# remove my BAM server	
bk bam server $Q -sr || fail
bk -Ur get $Q 2>ERR && fail should have failed
grep -q "failed to fetch BAM data" ERR || fail
echo OK

echo $N Verify that bam server -r with no server works ..............$NL
bk bam server -r || fail
echo OK

echo $N Verify that check see missing with server as dot ............$NL
bk -r check -ac 2> CHECK1 && fail
bk bam server $Q . || fail
bk -r check -ac 2> CHECK2 && fail
grep -q "Failed to locate BAM data for the following deltas:" CHECK1 || fail
cmpfiles CHECK1 CHECK2
echo OK

echo $N Reset BAM server currently set to dot .......................$NL
bk bam server -r 2> ERR && fail
grep -q "bk bam server -f -r" ERR || fail
bk bam server -f -r || fail
echo OK

echo $N Verify that bk bam server -r fetches missing data ...........$NL
bk bam server $Q -f ../pmaster || fail
bk bam server $Q -r || fail
bk bam check -F $Q || fail
echo OK

echo $N Switch to a new bam server and see data transfer ............$NL
cd ..
bk clone $Q pmaster pjunk2 || fail
test -d pjunk2/BitKeeper/BAM && fail
cd pjunk
bk bam server $Q ../pmaster || fail
bk bam push $Q || fail
bk bam clean $Q -a || fail
bk bam server $Q ../pjunk2 || fail
bk bam check -F $Q || fail
test `echo ../pjunk2/BitKeeper/BAM/*/*.d1 | wc -l` -eq 1 || fail
echo OK

echo $N Try switch bam server when you can\'t reach the old server ...$NL
bk bam push $Q || fail         # push data to sever
bk bam clean $Q -a || fail     # remove it locally
# break server link (manually, bam server won't let you)
cat <<EOF > BitKeeper/log/BAM_SERVER
bk://badhost.bitkeeper.com/dev
20080718141848-07:00|work.bitmover.com|/home/bk/projects/dev/newdev|rick|ob0p
EOF
bk bam check -F $Q 2>ERR && fail -f ERR should have failed
bk bam server $Q ../pjunk 2>ERR && fail -f ERR should have failed
grep -q "unable to pull from bk://badhost.bitkeeper.com/dev" ERR || {
	fail -f ERR wrong error
}
echo OK

echo $N Set up a remote fetch of a file to a -G file ................$NL
cd "$HERE"/pcopy
rm -fr BitKeeper/BAM
bk get $Q -G "pcopy data" bin.data || {
	find BitKeeper/BAM -type f > ERR
	bk BAM data bin.data >> ERR
	fail -f ERR get failed
}
test -d BitKeeper/BAM || fail BAM pool not restored
test -f "pcopy data" || fail File not gotten
echo OK

echo $N Set up a remote fetch of a file to a -G file through - ......$NL
rm -fr BitKeeper/BAM "pcopy data"
echo bin.data | bk get $Q -G "pcopy data" - || fail
test -d BitKeeper/BAM || fail BAM pool not restored
test -f "pcopy data" || fail File not gotten
checkfiles "$HERE"/F1 "pcopy data"
echo OK

echo $N Create local data and clone repo ............................$NL
cp "$HERE"/F2 F2
bk new $Q F2 || fail
bk mv bin.data F1 || fail
cp "$HERE"/F1 dupfile
bk new $Q dupfile || fail
bk commit $Q -ylocal || fail
cd "$HERE"
bk clone $Q pcopy pclone1 || fail
cd pclone1
bk get $Q F1 F2 || fail
checkfiles "$HERE"/F1 F1
checkfiles "$HERE"/F2 F2
echo OK

echo $N Clone again in checkout:get mode ............................$NL
cd ..
BK_CONFIG='checkout:get!' bk clone $Q pcopy pclone4 || fail
cd pclone4
checkfiles "$HERE"/F1 F1
checkfiles "$HERE"/F2 F2
test -f text || fail
echo OK

echo $N Clone again in checkout:get BAM_checkout:none mode ..........$NL
cd ..
BK_CONFIG='checkout:get!; BAM_checkout:none!' bk clone $Q pcopy checkout || fail
cd checkout
test -f text || fail did not checkout text
test -f F1 -o -f F2 && fail should not have checked out F1 or F2
echo OK

echo $N Clone again in checkout:none BAM_checkout:get mode ..........$NL
cd ..
rm -rf checkout
BK_CONFIG='checkout:none!; BAM_checkout:get!' bk clone $Q pcopy checkout || fail
cd checkout
test -f text && fail should not checkout text
test -f F1 -a -f F2 || fail did not check out F1 or F2
echo OK

echo $N Try pulling the same csets plus new local work ..............$NL
cd ../pclone1
cp "$HERE"/F3 F3
bk new $Q F3 || fail
bk chmod +x F3 || fail
bk edit $Q F2 || fail
cat "$HERE"/F4 > F2
bk delta -y4 $Q F2 || fail
bk commit -ynew $Q || fail
cd "$HERE"
bk clone $Q pmaster pclone2 || fail
cd pclone2
bk pull $Q ../pclone1 || fail
bk get $Q F1 F2 F3 || fail
checkfiles "$HERE"/F1 F1
checkfiles "$HERE"/F4 F2
checkfiles "$HERE"/F3 F3
echo OK

echo $N Now create new work and push ................................$NL
cd "$HERE"/pclone2
cp "$HERE"/F4 F4
bk new $Q F4 || fail
bk edit $Q F2 || fail
cat "$HERE"/F5 > F2
bk delta $Q -y5 F2 || fail
bk commit -ypush $Q || fail
bk clone $Q ../pmaster ../pclone3 || fail
bk push $Q ../pclone3 || fail
cd ../pclone3
bk get $Q F1 F2 F3 F4 || fail
checkfiles "$HERE"/F1 F1
checkfiles "$HERE"/F5 F2
checkfiles "$HERE"/F3 F3
checkfiles "$HERE"/F4 F4
echo OK

echo $N Clone to different bp master ................................$NL
cd ..
bk clone $Q -B. pmaster cmaster || fail
cd cmaster
bk -Ur get $Q || fail
bk BAM check -Fq || fail
echo OK

echo $N Clone within czone and pull from p ..........................$NL
cd ..
bk clone $Q cmaster cclone1 || fail
cd cclone1
bk BAM check -F $Q || fail
bk pull $Q ../pclone3 || fail

bk get $Q F1 F2 F3 F4 || fail
checkfiles "$HERE"/F1 F1
checkfiles "$HERE"/F5 F2
checkfiles "$HERE"/F3 F3
checkfiles "$HERE"/F4 F4
bk BAM check -Fq || fail
echo OK

echo $N Clone to repo without a bp master ...........................$NL
cd ..
bk clone -Bnone $Q cclone1 zclone1 || fail
cd zclone1
bk -Ur get $Q || fail
echo OK

echo $N Clone again in checkout:get mode ............................$NL
cd ..
BK_CONFIG='checkout:get!' bk clone -Bnone $Q cclone1 zclone3 || fail
cd zclone3
bk -Ur get $Q -S || fail
bk BAM check -Fq || fail
echo OK

echo $N Push new data across zones ..................................$NL
cd "$HERE"/cclone1
cp "$HERE"/F5 F5
bk new $Q F5 || fail
bk mv F1 F6 || fail
bk edit $Q F6 || fail
cp "$HERE"/F6 F6
bk delta -y6 $Q F6 || fail
bk commit -y6 $Q || fail
bk BAM check -Fq || fail
bk push $Q ../pclone2 || fail
cd ../pclone2
bk -r get $Q || fail
checkfiles "$HERE"/F5 F5
checkfiles "$HERE"/F6 F6
checkfiles "$HERE"/F3 F3
checkfiles "$HERE"/F4 F4
bk BAM check -Fq || fail
echo OK

echo $N Try remote clone across zones................................$NL
cd "$HERE"
bk bkd -d -aPORT -ikill || fail
P=`cat PORT`
bk clone $Q -Bnone cclone1 bk://localhost:$P/zclone2 || fail
cd zclone2 || fail
bk BAM check -Fq || fail
echo OK

echo $N Try remote push across zones with file based bp master url ..$NL
# Assume (from above) that cclone1 and pclone2 are equal and have different
# masters.  Access the cclone1 through the bkd.  The failure depends on
# the 'c' BAM_master being a file url and not a bk:// url.
cd "$HERE/pclone2"
cp "$HERE/F7" .
bk new $Q F7
bk commit $Q -yF7
bk push $Q bk://localhost:$P/cclone1 || {
	bk _kill bk://localhost:$P
	fail push failed
}
cd ../cclone1
bk get $Q -S || {
	bk _kill bk://localhost:$P
	fail get failed
}
checkfiles "$HERE"/F7 F7
echo OK

echo $N Repeat push using http ......................................$NL
bk unpull -f $Q || fail
bk BAM clean $Q || fail
cd ../pclone2
bk push $Q http://localhost:$P/cclone1 || {
	bk _kill bk://localhost:$P
	fail push failed
}
cd ../cclone1
bk get $Q -S || {
	bk _kill bk://localhost:$P
	fail get failed
}
checkfiles "$HERE"/F7 F7
echo OK

echo $N Now do an http pull .........................................$NL
bk unpull -f $Q || fail
bk BAM clean $Q || fail
bk pull $Q http://localhost:$P/pclone2 || {
	bk _kill bk://localhost:$P
	fail
}
bk BAM check $Q || fail
echo OK

bk _kill bk://localhost:$P

echo $N Test BAM reattach ...........................................$NL
cd "$HERE"/cclone1
bk -r clean || fail
mv BitKeeper/BAM junk
bk -r get $Q 2>ERR && fail should have failed
rm -rf BitKeeper/BAM	# lose items fetched by get
mv `find junk -name '*.d1' | head -1` junk2
find junk -type f | bk BAM reattach - >OUT
test $? -eq 1 || fail missing data expected 1 exit
grep -q "BAM datafiles are still missing" OUT || fail -f OUT wrong out
echo junk2 | bk BAM reattach - >OUT
test $? -eq 0 || fail -f OUT expected 0 exit
grep -q "all missing BAM data found" OUT || fail -f OUT wrong out2
bk -r get $Q || fail
echo OK

echo $N Test BAM clean ..............................................$NL
for i in 155 236 317
do
	echo $i > t.$i
	echo $i > $i
	bk new -b $Q $i || fail i is $i
done

RK=`bk id | sed 's/|/-/g'`
bk get $Q || fail
cmpfiles t.155 155
cmpfiles 155 BitKeeper/BAM/$RK/01/01d700a5.d1
cmpfiles t.317 317
cmpfiles 317 BitKeeper/BAM/$RK/01/01d700a5.d3

bk clean || fail
bk stripdel $Q -r.. 155 || fail
bk BAM clean $Q || fail
bk BAM check $Q || fail
bk get $Q || fail
cmpfiles t.236 236
cmpfiles 236 BitKeeper/BAM/$RK/01/01d700a5.d1
cmpfiles t.317 317
cmpfiles 317 BitKeeper/BAM/$RK/01/01d700a5.d2
echo 155 > 155
bk new -b $Q 155 || fail
bk clean || fail
bk stripdel $Q -r.. 236 || fail
bk stripdel $Q -r.. 317 || fail
bk BAM clean $Q || fail
bk BAM check $Q || fail
bk get $Q || fail
cmpfiles t.155 155
cmpfiles 155 BitKeeper/BAM/$RK/01/01d700a5.d1
echo OK

echo $N Test BAM check ..............................................$NL
chmod u+w BitKeeper/BAM/$RK/01/01d700a5.d1
echo 1 > BitKeeper/BAM/$RK/01/01d700a5.d1
bk BAM check -q 2>ERR && {
	echo should have failed
	fail
}
grep -q 'BitKeeper has detected corruption in your BAM data.' ERR || fail -f ERR
test `wc -l < ERR` -eq 3 || fail -f ERR
bk -r check -acc 2>ERR && {
	echo should have failed
	fail
}
grep -q 'BitKeeper has detected corruption in your BAM data.' ERR || fail -f ERR
test `wc -l < ERR` -eq 3 || fail -f ERR
rm BitKeeper/BAM/$RK/01/01d700a5.d1
bk BAM check -q 2>ERR && {
	echo should have failed
	cat ERR
	fail
}
grep -q 'Failed to locate' ERR || fail -f ERR
test `wc -l < ERR` -eq 2 || fail -f ERR
bk -r check -a || fail
bk -r check -aB 2>ERR && {
	echo should have failed
	fail
}
grep -q 'Failed to locate' ERR || fail -f ERR
test `wc -l < ERR` -eq 2 || fail
echo 155 > BitKeeper/BAM/$RK/01/01d700a5.d1
bk BAM check $Q || fail
echo OK

echo $N Test BAM push ...............................................$NL
cd ../pclone1
echo 201 > 201
bk new -b $Q 201 || fail
bk commit $Q -y201 || fail
bk get $Q 201
test -e ../pmaster/BitKeeper/BAM/$RK/01/01c4009d.d1 && fail
bk BAM push $Q || fail
cmpfiles 201 ../pmaster/BitKeeper/BAM/$RK/01/01c4009d.d1

bk undo $Q -fsa1.4 || fail

# tweak old update bug
bk push $Q || fail
echo OK

# Use BAM log to make sure that data isn't moved more
# than necessary
BLOG=BitKeeper/BAM/$RK/BAM.index
# mychecklog <file> <# expected items>
mychecklog() {
	test -e $1 || fail Cannot find $1
	_count=`wc -l < $1`
	test $_count -eq $2 || fail Expected $2 items in $1
}

echo ---- Check that BAM data moves once ...
echo $N .... after pull, unpull, pull sequence.......................$NL
cd "$HERE"
bk clone $Q pmaster pclone5
cd pclone5
bk get $Q
count1=` wc -l < $BLOG`
test $count1 -eq 2 || fail Expected 2 lines in $BLOG
bk pull $Q ../pclone3
bk get $Q
count2=` wc -l < $BLOG`
test $count2 -gt $count1 || fail Expected more lines in $BLOG after get
bk unpull -f $Q
count3=` wc -l < $BLOG`
test $count2 -eq $count3 || {
	fail Expected number of lines in $BLOG to not change after unpull
}
bk pull $Q ../pclone3
bk get $Q
count4=` wc -l < $BLOG`
test $count2 -eq $count4 || {
	fail Expected number of lines in $BLOG to not change after re-pull
}
echo OK
echo $N .... after adding a new file.................................$NL
cp "$HERE"/F5 .
bk new $Q F5
bk commit $Q -f -y"Added F5"
count5=`wc -l < $BLOG`
test $count5 -gt $count4 || {
	fail Expected number of lines in $BLOG to differ from parent.
}
count6=`wc -l < ../pmaster/$BLOG`
bk push $Q
count7=`wc -l < ../pmaster/$BLOG`
test $count7 -gt $count6 || {
	fail Expected number of lines in ../pmaster/$BLOG to increase in push
}
echo OK
echo $N .... after copy clone pulls from project clone...............$NL
# Invite copy master and copy clone
cd "$HERE"
bk clone $Q cmaster cclone5
cd cclone5
# Use get because 
# bk BAM pull $Q
# doesn't work because pull is missing -q
bk get $Q
mychecklog $BLOG 2
mychecklog ../cmaster/$BLOG 10
bk pull $Q ../pclone5
mychecklog $BLOG 3
mychecklog ../cmaster/$BLOG 10
bk -Ur get $Q
mychecklog $BLOG 7
mychecklog ../cmaster/$BLOG 10
bk BAM push $Q
mychecklog $BLOG 7
mychecklog ../cmaster/$BLOG 11
bk push $Q
mychecklog $BLOG 7
mychecklog ../cmaster/$BLOG 11
echo OK
echo $N Check binary create conflict.................................$NL
cd "$HERE"
rm -rf pclone[67]
bk clone $Q pmaster pclone6
bk clone $Q pmaster pclone7
cd pclone6
echo foo > foo
perl -e 'printf "q\000\001\002b\n"' >> foo
bk new $Q foo
bk commit $Q -f -y"Added foo"
cd ../pclone7
echo foo > foo
perl -e 'printf "q\000\001\002b\n"' >> foo
bk new $Q foo
bk commit $Q -f -y"Added foo"
bk pull $Q ../pclone6 2>ERR <<EOF
rl
y
EOF
test $? -eq 0 || fail -f ERR
echo OK
echo $N Check binary file automerge..................................$NL
cd "$HERE"
rm -rf pclone[67]
bk clone $Q pmaster pclone6
bk clone $Q pmaster pclone7
cd pclone6
bk edit $Q F5
perl -e 'printf "b\000b\n"' >> F5
bk ci $Q -y"Added stuff" F5
bk commit $Q -f -y"Added stuff to F5"
cd ../pclone7
bk edit $Q F5
perl -e 'printf "b\000b\n"' >> F5
bk ci $Q -y"Added other stuff" F5
bk commit $Q -f -y"Added other stuff to F5"
bk pull $Q ../pclone6 2>ERR
test $? -eq 0 || fail
echo OK
echo $N Check basic binary file conflicts............................$NL
cd "$HERE"
rm -rf pclone[67]
bk clone $Q pmaster pclone6
bk clone $Q pmaster pclone7
cd pclone6
bk edit $Q F5
perl -e 'printf "b\000b\n"' >> F5
bk ci $Q -y"Added stuff" F5
bk commit $Q -f -y"Added stuff to F5"
cd ../pclone7
bk edit $Q F5
perl -e 'printf "c\000b\n"' >> F5
bk ci $Q -y"Added other stuff" F5
bk commit $Q -f -y"Added other stuff to F5"
bk pull $Q ../pclone6 2>ERR <<EOF
ul
Merge comment
.
EOF
test $? -eq 0 || fail
echo OK

echo $N Check binary file automerge with attribute conflict..........$NL
cd "$HERE"
rm -rf pclone[67]
bk clone $Q pmaster pclone6
bk clone $Q pmaster pclone7
cd pclone6
bk chmod +x F5
bk commit $Q -f -y"Added execute to F5"
cd ../pclone7
bk edit $Q F5
perl -e 'printf "b\000b\n"' >> F5
bk ci $Q -y"Added other stuff" F5
bk commit $Q -f -y"Added other stuff to F5"
bk pull $Q ../pclone6 2>ERR <<EOF
ul
Merge comment
.
EOF
test $? -eq 0 || fail
echo "failed (bug - feature not implemented)"
#exit 1

echo $N bp_fetch from non existent bam server .......................$NL
cd "$HERE"
rm -rf project copy copy2
commercial project
echo bam > bam
bk new $Q -b bam
bk commit $Q -ybam
bk bam server $Q .
cd ..
bk clone $Q project copy
bk clone $Q project copy2
mv project aside
cd copy
bk get $Q bam 2> ERR && fail
grep -q 'get: failed to fetch BAM data' ERR || fail
echo OK

echo $N get a file through bam server when pwd is outside a repo ....$NL
cd ..
bk get $Q copy/bam copy2/bam 2> ERR && fail
grep -q 'get: failed to fetch BAM data' ERR || fail
echo OK

echo $N Fetch from 2 different projects .............................$NL
mv aside project
bk get $Q copy/bam copy2/bam || fail
echo OK

echo $N Create setup - bam server and client and copy ...............$NL
cd "$HERE"
commercial bamserver
bk bam server $Q .
test -f BitKeeper/log/BAM || fail
bk clone --no-hardlinks $Q . ../client
cd ../client
echo bam > bam
bk new $Q -b bam
bk commit $Q -ybam
bk clone --no-hardlinks $Q . ../client-copy
echo OK

echo $N Check that the bam file made it to the server ...............$NL
cd ../bamserver/BitKeeper/BAM
test `find . -type f -print | grep -v index | wc -l` -eq 1 || {
	find . -type f -print > ERR
	fail -f ERR
}
echo OK

echo $N Clone -B. copy bork - no recursion to bam server ............$NL
cd "$HERE"
bk clone $Q -B. client-copy bork || fail
echo OK

echo $N Corrupt the copy BAM data and see if get tells you ..........$NL
cd "$HERE"/client-copy
bk bam pull $Q -a
bamfile="BitKeeper/BAM/`bk id | sed 's/|/-/g'`/03/038f013a.d1"
rm -f $bamfile
echo corrupt > $bamfile
chmod 444 $bamfile
bk -r clean
bk -U get > OUT 2>&1
grep -q 'BitKeeper has detected corruption in your BAM data.' OUT || fail -f OUT
echo OK

echo $N See if bam repair repairs it ................................$NL
bk bam repair > OUT 2>&1 || fail -f OUT
grep -q 'All BAM data was found and repaired, repair passed.' OUT || fail -f OUT
echo OK

echo $N Corrupt data in server and try and repair, should fail ......$NL
cd "$HERE"/bamserver
bamfile="BitKeeper/BAM/`bk id | sed 's/|/-/g'`/03/038f013a.d1"
rm -f $bamfile
echo corrupt > $bamfile
chmod 444 $bamfile
bk bam repair > OUT 2>&1
grep -q 'bam repair: no BAM sources found' OUT || fail -f OUT
echo OK

echo $N Bam check in clients looking for bam server corruption ......$NL
cd ../client
bk bam check $Q || fail
cd ../client-copy
bk bam check $Q || fail
echo "failed (bug server corruption undetected)"

echo $N bam repair -@../copy should fix it ..........................$NL
cd ../bamserver
bk bam repair -@../client-copy > OUT 2>&1
grep -q 'All BAM data was found and repaired, repair passed.' OUT || fail -f OUT
echo OK

echo $N bam repair -@../copy should fix missing server file too .....$NL
rm -f $bamfile
bk bam repair -@../client-copy > OUT 2>&1
grep -q 'All BAM data was found and repaired, repair passed.' OUT || fail -f OUT
echo OK

echo $N Fetch and detect corrupt data ...............................$NL
cd ../client-copy
bamfile="BitKeeper/BAM/`bk id | sed 's/|/-/g'`/03/038f013a.d1"
rm -f $bamfile
echo corrupt > $bamfile
chmod 444 $bamfile
bk get bam > OUT 2>&1 && fail -f ERR
grep -q 'BitKeeper has detected corruption in your BAM data.' OUT || fail -f OUT
echo OK

echo $N bk check -cc should see it too ..............................$NL
bk -r check -accv > OUT 2>&1 
grep -q 'BitKeeper has detected corruption in your BAM data.' OUT || fail -f OUT
echo OK
