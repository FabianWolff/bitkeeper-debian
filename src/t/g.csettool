# Copyright 2004-2007,2009,2013-2014 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

test -d "$HERE/home" || mkdir "$HERE/home"
export BK_TEST_HOME="$HERE/home"
OUT="$HERE/out"
RC="`bk dotbk`/cset.rc"

echo $N Create some data ............................................$NL
commercial project
cd "$HERE/project/BitKeeper/etc"
mkdir "$HERE/project/src"
cd "$HERE/project/src"
for f in file1 file2 file3 file4 file5 ; do
    echo "this is $f" > $f 
    bk ci $Q -i -y'new file' $f || exit 1
done
bk commit $Q -y'initial checkin' 
bk tag $Q "BabySteps"
echo OK

echo $N Simple startup and exit......................................$NL
bk guitest csettool >"$OUT" 2>&1 <<'EOF'
    test_buttonPress Quit
    test_die 99
EOF
err=$?
test $err -eq 0 || {
	echo exited $err expected 0
	fail -f "$OUT"
}
if [ -s "$OUT" ] ; then
    echo failed $err
    echo "unexpected output:"
    cat "$OUT"
    exit 1 
fi
echo OK

# this tests that the gui properly creates the rc file. We can rely
# on the fact it should have been created by the previous test
echo $N Create dotbk/cset.rc ........................................$NL
test -f "$RC" && rm -f "$RC"
bk guitest csettool >"$OUT" 2>&1 <<'EOF'
    test_buttonPress Quit
    test_die 99
EOF
test -f "$RC" || (echo "failed" ; exit 1; )
echo "OK"

echo $N Check prs-formatted list of files............................$NL
bk guitest csettool >"$OUT" 2>&1 <<'EOF'
    set actual [.l.filelist.t get 1.0 end-1c]
    set expected {
ChangeSet 1.2
  src/file1@1.1
  src/file2@1.1
  src/file3@1.1
  src/file4@1.1
  src/file5@1.1
}
    # ignore leading/trailing whitespace...
    set expected [string trim $expected]
    set actual [string trim $actual]
    if {$actual ne $expected} {
    	puts "unexpected output. Expected:"
        puts $expected
        puts "actual:"
        puts $actual
    }
    exit 0
EOF
if [ -s "$OUT" ] ; then
    echo failed $err
    cat "$OUT"
    exit 1 
fi
echo OK

echo $N Test revision given in command line..........................$NL
bk guitest csettool -r1.1 >"$OUT" 2>&1 <<'EOF'
	global currentCset
	if {$currentCset ne "1.1"} {
		puts "Gave -r1.1 in command line, \
		    but currentCset is $currentCset"
		exit 1
	}
	exit 0
EOF
if [ $? -ne 0 ]; then echo failed; cat "$OUT"; exit 1; fi
if [ -s "$OUT" ] ; then echo failed; cat "$OUT"; exit 1; fi
echo OK

echo $N Test no revision given in command line.......................$NL
# since csettool expects -r<rev> and NOT "-r <rev>"
# we pass it "-r 1.1" which it should take as no revision given
bk guitest csettool -r 1.1 >"$OUT" 2>&1 <<'EOF'
	puts stderr "CsetTool should have exited 1 with an error message \
	    but it didn't"
	exit 0
EOF
if [ $? -eq 0 ]; then echo failed; cat "$OUT"; exit 1; fi
echo OK

echo $N Test to make sure we have diffs .............................$NL
bk guitest csettool -r1.1 >"$OUT" 2>&1 <<'EOF'
	if {[.diffs.status.middle cget -text] eq "No differences"} {
		exit 1
	}
	exit 0
EOF
if [ $? -ne 0 ]; then echo failed; cat "$OUT"; exit 1; fi
if [ -s "$OUT" ] ; then echo failed; cat "$OUT"; exit 1; fi
echo OK

echo $N Test -L option ..............................................$NL
cd "$HERE"
bk clone $Q project clone
mkdir clone/dir
cd clone/dir
echo foo > foo
echo bar > bar
echo baz > baz
bk new $Q foo bar baz
bk commit $Q -f
bk guitest csettool -L >"$OUT" 2>&1 <<EOF
	test_buttonPress "Quit"
EOF
test $? -eq 0 || fail -f "$OUT"
test -s "$OUT" && fail -f "$OUT"
echo OK

echo $N Test -LURL option ...........................................$NL
bk guitest csettool -L"file://$HERE/project" >"$OUT" 2>&1 <<EOF
	test_buttonPress "Quit"
EOF
test $? -eq 0 || fail -f "$OUT"
test -s "$OUT" && fail -f "$OUT"
echo OK

echo $N Test -L when there are multiple parents .....................$NL
cd "$HERE"
bk clone $Q clone clone2
cd clone2
bk parent $Q -ao "$HERE/project"
bk guitest csettool -L >"$OUT" 2>&1 <<EOF
	test_buttonPress "Quit"
EOF
test $? -eq 0 && fail -f "$OUT" should fail
cat <<EOF > WANT
Could not get repo GCA:
repogca: multiple parents, -L requires a url

EOF
cmpfiles "$OUT" WANT
echo OK

echo $N See that -S works with -L to act as if comp is standalone ...$NL
cd "$HERE"
BK_CONFIG='checkout:edit!'
export BK_CONFIG
nested project-SL
cd gcc
touch foo
bk new $Q foo
bk commit $Q -f
bk detach $Q . "$HERE"/gcc
echo new data > foo
bk delta $Q -y'more edits' foo
bk commit $Q -y'more csets'
bk guitest csettool -S -L"$HERE"/gcc >"$OUT" 2>&1 <<EOF || fail -f "$OUT"
	test_buttonPress "Quit"
EOF
bk guitest csettool --standalone -L"$HERE"/gcc >"$OUT" 2>&1 <<EOF \
    || fail -f "$OUT"
	test_buttonPress "Quit"
EOF
echo OK

# These pop up a GUI error message, but it is the correct one!
# echo $N Sanity check command line parsing for -L with -S ............$NL
# bk csettool -r1.2 -L"$HERE"/gcc 2> "$OUT" && fail -f "$OUT"
# bk csettool -r1.2 -S -L"$HERE"/gcc 2> "$OUT" && fail -f "$OUT"
# echo OK
