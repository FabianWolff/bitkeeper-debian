# Copyright 2001-2002,2005-2006,2009,2014-2015 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#Because some proxy disallow proxy to localhost
unsetHttpProxy

echo $N Create initial repositories .................................$NL
commercial project
mkdir BitKeeper/triggers
cat > BitKeeper/triggers/post-outgoing <<EOF
#!/bin/sh
exit 0
EOF
chmod +x BitKeeper/triggers/*
bk new $Q BitKeeper/triggers/post-outgoing
mkdir src
cd src
echo foo > 'F!O#O$ B%A^R&RR(R)RR'
echo bar > bar.c
echo h > h.h
bk ci $Q -i 'F!O#O$ B%A^R&RR(R)RR' bar.c h.h
bk _test -f SCCS/s.'F!O#O$ B%A^R&RR(R)RR' || fail failed to create history
P=`bk pending | wc -l`
test "$P" -eq 20 || fail
bk commit $S -yCset
P=`bk pending | wc -l`
test "$P" -eq 0 || fail
bk level 3
cd ..
bk clone $Q . ../copy
bk edit $Q src/bar.c
bk delta $Q -fynull src/bar.c
bk commit $Q -f
cd ../copy
bk pull $Q -R
cd ..
tar cf copy.tar copy
bk bkd -q -aPORT -ikill || fail
P=`cat PORT`
trap "bk _kill bk://localhost:$P" 0
# random sanity check
bk _test -f copy/src/SCCS/s.'F!O#O$ B%A^R&RR(R)RR' || fail
echo OK

# In this test we call the rclone code via the bk clone interface
echo $N rabort via bk:// ............................................$NL
cd "$HERE/project"
bk abort bk://localhost:$P/"$HERE/copy" || fail bk:// abort
cd "$HERE/copy"
bk lock -s || { echo failed; exit 1; }
echo OK

echo $N rabort via http:// ..........................................$NL
cd "$HERE"
rm -fr copy
tar xf copy.tar
cd "$HERE/project"
bk abort http://localhost:$P/"$HERE/copy" || fail http:// abort
cd "$HERE/copy"
bk lock -s || fail
echo OK

echo $N rabort via file:// ..........................................$NL
cd "$HERE"
rm -fr copy
tar xf copy.tar
cd "$HERE/project"
bk abort file://"$HERE/copy" || fail file:// abort
cd "$HERE/copy"
bk lock -s || fail
echo OK

echo $N rabort via file:// from same repo ...........................$NL
cd "$HERE"
rm -fr copy
tar xf copy.tar
cd "$HERE/copy"
bk abort file://"$HERE/copy" || fail file:// abort
bk lock -s || fail
echo OK

echo $N rabort via file:// from no repo .............................$NL
cd "$HERE"
rm -fr copy
tar xf copy.tar
bk abort file://"$HERE/copy" || fail file:// abort
cd "$HERE/copy"
bk lock -s || fail
echo OK

echo $N rabort via reponame that begins with - ......................$NL
cd "$HERE"
rm -fr copy
tar xf copy.tar
mv copy ./-copy
bk abort -- -copy || fail with aborting -copy
cd "$HERE/-copy"
bk lock -s || fail
cd ..
mv ./-copy copy
echo OK

echo $N rabort via bk:// in a locked repo ...........................$NL
cd "$HERE"
rm -fr copy
tar xf copy.tar
cd copy
LOCKURL=`bk lock -rt`
trap "bk _kill bk://localhost:$P; bk _kill $LOCKURL" 0
cd "$HERE/project"
bk abort bk://localhost:$P/"$HERE/copy" > ERR && fail bk:// abort did not fail
grep -q "RESYNC directory" ERR || fail -f ERR
cd "$HERE/copy"
test -d RESYNC || fail
bk lock -s && fail
echo OK

echo $N rabort via http:// in a locked repo .........................$NL
cd "$HERE/project"
bk abort http://localhost:$P/"$HERE/copy" > ERR && {
	fail http:// abort did not fail
}
grep -q "RESYNC directory" ERR || fail -f ERR
cd "$HERE/copy"
test -d RESYNC || fail
bk lock -s && fail
echo OK

echo $N rabort via file:// in a locked repo .........................$NL
cd "$HERE/project"
bk abort file://"$HERE/copy" > ERR && fail file:// abort did not fail
grep -q "RESYNC directory" ERR || fail -f ERR
cd "$HERE/copy"
test -d RESYNC || fail
bk lock -s && fail
echo OK

echo $N rabort via file:// in a locked repo from same repo ..........$NL
bk abort file://"$HERE/copy" > ERR && fail file:// abort did not fail
grep -q "RESYNC directory" ERR || fail -f ERR
test -d RESYNC || fail
bk lock -s && fail
echo OK

echo $N rabort via file:// in a locked repo from no repo ............$NL
cd "$HERE"
bk abort file://"$HERE/copy" > ERR && fail file:// abort did not fail
grep -q "RESYNC directory" ERR || fail -f ERR
cd "$HERE/copy"
test -d RESYNC || fail
bk lock -s && fail
echo OK

echo $N rabort via repo that begins with - inside a locked repo .....$NL
cd "$HERE/copy"
tar xf ../copy.tar
mv copy ./-copy
# I'm in a locked repo, but ./-copy is not locked, so it should work
bk abort -- -copy || fail abort in a locked of an unlocked should work
cd ./-copy
bk lock -s || fail
cd ..
rm -fr ./-copy
echo OK

echo $N abort in a locked repo from same repo .......................$NL
# throw in a -- with no later param to see that we get a lock
bk abort -f -- 2> ERR && fail abort -f did not fail
grep -q "Entire repository is locked by" ERR || fail -f ERR
test -d RESYNC || fail
bk lock -s && fail
echo OK

echo $N abort in an unlocked repo from same repo ....................$NL
bk _kill $LOCKURL
trap "bk _kill bk://localhost:$P" 0
cd "$HERE/copy"
bk abort -f || fail abort -f did not work
cd "$HERE/copy"
test -d RESYNC && fail
bk lock -s || fail
echo OK

# TODO test virtual host/root support
