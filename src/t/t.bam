# Copyright 2006-2011,2015 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

linkcount() {
	bk _stat $1 | awk -F\| '{print $4}'
}

BK_NO_HARDLINK_CLONE=1
export BK_NO_HARDLINK_CLONE

echo $N Create initial repository ...................................$NL
commercial project
echo OK

echo $N Create some binary data and check BAM .......................$NL
BK="`bk bin`/bk"
test $PLATFORM = WIN32 && BK=${BK}.exe
DATA="$HERE"/data
perl -e 'sysread(STDIN, $buf, 81920);
syswrite(STDOUT, $buf, 81920);' < $BK > "$DATA"
cp "$DATA" data
bk new $Q data || fail
perl -e 'printf "Hi there\x0\n";' > small
BK_CONFIG='BAM:1k!' bk new $Q small
test -d BitKeeper/BAM || fail
echo OK
# find BitKeeper/BAM -type f 
# find BitKeeper/BAM -type f -name '*.a1' | xargs cat

echo $N Make sure we get an empty file for 1.0 ......................$NL
bk get -qkp -r1.0 data > data-1.0 || fail
test -s data-1.0 && fail
rm data-1.0
bk get $Q -r1.0 -Gdata-1.0 data || fail
test -f data-1.0 -a ! -s data-1.0 || fail
echo OK

echo $N Check encoding for large/small binaries .....................$NL
test `bk prs -hr+ -nd:ENC: data` = BAM || fail data should have been BAM
test `bk prs -hr+ -nd:ENC: small` = uuencode || fail small should be uuencode
echo OK

echo $N Try checksum on BAM file ....................................$NL
bk checksum data || fail
echo OK

echo $N Create some different binary data and delta it ..............$NL
bk edit $Q data || fail
echo foo >> data
bk clean -q data && fail should not have cleaned data
bk diffs data > OUT
grep -q 'Binary file data differs' OUT || fail
bk delta $Q -yfoo data
NUM=`find BitKeeper/BAM -type f -name '*.d1' -print | wc -l`
test $NUM = 2 || {
	find BitKeeper/BAM -type f -name '*.d1' -print > ERR
	fail -f ERR wrong number of files
}
echo OK

echo $N Delete bam files ............................................$NL
# Failed on windows because of the second delete putting a : into file name
echo bd > bd
bk new $Q -b bd || fail
bk rm bd || fail
echo bd > bd
bk new $Q -b bd || fail
bk rm bd || fail
bk -r check -ac 2> ERR || fail check failed
echo OK

echo $N Check that we picked up the right timestamps ................$NL
bk -Ur bam timestamps -n > OUT
test -s OUT && fail -f OUT
echo OK

echo $N Same data should just get added to the same BAM file ........$NL
mkdir subdir
cp "$DATA" subdir/data3
bk new $Q subdir/data3
NUM=`find BitKeeper/BAM -type f -name '*.d1' -print | wc -l`
test $NUM = 3 || {
	find BitKeeper/BAM -type f -name '*.d1' -print > ERR
	fail -f ERR wrong number of files
}
echo OK

echo $N Force a fake hash and see if that worked ....................$NL
cp "$DATA" fake_hash
RK=`bk id | sed 's/|/-/g'`
_BK_FAKE_HASH=deadbeef bk new $Q fake_hash
test -d BitKeeper/BAM || fail
test -f BitKeeper/BAM/$RK/de/deadbeef.d1 || fail
if [ -w BitKeeper/BAM/$RK/de/deadbeef.d1 ]
then	ls -l BitKeeper/BAM/de/deadbeef.d1 > ERR
	fail -f ERR file in BAM storage is writable
else	echo OK
fi

echo $N See if a failed get changes the file to RW ..................$NL
bk clean fake_hash
_BK_FAKE_HASH=deadbeef bk get $Q fake_hash
test -w fake_hash && {
	ls -l > ERR
	fail -f ERR fake_hash should not be writable
}
mv BitKeeper/BAM/$RK/de/deadbeef.d1 BitKeeper/BAM/$RK/de/deadbeef.SAVE
_BK_FAKE_HASH=deadbeef bk get $Q fake_hash > OUT 2>&1 && {
	fail -f OUT should have failed
}
test -w fake_hash && {
	ls -l fake_hash > ERR
	fail -f ERR should not have changed modes on fake_hash
}
mv BitKeeper/BAM/$RK/de/deadbeef.SAVE BitKeeper/BAM/$RK/de/deadbeef.d1
echo OK

echo $N See if a failed get -Gchanges the gfile state ...............$NL
_BK_FAKE_HASH=deadbeef bk get $Q fake_hash
mv BitKeeper/BAM/$RK/de/deadbeef.d1 BitKeeper/BAM/$RK/de/deadbeef.SAVE
_BK_FAKE_HASH=deadbeef bk get $Q -Gjunk fake_hash > OUT 2>&1 && {
	fail should have failed
}
test -w fake_hash && {
	ls -l fake_hash > ERR
	fail -f ERR should not have changed modes on fake_hash
}
test -f junk && fail should not have left junk
mv BitKeeper/BAM/$RK/de/deadbeef.SAVE BitKeeper/BAM/$RK/de/deadbeef.d1
echo OK

echo $N Same data should just get added to the same BAM file ........$NL
cp "$DATA" data4
_BK_FAKE_HASH=deadbeef bk new $Q data4
test -f BitKeeper/BAM/de/deadbeef.d2 && {
	ls -lR BitKeeper/BAM > ERR
	fail -f ERR
}
echo OK

echo $N Clean the file, check it out, make sure that worked .........$NL
bk clean fake_hash || fail clean failed
test -f fake_hash && fail clean failed to remove
_BK_FAKE_HASH=deadbeef bk co $Q fake_hash || fail co failed
cmp -s "$DATA" fake_hash || fail cmp failed
echo OK

echo $N Test for already gotting that get -S works ..................$NL
_BK_FAKE_HASH=deadbeef bk co $Q -S fake_hash || fail co failed
echo OK

echo $N Commit, check that the keys are BAM .........................$NL
bk commit $Q -ywhatever || fail
bk co $Q ChangeSet || fail
awk -F'|' '$2 == "data" && $5 ~ /^B:/ { print; }' < ChangeSet > OUT
test -s OUT || fail
echo OK

echo $N Make a patch, check for BAM data ............................$NL
find BitKeeper/BAM -type f | bk sort > "$HERE"/WANT
bk makepatch -B -r1.0.. > "$HERE"/ALL
grep -q '== @SFIO@ ==' "$HERE"/ALL || fail no sfio marker
echo OK


echo $N Take the patch and check for BAM data .......................$NL
mkdir "$HERE"/new
cd "$HERE"/new
_BK_ALLOW_BAD_CRC=YES bk takepatch -ivv < "$HERE"/ALL > "$HERE"/OUT 2>&1 || {
	fail -f "$HERE"/OUT
}
test -d BitKeeper/BAM || fail Should have made BAM dir
find BitKeeper/BAM -type f | bk sort > "$HERE"/GOT
cmpfiles "$HERE"/WANT "$HERE"/GOT
echo OK

echo $N Make sure that gets in RESYNC get from RESYNC ...............$NL
cd RESYNC
bk _get $Q -r1.1 data
test -f data || fail did not get data
cmp -s "$DATA" data || {
	cmp  "$DATA" data > ERR
	ls -l "$DATA" data >> ERR
	fail -f ERR wrong data
}
_BK_FAKE_HASH=deadbeef bk get $Q fake_hash
test -f fake_hash || fail did not get data
cmp -s "$DATA" fake_hash || {
	cmp  "$DATA" data > ERR
	ls -l "$DATA" data BitKeeper/BAM/$RK/de/deadbeef.d1 >> ERR
	fail -f ERR wrong data
}
echo OK
# cat BitKeeper/BAM/de/deadbeef.a1

echo $N Take the patch and try to resolve it ........................$NL
mkdir "$HERE"/new2
cd "$HERE"/new2
_BK_ALLOW_BAD_CRC=YES bk takepatch -ivva < "$HERE"/ALL > "$HERE"/OUT 2>&1 || {
	fail -f "$HERE"/OUT
}
# cat "$HERE"/OUT
find BitKeeper/BAM -type f | bk sort > "$HERE"/GOT
cmpfiles "$HERE"/WANT "$HERE"/GOT
echo OK

echo $N Run resolve and make sure it applies the data ...............$NL
cd "$HERE"/new
echo q | _BK_NEWPROJECT=YES bk resolve > OUT 2>&1
test -d RESYNC && fail -f OUT
find BitKeeper/BAM -type f | bk sort > "$HERE"/GOT
cmpfiles "$HERE"/WANT "$HERE"/GOT
echo OK

echo $N Test pull to see that it sends BAM data .....................$NL
cd "$HERE"
_BK_ALLOW_BAD_CRC=YES bk clone $Q -r1.1 project pull || fail
cd pull
test -d BitKeeper/BAM && fail should have no BAM dir
_BK_ALLOW_BAD_CRC=YES bk pull $Q || fail
find BitKeeper/BAM -type f | bk sort > "$HERE"/GOT
cmpfiles "$HERE"/WANT "$HERE"/GOT
echo OK

echo $N Make sure clone sends BAM data ..............................$NL
cd "$HERE"
_BK_ALLOW_BAD_CRC=YES bk clone $Q project clone || fail
cd clone
test -d BitKeeper/BAM || fail no BAM dir
find BitKeeper/BAM -type f | bk sort > "$HERE"/GOT
cmpfiles "$HERE"/WANT "$HERE"/GOT
echo OK

echo $N Test a ul merge .............................................$NL
for i in project clone
do	cd "$HERE"/$i
	bk edit $Q data
	echo $i >> data
	bk delta $Q -y$i data
	bk commit $Q -y$i
done
cd "$HERE"/clone
BEFORE=`find BitKeeper/BAM -type f -print | wc -l`
( echo ul; echo Use local version; echo .; echo q) | bk pull $Q >OUT 2>&1 || {
	fail -f OUT
}
test -d RESYNC && fail
AFTER=`find BitKeeper/BAM -type f -print | wc -l`
# We should have one extra d
test $BEFORE -eq `expr $AFTER - 1` || fail $BEFORE $AFTER
echo OK

echo $N Test unpull .................................................$NL
bk unpull -f $Q || fail
bk co $Q data
test `wc -c < BitKeeper/tmp/unpull.patch` -gt `wc -c < data` || {
	fail Patch is too small, must not contain BAM data
}
test -d RESYNC && fail left RESYNC behind
echo OK

echo $N Test a manual merge .........................................$NL
( echo '!cat $BK_LOCAL $BK_REMOTE > $BK_MERGE'
  echo C
  echo use both
  echo .
  echo q
) | bk pull $Q >OUT 2>&1 || fail -f OUT
test -d RESYNC && fail
AFTER=`find BitKeeper/BAM -type f -print | wc -l`
# We should have two extra d
test $BEFORE -eq `expr $AFTER - 2` || fail $BEFORE $AFTER
echo OK

echo $N See if we can fetch remote BAM data with get ................$NL
cd "$HERE"/project
bk commit -ywhatever $Q
cd "$HERE"
_BK_ALLOW_BAD_CRC=YES bk clone $Q project remote
cd remote
rm -rf BitKeeper/BAM
bk bam server $Q ../project || fail
bk get $Q data || fail get failed
test -d BitKeeper/BAM || fail failed to create BitKeeper/BAM
test -f data || fail bk get succeeded but no data
echo OK

echo $N See if we can fetch remote BAM data with get in subdir ......$NL
cd "$HERE"/remote
rm -rf BitKeeper/BAM
cd subdir
bk get $Q data3 || fail get failed
test -d ../BitKeeper/BAM || fail failed to create BitKeeper/BAM
test -f data3 || fail bk get succeeded but no data
echo OK

echo $N See if we can fetch remote BAM data with bk -r get ..........$NL
cd "$HERE"/remote
rm -rf BitKeeper/BAM
_BK_ALLOW_BAD_CRC=YES \
 bk -r get -F $Q || fail
test -d BitKeeper/BAM || fail failed to create BitKeeper/BAM
test -f data || fail bk get succeeded but no data
test -f fake_hash || fail bk get succeeded but no fake_hash
echo OK

echo $N Test get/clean cycle ........................................$NL
for i in 1 2 3
do	bk clean data 
	test -f data && fail failed to clean $i
	bk get $Q data
	test -f data || fail failed to get $i
	test -w data && fail failed to get ${i} RO
	bk clean data
	test -f data && fail failed to clean ${i}B
	bk edit $Q data
	test -f data || fail failed to get ${i}B
	test -w data || fail failed to edit ${i}B
done
echo OK

echo $N Test remote push to remote server ...........................$NL
cd "$HERE"
bk bkd -q -d -aPORT -ikill > BKD 2>&1 || fail
P=`cat PORT`
commercial servmaster
bk bam server $Q ../project || fail
bk commit $Q -ysetup
cd ..
bk clone $Q bk://localhost:$P/servmaster someclient || fail
cd someclient || {
	bk _kill bk://localhost:$P
	fail failed no copy
}
echo foo > binfile
bk new $Q -b binfile || fail
bk commit $Q -ybinfile || fail
bk push $Q || {
	bk _kill bk://localhost:$P
	fail
}
echo OK

echo $N Test rclone of binpool master ...............................$NL
cd ../servmaster
bk -r check -aB || {
	bk _kill bk://localhost:$P
	fail
}
bk bam server $Q . || {
	bk _kill bk://localhost:$P
	fail bam server failed
}
bk clone $Q . bk://localhost:$P/servmaster.copy 2>ERR && {
	bk _kill bk://localhost:$P
	fail -f ERR should have failed
}
test -d ../servmaster.copy && {
	bk _kill bk://localhost:$P
	fail should not have left directory
}
grep -q "clone: when cloning a BAM server -B<url> is required." ERR || {
	fail -f ERR bad error message
}
echo OK


echo $N Test rclone -Bjunk ..........................................$NL
cd ../project
bk clone $Q -Bjunk . bk://localhost:$P/servmaster.copy 2>ERR && {
	bk _kill bk://localhost:$P
	fail -f ERR echo should have failed
}
test -d ../servmaster.copy && {
	bk _kill bk://localhost:$P
	fail should not have left directory
}
grep -q "unable to contact BAM server 'junk'" ERR || fail -f ERR bad error msg
echo OK

bk _kill bk://localhost:$P

echo $N Test clone -Bjunk ...........................................$NL
cd "$HERE"
bk clone $Q -Bjunk project test1 2>ERR && fail -f ERR echo should have failed
test -d test1 && fail should not have left directory
grep -q "clone: unable to get id from BAM server 'junk'" ERR || {
	fail -f ERR bad error message
}
echo OK

# This test skipped on windows because I can't figure out how to make a file
# unreadable.  Oy.
#
test "$PLATFORM" != "WIN32" && {

echo $N Test that we do not go remote for errors in the cache .......$NL
cd "$HERE"/remote
bk _find BitKeeper/BAM -type f -name '*.d1' | while read x
do	 chmod 0 $x
done
rm -f data
BK_SHOWPROC="$HERE"/log bk get $Q data > OUT 2>&1 && {
	cat "$HERE"/log > ERR
	cat OUT >> ERR
	ls -lR BitKeeper/BAM >> ERR
	fail -f ERR should have failed
}
grep -q sfio "$HERE"/log && {
	cat "$HERE"/log > ERR
	cat OUT >> ERR
	fail -f ERR should not have run sfio
}
test -f data && fail -f OUT should not have gotten data
bk _find BitKeeper/BAM -type f -name '*.d1' | while read x
do	 chmod 444 $x
done
echo OK

} # end of if-not-windows block

## HARDLINK tests -- do they work, get permissions and timestamps right?
## XXX put tests here or distribute t.permissions and t.timestamp ?

echo $N Test get/clean cycle with hardlinks .........................$NL
cd "$HERE"/remote
for i in 1 2 3
do	BK_CONFIG='BAM_hardlinks:yes' bk clean data 
	test -f data && fail failed to clean $i
	BK_CONFIG='BAM_hardlinks:yes' bk get $Q data
	test -f data || fail failed to get $i
	test -w data && fail failed to get ${i} RO
	BK_CONFIG='BAM_hardlinks:yes' bk clean data
	test -f data && fail failed to clean ${i}B
	BK_CONFIG='BAM_hardlinks:yes' bk edit $Q data
	test -f data || fail failed to get ${i}B
	test -w data || fail failed to edit ${i}B
done
echo OK

echo $N Test that get does not hardlink without BAM_hardlinks .......$NL
cd "$HERE"/project
bk -r clean
test -f data && fail failed to clean
bk get $Q data || fail
test `linkcount data` = 1 || {
	ls -l data > ERR
	fail -f ERR
}
echo OK

echo $N Test that get hardlinks if BAM_hardlinks is set .............$NL
cd "$HERE"/project
bk -r clean
test -f data && fail failed to clean
BK_CONFIG='BAM_hardlinks:yes' bk get $Q data || fail
test `linkcount data` = 2 || {
	ls -l data > ERR
	echo links is `linkcount data` >> ERR
	bk _stat data >> ERR
	fail -f ERR
}
echo OK

echo $N Test that edit does not hardlink ............................$NL
cd "$HERE"/project
bk clean data
test -f data && fail failed to clean
bk edit $Q data || fail
test `linkcount data` = 1 || {
	ls -l data > ERR
	fail -f ERR
}
echo OK

echo $N Test that edit does not hardlink with BAM_hardlinks set .....$NL
cd "$HERE"/project
bk clean data
test -f data && fail failed to clean
BK_CONFIG='BAM_hardlinks:yes' bk edit $Q data || fail
test `linkcount data` = 1 || {
	ls -l data > ERR
	fail -f ERR
}
echo OK

# Windows won't let me turn off execute bits
test $PLATFORM != WIN32 && {
# Fall through with 'data' in edit state to ..
echo $N Test that hardlinking does not alter permissions ............$NL
test -f data || fail expected data from last test
test -x data && {
	ls -l data > ERR
	fail -f ERR expected data with no execute
}
cp data prog
chmod +x prog
test -x prog || fail expected prog with execute
bk new $Q -b prog
bk clean data prog
BK_CONFIG='BAM_hardlinks:yes' bk get $Q data prog || fail
DLINK=`linkcount data`
PLINK=`linkcount prog`
test `expr $DLINK + $PLINK` -le 2 && {
	ls -l data prog > ERR
	fail -f ERR failed - no hardlinks
}
test -x data && fail expected data with no execute
test -x prog || fail expected prog with execute
echo OK

echo $N Test that chmod +x works with hardlinks .....................$NL
TIP=`bk prs -r+ -hnd:I: data`
BK_CONFIG='BAM_hardlinks:yes' bk get $Q data
mv data data-old
bk chmod ugo+x data
BK_CONFIG='BAM_hardlinks:yes' bk get $Q data
mv data data-new
OLINK=`linkcount data-old`
NLINK=`linkcount data-new`
test `expr $OLINK + $NLINK` -le 2 && {
	# ls -l data-old data-new
	ls -l > ERR
	fail -f ERR failed - no hardlinks
}
test -x data-old && fail expected data with no execute
test -x data-new || fail expected prog with execute
echo OK
}

echo $N Test undo with many renames .................................$NL
cd "$HERE"/project 
for i in 0 1 2 3 4 5 6 7 8 9
do
    for j in 0 1 2 3 4 5 6 7 8 9
    do
	file=$i$j
	touch $file
	bk new $Q $file
    done
done
bk commit $Q -f -y"Added a hundred files"
for i in 0 1 2 3 4 5 6 7 8 9
do
    for j in 0 1 2 3 4 5 6 7 8 9
    do
	file=$i$j
	bk mv $file new-$file
    done
done
bk commit $Q -f -y"Moved a hundred files"
bk undo $Q -f -r+ 2>ERR || fail -f ERR
echo OK

