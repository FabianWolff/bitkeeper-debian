# Copyright 2007,2009-2010,2014-2015 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

BK_NO_HARDLINK_CLONE=1
export BK_NO_HARDLINK_CLONE

echo $N Set up a repo with some binary data .........................$NL
commercial project
BK="`bk bin`/bk"
test $PLATFORM = WIN32 && BK=${BK}.exe
DATA="$HERE"/data
perl -e 'sysread(STDIN, $buf, 81920);
syswrite(STDOUT, $buf, 81920);' < $BK > "$DATA"
cp "$DATA" data
bk new $Q data || fail
test -d BitKeeper/BAM || fail
bk commit $Q -ywhatever
cp "$DATA" moredata
echo foo >> moredata
bk new $Q moredata || fail
bk commit $Q -ywhatever
echo OK

echo $N clone should replicate the BAM data .........................$NL
cd "$HERE"
bk clone $Q project clone
cd clone
(cd ../project && find BitKeeper/BAM -type f -print ) |
while read x
do	test -f $x || echo $x is missing
done > OUT 2>&1
test -f BitKeeper/log/BAM || echo BitKeeper/log/BAM >> OUT
test -s OUT && fail -f OUT
echo OK

echo $N Check that clone -r replicates only needed BAM data .........$NL
cd "$HERE"
bk clone $Q -r1.2 project clone-r
ALL=`find project/BitKeeper/BAM -type f -print | wc -l`
WANT=`expr $ALL - 1`
GOT=`find clone-r/BitKeeper/BAM -type f -print | wc -l`
test $WANT -eq $GOT || fail wrong answer
echo OK

echo $N lclone should replicate the BAM data ........................$NL
cd "$HERE"
bk clone $Q -l project lclone
cd lclone
(cd ../project && find BitKeeper/BAM -type f -print ) |
while read x
do	test -f $x || echo $x is missing
done > OUT 2>&1
test -f BitKeeper/log/BAM || echo BitKeeper/log/BAM >> OUT
test -s OUT && fail -f OUT
echo OK

echo $N Check that pull brings needed BAM data ......................$NL
cd "$HERE"
bk clone $Q -r1.1 project pull
test -d pull/BitKeeper/BAM && fail should not have BAM directory yet
cd pull
bk pull $Q
(cd ../project && find BitKeeper/BAM -type f -print ) |
while read x
do	test -f $x || echo $x is missing
done > OUT 2>&1
test -f BitKeeper/log/BAM || echo BitKeeper/log/BAM >> OUT
test -s OUT && fail -f OUT
echo OK

echo $N Check that push sends needed BAM data .......................$NL
cd "$HERE"
bk clone $Q -r1.1 project push
test -d push/BitKeeper/BAM && fail should not have BAM directory yet
cd project
bk push $Q ../push
cd ../push
(cd ../project && find BitKeeper/BAM -type f -print ) |
while read x
do	test -f $x || echo $x is missing
done > OUT 2>&1
test -f BitKeeper/log/BAM || echo BitKeeper/log/BAM >> OUT
test -s OUT && fail -f OUT
echo OK

echo $N Check that rclone sends needed BAM data .....................$NL
cd "$HERE"
bk bkd -d -aPORT -ikill -l"$HERE/XXX" || fail
P=`cat PORT`
bk clone $Q project bk://localhost:$P/rclone
bk _kill bk://localhost:$P || fail
cd rclone
(cd ../project && find BitKeeper/BAM -type f -print ) |
while read x
do	test -f $x || echo $x is missing
done > OUT 2>&1
test -f BitKeeper/log/BAM || echo BitKeeper/log/BAM >> OUT
test -s OUT && fail -f OUT
echo OK

echo $N Check pushing a BAM file into repo with no BAM ..............$NL
cd "$HERE"
commercial project2
cd ..
bk clone $Q project2 push2
bk clone $Q project2 pull2
cd project2
# make BAM file
echo foo > foo
bk new $Q -b foo
bk commit $Q -yfoo
bk push $Q ../push2 || fail
cd ../push2 || fail
test -d BitKeeper/BAM || fail
echo OK

echo $N Check pulling a BAM file in repo with no BAM ................$NL
cd "$HERE/pull2"
bk pull $Q || fail
bk get $Q foo || fail
echo OK

echo $N Check pushing a BAM file in repo with BAM ...................$NL
cd "$HERE"
bk clone $Q project2 pushbam
bk clone $Q project2 pullbam
cd project2
# make BAM file
bk edit $Q foo
echo more data > foo
bk delta $Q -ymore foo
bk commit $Q -ymore
bk push $Q ../pushbam || fail
cd ../pushbam || fail
bk get $Q foo || fail
echo OK

echo $N Check pulling a BAM file in repo with BAM ...................$NL
cd "$HERE/pullbam"
bk pull $Q || fail
bk get $Q foo || fail
echo OK

echo $N Check pushing a corrupt BAM file into repo with no BAM ......$NL
cd "$HERE"
commercial project2_corrupt
cd ..
bk clone $Q project2_corrupt push_corrupt
bk clone $Q project2_corrupt pull_corrupt
cd project2_corrupt
# make BAM file
echo foo > foo
bk new $Q -b foo
bk commit $Q -yfoo
FOOPATH=`find BitKeeper/BAM -type f | grep -v index`
chmod +w "$FOOPATH"
cp "$FOOPATH" "$HERE/backupbam"
echo boo1 > "$FOOPATH"
chmod -w "$FOOPATH"
bk push $Q ../push_corrupt 2>ERR && fail should have failed
grep -q "Checksum mismatch" ERR || fail
# XXX: the push creates unused directories BAM/03/, so skip test
# cd ../push_corrupt || fail
# test -d BitKeeper/BAM && fail
echo OK

echo $N Check that we did not leave remote locked ...................$NL
cd "$HERE/push_corrupt"
test -d RESYNC && fail failed to clean up RESYNC
bk -r check -acc || fail check failed
echo OK

# The error here is that we failed in the BAM get but the new cset data
# that has pointers to the non-gotten data is present.  What this should
# do is leave the repo locked with the error messag.
echo $N Check pulling a corrupt BAM file into repo with no BAM ......$NL
cd "$HERE/pull_corrupt"
bk pull $Q 2> ERR && fail
grep -q "Checksum mismatch" ERR || fail -f ERR bad errors
test -d RESYNC && fail
bk -r check -acB || fail failed to pass check
echo OK

echo $N Check pushing a corrupt BAM file into repo with BAM .........$NL
cd "$HERE/project2_corrupt"
chmod +w "$FOOPATH"
cp "$HERE/backupbam" "$FOOPATH"
chmod -w "$FOOPATH"
cd ..
bk clone $Q project2_corrupt pushbam_corrupt
bk clone $Q project2_corrupt pullbam_corrupt
cd project2_corrupt
# make BAM file
bk edit $Q foo
echo bar > foo
bk delta $Q -ybar foo
bk commit $Q -ybar
FOOPATH=`find BitKeeper/BAM -type f | grep -v index | grep -v "$FOOPATH"`
chmod +w "$FOOPATH"
echo boo2 > "$FOOPATH"
chmod -w "$FOOPATH"
bk bam check 2> ERR && fail
bk push $Q ../pushbam_corrupt 2> ERR && fail should have failed
grep -q "Checksum mismatch" ERR || fail
echo OK

echo $N Check pulling a corrupt BAM file into repo with BAM .........$NL
cd "$HERE/pullbam_corrupt"
bk pull $Q 2> ERR && fail
grep -q "Checksum mismatch" ERR || fail
test -d RESYNC && fail
bk -r check -acB || fail failed to pass check
echo OK

echo $N Check cloning a repo with a corrupt BAM file ................$NL
cd "$HERE"
bk clone $Q project2_corrupt clone_corrupt 2> ERR && fail clone worked
grep -q "Checksum mismatch" ERR || fail
# XXX repo is there and passes check, but has no BAM data
# cd clone_corrupt || fail
# bk get $Q || fail
echo OK

echo $N Check rcloning a repo with a corrupt BAM file ...............$NL
cd "$HERE"
bk bkd -d -aPORT -ikill -l"$HERE/XXX" || fail
P=`cat PORT`
bk clone $Q project2_corrupt bk://localhost:$P/rclone_corrupt 2> ERR
RC=$?
bk _kill bk://localhost:$P || 
test $RC -ne 0 || fail
grep -q "Checksum mismatch" ERR || fail
# XXX repo is there and passes check, but has no BAM data
# cd rclone_corrupt || fail
# bk get $Q || fail
echo OK

echo $N Check a repo with a missing BAM file ........................$NL
cd "$HERE"
bk clone $Q project2 project2_missing
cd project2_missing
bk _find BitKeeper/BAM -type f > LIST
bk edit $Q foo
echo missing > foo
bk delta $Q -ymissing foo
bk commit $Q -ymissing
MISSING=`bk _find BitKeeper/BAM -type f | grep -vf LIST`
test -f "$MISSING" || fail no bam file to delete $MISSING
rm -f "$MISSING" || fail
bk -r check 2> ERR && fail passed check
grep -q "Failed to locate BAM data for the following deltas" ERR || {
	fail -f ERR wrong message
}
echo OK

echo $N Check pushing a repo with a missing BAM file ................$NL
cd "$HERE"
bk clone $Q project2 push_missing
cd project2_missing
bk push $Q ../push_missing 2> ERR && fail pushed passed
grep -q "Incomplete archive" ERR || fail -f ERR wrong msg
echo OK

echo $N Check pulling a repo with a missing BAM file ................$NL
cd "$HERE"
bk clone $Q project2 pull_missing
cd pull_missing
bk pull $Q ../project2_missing 2> ERR && fail pulled passed
grep -q "Incomplete archive" ERR || fail -f ERR wrong msg
echo OK

echo $N Check cloning a repo with a missing BAM file ................$NL
cd "$HERE"
bk clone $Q project2_missing clone_missing 2> ERR && fail
grep -q "Incomplete archive" ERR || fail -f ERR wrong msg
cd clone_missing || fail
test -d RESYNC || fail
bk -r check 2> ERR && fail passed check
grep -q "Failed to locate BAM data for the following deltas" ERR || {
	fail -f ERR wrong message
}
echo OK

echo $N Check rcloning a repo with a missing BAM file ...............$NL
cd "$HERE"
bk bkd -d -aPORT -ikill -l"$HERE/XXX" || fail
P=`cat PORT`
bk clone $Q project2_missing bk://localhost:$P/rclone_missing 2> ERR
RC=$?
bk _kill bk://localhost:$P || fail
test $RC -ne 0 || fail
grep -q "Incomplete archive" ERR || fail -f ERR wrong msg
cd rclone_missing || fail
# XXX: rclone doesn't check run_check()
test -d RESYNC && fail fix test
bk -r check 2> ERR && fail passed check
grep -q "Failed to locate BAM data for the following deltas" ERR || {
	fail -f ERR wrong message
}
echo OK
