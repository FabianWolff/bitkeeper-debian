# Copyright 2004,2007 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

test -d "$HERE/home" || mkdir "$HERE/home"
export BK_TEST_HOME="$HERE/home"
OUT="$HERE/out"

echo $N Display simple message.......................................$NL
bk guitest msgtool "Hello, World" >"$OUT" 2>&1 <<'EOF'
    global widgets
    set actual [string trim [$widgets(text) get 1.0 end-1c]]
    set expected "Hello, World"
    if {$expected != $actual} {
	puts "unexpected text: '$actual'"
    }
    set visibleButtons [llength [pack slaves $widgets(buttonFrame)]]
    if {$visibleButtons != 1} {
	puts "Found $visibleButtons buttons, expected 1"
    }
    set actual [$widgets(yes) cget -text]
    set expected OK
    if {$actual != $expected} {
	puts "Wrong button label; expected '$expected', got '$actual'"
    }
    exit 0
EOF
if [ -s "$OUT" ] ; then
    echo failed $err
    echo "unexpected output:"
    cat "$OUT"
    exit 1 
fi
echo OK

echo $N Multiple buttons, custom labels with spaces..................$NL
bk guitest msgtool -Y "Of Course" -N "No Way" "Foo" >"$OUT" 2>&1 <<'EOF'
    set visibleButtons [llength [pack slaves $widgets(buttonFrame)]]
    if {$visibleButtons != 2} {
	puts "Found $visibleButtons buttons, expected 2"
    }
    set actual [$widgets(yes) cget -text]
    set expected "Of Course"
    if {$actual ne $expected} {
	puts "Wrong button label; expected '$expected' got '$actual'"
    }
    set actual [$widgets(no) cget -text]
    set expected "No Way"
    if {$actual ne $expected} {
	puts "Wrong button label; expected '$expected' got '$actual'"
    }
    exit 0
EOF
echo OK

echo $N Exit status of Yes...........................................$NL
bk guitest msgtool -Y "Yes" -N "No" "Foo" >"$OUT" 2>&1 <<'EOF'
    test_buttonPress Yes
    test_die 99
EOF
err=$?
if [ $err -ne 0 ]; then echo failed; echo "exited $err expected 0"; exit 1; fi
echo OK

echo $N Exit status of No............................................$NL
bk guitest msgtool -Y "Yes" -N "No" "Foo" >"$OUT" 2>&1 <<'EOF'
    test_buttonPress No
    test_die 99
EOF
err=$?
if [ $err -ne 1 ]; then echo failed; echo "exited $err expected 1"; exit 1; fi
echo OK

echo $N Window title.................................................$NL
bk guitest msgtool -T "The Title" "Foo" >"$OUT" 2>&1 <<'EOF'
    set actual [wm title .]
    set expected "The Title"
    if {$actual ne $expected} {
    puts "expected: '$expected' got: '$actual'"
    }
    exit 0
EOF
test -s "$OUT" && { echo failed; cat "$OUT"; exit 1; }
echo OK

echo $N Window title, -E.............................................$NL
bk guitest msgtool -E -T "The Title" "Foo" >"$OUT" 2>&1 <<'EOF'
    set actual [wm title .]
    set expected "ERROR: The Title"
    if {$actual ne $expected} {
        puts "expected: '$expected' got: '$actual'"
    }
    exit 0
EOF
test -s "$OUT" && { echo failed; cat "$OUT"; exit 1; }
echo OK

echo $N Window title, -W.............................................$NL
bk guitest msgtool -W -T "The Title" "Foo" >"$OUT" 2>&1 <<'EOF'
    set actual [wm title .]
    set expected "WARNING: The Title"
    if {$actual ne $expected} {
        puts "expected: '$expected' got: '$actual'"
    }
exit 0
EOF
test -s "$OUT" && { echo failed; cat "$OUT"; exit 1; }
echo OK

echo $N Window title, -I.............................................$NL
bk guitest msgtool -I -T "The Title" "Foo" >"$OUT" 2>&1 <<'EOF'
    set actual [wm title .]
    set expected "INFO: The Title"
    if {$actual ne $expected} {
        puts "expected: '$expected' got: '$actual'"
    }
    exit 0
EOF
test -s "$OUT" && { echo failed; cat "$OUT"; exit 1; }
echo OK

echo $N Option -P: Message from command .............................$NL
bk guitest msgtool -P 'bk version' >"$OUT" 2>&1 <<'EOF'
    global widgets
    set actual [string trim [$widgets(text) get 1.0 end-1c]]
    set expected [string trim [exec bk version]]
    if {$actual ne $expected} {
        puts "expected: '$expected' got: '$actual'"
    }
    exit 0
EOF
test -s "$OUT" && { echo failed; cat "$OUT"; exit 1; }
echo OK

echo $N Option -F: Message from file.................................$NL
echo "From File" > message
bk guitest msgtool -F message >"$OUT" 2>&1 <<'EOF'
    global widgets
    set actual [string trim [$widgets(text) get 1.0 end-1c]]
    set expected "From File"
    if {$actual ne $expected} {
        puts "expected: '$expected' got: '$actual'"
    }
    exit 0
EOF
test -s "$OUT" && { echo failed; cat "$OUT"; exit 1; }
echo OK



