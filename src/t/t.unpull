# Copyright 2000,2005-2006,2009,2014-2015 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Test unpull:
# 1) create a tree, clone it, pull a new file, unpull and check that it's gone
# 2) do a pull with an automerge delta, unpull, make sure that both are gone
# 3) pull, add a cset, make sure unpull fails
# 4) undo the locally added cset, unpull again, should succeed
# 5) pull with a new file, local repo has same new file committed, resolve,
#    unpull, make sure that new file is gone
# 6) pull with a new file, local repo has same new file uncommitted, resolve,
#    unpull, make sure that new file is gone
echo $N Setup test case .............................................$NL
commercial project
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if bk _test ! -f SCCS/s.ChangeSet; then echo failed to make ChangeSet; exit 1; fi
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo files are pending; bk pending; exit 1; fi
echo bar > bar.c
bk ci $Q -i bar.c 
bk commit $S -yCset
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo failed to clear pending list; bk pending; exit 1; fi
cd "$HERE"
bk clone $Q "$HERE/project" "$HERE/copy" || { echo failed; exit 1; }
test -f copy/BitKeeper/log/parent || { echo no parent; exit 1; }
echo OK

echo $N Pull new file, unpull, make sure it is gone .................$NL
cd "$HERE/project"
echo foo > foo.c
bk ci $Q -i foo.c 
bk edit $Q bar.c
bk delta $Q -fynull bar.c
bk commit $S -yCset
cd "$HERE/copy"
bk pull $Q || fail
bk _test -f SCCS/s.foo.c || { echo no foo.c; exit 1; }
bk unpull -f $Q || fail
bk _test -f SCCS/s.foo.c && { echo failed to remove foo.c; exit 1; }
bk _scat SCCS/s.bar.c | grep -q 'D 1.2' && {
	echo failed to remove 1.2 delta in bar.c
	exit 1
}
echo OK

echo $N Check that the unpull prompt works ..........................$NL
bk pull $Q || fail
bk _test -f SCCS/s.foo.c || { echo no foo.c; exit 1; }
echo n | bk unpull $Q > OUT && fail
bk _test -f SCCS/s.foo.c || fail
echo y | bk unpull $Q > OUT || fail
bk _test -f SCCS/s.foo.c && { echo failed to remove foo.c; exit 1; }
bk _scat SCCS/s.bar.c | grep -q 'D 1.2' && {
	echo failed to remove 1.2 delta in bar.c
	exit 1
}
echo OK

echo $N Pull with automerge, unpull, make sure both are gone ........$NL
cd "$HERE/copy"
echo snafu > snafu.c
bk ci $Q -i snafu.c 
bk commit $S -yCset
bk pull $Q || fail
bk _test -f SCCS/s.foo.c || { echo no foo.c; exit 1; }
bk unpull -f $Q || fail
bk _test -f SCCS/s.foo.c && { echo failed to remove foo.c; exit 1; }
bk _scat SCCS/s.bar.c | grep -q 'D 1.2' && {
	echo failed to remove 1.2 delta in bar.c
	exit 1
}
bk _test -f SCCS/s.snafu.c || { echo snafu.c got removed; exit 1; }
bk -r check -ac || fail
echo OK

# 3) pull, add a cset, make sure unpull fails
echo $N Pull, add local cset, unpull should fail ....................$NL
cd "$HERE/copy"
bk pull $Q || fail
bk _test -f SCCS/s.foo.c || { echo no foo.c; exit 1; }
bk edit $Q snafu.c
bk delta $Q -fynull snafu.c
bk commit $Q -yhoho
bk unpull -f $Q 2> OUT && {
	echo unpull should have failed
	exit 1
}
grep -q 'unpull: will not unpull local changeset 1.5' OUT || {
	echo bad error message
	cat OUT
}
echo OK

# 4) undo the locally added cset, unpull again, should fail, csets-in gone
echo $N Undo locally added cset, try unpull, should fail ............$NL
test -f BitKeeper/etc/csets-in || fail
bk undo $Q -fr+ || fail
test -f BitKeeper/etc/csets-in && fail
bk unpull -f $Q > OUT 2>&1 && {
	echo should not have worked
	cat OUT
	exit 1
}
echo OK

# 5) pull with a new file, local repo has same new file committed, resolve,
#    unpull, make sure that new file is gone
echo $N Pull new file with local conflict, then unpull ..............$NL
cd "$HERE"
commercial project2
cd ..
bk clone $Q project2 copy2 || fail
cd project2
echo from project2 >file
bk new $Q file || fail
bk commit $Q -y'add file' || fail
cd ../copy2
echo from copy2 >file
bk new $Q file || fail
bk commit $Q -y'add file' || fail
bk pull $Q -R ../project2 || fail
# rl is to remove local file.
bk resolve -a $Q <<EOF > OUT 2>&1 || fail
rl
y
EOF
bk changes -fr1.2,1.3 -nd:KEY: > WANT || fail
cmpfiles WANT BitKeeper/etc/csets-in
test "`bk log -r1.3 -nd:MERGE:`" = "1.3" || fail
bk cat file | grep -q 'from project2' || fail
bk unpull -f $Q || fail
test `bk changes -r+ -nd:REV:` = 1.2 || fail
bk cat file | grep -q 'from copy2' || fail
cd "$HERE"
rm -rf project2 copy2
echo OK

# 6) pull with a new file, local repo has same new file uncommitted, resolve,
#    unpull, make sure that new file is gone
echo $N Pull new file with local uncommitted conflict, then unpull ..$NL
cd "$HERE"
commercial project2
cd ..
bk clone $Q project2 copy2 || fail
cd project2
echo from project2 >file
bk new $Q file || fail
bk commit $Q -y'add file' || fail
cd ../copy2
echo from copy2 >file
# Add but do not commit "file" this time.
bk new $Q file || fail
bk pull $Q -R ../project2 || fail
# rl is to remove local file.
cat <<EOF > IN
rl
y
EOF
bk resolve -a $Q < IN > OUT 2>&1 || {
	echo should have worked
	cat OUT
	exit 6
}
bk changes -fr1.2,1.3 -nd:KEY: > WANT || fail
cmpfiles WANT BitKeeper/etc/csets-in
test "`bk log -r1.3 -nd:MERGE:`" = "" || fail
bk cat file | grep -q 'from project2' || fail
bk unpull -f $Q || fail
test `bk changes -r+ -nd:REV:` = 1.1 || fail
# The local file was never committed.  Should it be there now?
# XXX figure out and enable one of these.
#bk cat file | grep -q 'from copy2' && exit 13   # no
#bk cat file | grep -q 'from copy2' || exit 13   # yes
cd "$HERE"
rm -rf project2 copy2
echo OK
