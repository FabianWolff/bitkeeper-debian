# Copyright 2009-2012,2015 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

echo $N Create an ensemble...........................................$NL
nested project
# add some files
cd "$HERE/project/gcc"
for i in 1 2 3 4 5
do
	touch file$i
	echo "stuff $i" > file$i
	bk new $Q -y"add" file$i
done
bk commit -S $Q -y"Add $i to file$i"
cd "$HERE/project" && bk commit $Q -y"Commit cset in gcc"
cd "$HERE/project/gdb"
for i in 1 2 3 4 5
do
	touch file$i
	echo "stuff $i" > file$i
	bk new $Q -y"add" file$i
	bk commit -S $Q -y"add file $i"
done
cd "$HERE/project" && bk commit $Q -y"add csets to gdb"
cd "$HERE"
commercial nm
cd "$HERE"
commercial man
cd "$HERE/project"
bk portal $Q .
bk attach --force $Q ../nm gcc/nm
bk attach --force $Q ../man man
bk alias new nm ./gcc/nm
echo OK

echo $N Check cloning -sall of a partial project works ..............$NL
cd "$HERE"
bk clone $Q -snm project proj-nm || fail
cd proj-nm
bk comps -h >GOT || fail
cat <<EOF >WANT
./gcc/nm
EOF
cmpfiles GOT WANT
cd ..
bk clone $Q -sall proj-nm nm-clone || fail
cd nm-clone
bk comps >GOT || fail
cat <<EOF >WANT
./gcc
./gcc/nm
./gdb
./man
EOF
cmpfiles GOT WANT
echo OK

echo $N Check -rOLD does not pick up new components thru alias.......$NL
cd "$HERE"/project
bk alias new gcc ./gcc ./gcc/nm
cd "$HERE"
commercial libiberty
cd "$HERE"/project
bk attach --force $Q ../libiberty gcc/libiberty
bk alias add gcc ./gcc/libiberty
cd "$HERE"
bk clone $Q -r1.8 -sgcc project proj-clone || fail
test -d proj-clone/gcc/libiberty && {
	echo failed
	exit 1
}
echo OK

echo $N Check -rOLD cannot pick up new components thru explicit ref .$NL
cd "$HERE"
rm -rf proj-clone
bk clone -q -r1.7 -s./gcc/libiberty project proj-clone 2> ERR && {
	echo should have failed
	cat ERR   
	exit 1
}
cat <<EOF > WANT
clone: ./gcc/libiberty must be either a glob, key, alias, or component.
clone: component fetch failed, only product is populated
EOF
cmpfiles ERR WANT
echo OK

#echo $N Move stuff and watch the fur fly ............................$NL
#cd "$HERE"
#bk clone $Q -sthere project mangle || fail
#(cd project; bk here) > here.project
#(cd mangle; bk here) > here.mangle
#cmpfiles here.project here.mangle
#cd mangle
#bk alias new dev ./gcc './gcc/*' gdb || fail
#bk edit $Q gcc/ChangeSet gcc/nm/ChangeSet gcc/libiberty/ChangeSet gdb/ChangeSet
#mkdir src
#mv gcc gdb src
#bk ci $Q -y'Moved' src/gcc/ChangeSet src/gcc/*/ChangeSet src/gdb/ChangeSet
#bk alias rm -C dev './gcc/*' 2> ERR
#cat <<EOF > WANTERR
#alias: idcache missing component src/gcc, fixing
#alias: idcache missing component src/gdb, fixing
#EOF
#cmpfiles WANTERR ERR
## next line fails because glob doesn't match, this test won't really work.
##bk alias add -C dev './src/gcc/*'
#bk commit $Q -y'Moved stuff' 2>ERR && fail
#cat <<EOF | sort > BAD
#check: error expanding alias 'default' because 'gcc/nm' is not present
#check: error expanding alias 'default' because 'gcc/libiberty' is not present
#check: missing components!
#EOF
#sort ERR > sort_ERR
## XXX almost...
##cmpfiles BAD sort_ERR
#echo 'failed (bug: need rename)'

# rest of test that should work someday
#cd "$HERE"
#bk clone $Q -r1.11 -sdev mangle proj-rename || fail

echo $N Create a conflict in unpopulated alias, should work .........$NL
cd "$HERE"
bk clone $Q -s./gdb project conflict
cd conflict
bk alias new CONFLICT gcc
cd ..
bk clone $Q -s./gdb conflict conflict-clone
cd conflict
bk alias add CONFLICT ./gcc/nm
cd ../conflict-clone
bk alias add CONFLICT ./gcc/libiberty
bk pull $Q || fail
bk alias -k CONFLICT > GOT
(echo ./gcc/nm; echo ./gcc/libiberty) | bk alias -ek - | sort > WANT
echo gcc >> WANT
cmpfiles GOT WANT
echo OK

echo $N Create a conflict in present alias ..........................$NL
cd "$HERE"
commercial gcov
cd "$HERE"
commercial libcpp
cd "$HERE"
rm -rf proj-clone
cd "$HERE"/project
bk alias new dev ./gcc './gcc/*' gdb
cd ..
bk clone $Q project proj-clone
cd "$HERE"/project
bk portal $Q .
bk attach --force $Q ../gcov gcc/gcov
bk alias add dev ./gcc/gcov
cd "$HERE"/proj-clone
bk portal $Q .
bk attach --force $Q ../libcpp gcc/libcpp
bk alias add dev ./gcc/libcpp
bk here add $Q dev || fail
bk pull $Q ../project || fail
bk alias -ek - <<EOF > WANT
./gcc
./gcc/gcov
./gcc/libcpp
./gcc/libiberty
./gcc/nm
./gdb
EOF
bk alias -k dev > GOT
cmpfiles WANT GOT
bk here | grep -q dev || {
	echo should have dev here
	exit 1
}
echo OK

echo $N Alias clone through bk:// ...................................$NL
cd "$HERE"
bk bkd -q -d -aPORT -ikill > "$HERE/BKD" 2>&1 || fail
P=`cat PORT`
trap "bk _kill bk://localhost:$P" 0 2
bk clone $Q -sdev bk://localhost:$P/proj-clone clone1 || {
	echo failed
	exit 1
}
bk clone $Q -sall bk://localhost:$P/clone1 clone1b || fail
cd clone1b
bk comps >GOT || fail
cat <<EOF >WANT
./gcc
./gcc/gcov
./gcc/libcpp
./gcc/libiberty
./gcc/nm
./gdb
./man
EOF
cmpfiles GOT WANT
cd ..
echo OK

echo $N Glob clone through bk:// ....................................$NL
bk clone $Q -s'./gcc/*' bk://localhost:$P/proj-clone glob1 || {
	echo failed
	exit 1
}
echo OK

echo $N Alias rclone to bk:// .......................................$NL
bk clone $Q -sdev clone1 bk://localhost:$P/clone2 || {
	echo failed 1
	exit 1
}
bk clone $Q -sall clone1 bk://localhost:$P/clone3 2> ERR && {
	echo failed 2
	cat ERR
	exit 1
}
echo OK

echo $N Glob rclone to bk:// ........................................$NL
bk clone $Q -s'./gcc/*' proj-clone bk://localhost:$P/glob2 || {
	echo failed 1
	exit 1
}
cnt=`ls -d glob2/gcc/* | wc -l`
test $cnt -eq 4 || {
	echo failed 2
	exit 1
}
echo OK

echo $N Clone deep nested globs .....................................$NL
cd "$HERE"
commercial deep
cd ../proj-clone
bk attach --force $Q ../deep gcc/libcpp/deep
cd "$HERE"
bk clone $Q -s'./gcc/*' bk://localhost:$P/proj-clone glob3 || {
	echo failed 1
	exit 1
}
test -d glob3/gcc/libcpp/deep || {
	echo failed 2
	exit 1
}
echo OK

echo $N Check relative alias of globs ...............................$NL
cd glob3/gcc || fail
cat <<EOF > ../WANT
./gcc/libcpp
./gcc/libcpp/deep
./gcc/libiberty
EOF
# simple glob in a subdir */
bk alias list -e './lib*' > GOT
cmpfiles ../WANT GOT
# leading ./ is optional (currently)
bk alias list -e 'lib*' > GOT
cmpfiles ../WANT GOT
# '..' before the globs get collapsed
bk alias list -e './libcpp/../lib*' > GOT
cmpfiles ../WANT GOT
# too many .. put us out of the repo
bk alias list -e '../../lib*' 2> ERR && fail
grep -q 'alias: glob not in this repository: ../../lib\*' ERR || fail -f ERR
# a command that works in repo root does not work in subdir
bk -P alias list -e './gcc/lib*' > GOT
cmpfiles ../WANT GOT
# .. does not work in subdir
bk alias list -e './gcc/lib*' 2> ERR && fail
grep -q 'alias: ./gcc/lib\* does not match any components' ERR || fail -f ERR
# relative works when based in another directory
mkdir ../other
cd ../other
bk alias list -e '../gcc/lib*' > GOT
cmpfiles ../WANT GOT
cd ../..
echo OK

echo $N Remove component, clone previous glob .......................$NL
# create cset in nm so it is unique and it won't get populated from
# elsewhere
cd "$HERE/glob3/gcc/nm"
echo hi > hi
bk new $Q hi || fail
bk commit -S $Q -yhi || fail
bk -P commit $Q -yhi || fail
cd "$HERE"
rm -rf glob3/gcc/nm
bk clone $Q -s'./gcc/*' bk://localhost:$P/glob3 glob4 2> ERR && {
	echo failed
	cat ERR
	exit 1
}
echo OK

echo $N Clone alias, remove globbed component, reclone ..............$NL
bk clone $Q -sdev bk://localhost:$P/proj-clone glob5 || fail
# you have to try harder than this to make it fail
rm -rf glob5/gcc/nm
rm -rf project/gcc/nm
bk clone $Q -sdev bk://localhost:$P/glob5 glob6 2>ERR || fail -f ERR
grep -q "glob5: component not present" ERR || fail -f ERR
cd glob6
bk comps -h >GOT || fail
cat <<EOF >WANT
./gcc
./gcc/gcov
./gcc/libcpp
./gcc/libiberty
./gcc/nm
./gdb
EOF
cmpfiles GOT WANT
echo OK

echo $N Test alias here .............................................$NL
cd "$HERE"
bk clone $Q bk://localhost:$P/proj-clone dash-h || {
	echo failed
	exit 1
}
cd dash-h
bk here > GOT
cat > WANT <<EOF
DEFAULT
PRODUCT
EOF
cmpfiles WANT GOT
echo OK

echo $N Test alias -he gcc ..........................................$NL
bk alias -eh gcc  > GOT || fail
cat > WANT <<EOF
./gcc
./gcc/libiberty
./gcc/nm
EOF
cmpfiles WANT GOT
echo OK

echo $N Test alias missing with missing components ..................$NL
rm -rf gcc/libcpp
bk alias -em all > GOT || fail
cat > WANT <<EOF
./gcc/libcpp
./gcc/libcpp/deep
EOF
cmpfiles WANT GOT
echo OK

echo $N Test alias missing foo with missing components ..............$NL
bk alias -em dev > GOT || fail
cat > WANT <<EOF
./gcc/libcpp
EOF
cmpfiles WANT GOT
echo OK

echo $N Test alias here foo with unrelated missing components .......$NL
bk alias -eh gcc > GOT || fail
cat > WANT <<EOF
./gcc
./gcc/libiberty
./gcc/nm
EOF
echo OK

echo $N Test alias here on recursive alias ..........................$NL
cd "$HERE"
bk clone $Q proj-clone dash-h2 || fail
cd dash-h2
# Remove old aliases
bk alias rm -C dev
bk alias rm -C gcc
bk alias rm nm
# Make new ones
bk alias new -C libcpp ./gcc/libcpp ./gcc/libcpp/deep
bk alias new -C libiberty ./gcc/libiberty
bk alias new -C nm ./gcc/nm
bk alias new -C gcc ./gcc libcpp libiberty nm
bk alias new -C dev gcc ./gdb
bk alias new enchilada_grande dev ./man
bk alias -eh enchilada_grande > GOT
cat > WANT <<EOF
./gcc
./gcc/libcpp
./gcc/libcpp/deep
./gcc/libiberty
./gcc/nm
./gdb
./man
EOF
cmpfiles WANT GOT
echo OK

echo $N Test alias here on recursive alias with a missing comp ......$NL
rm -rf gcc/libcpp/deep
bk alias -em enchilada_grande > GOT || fail
cat > WANT <<EOF
./gcc/libcpp/deep
EOF
cmpfiles WANT GOT
echo OK

echo $N Test alias cset comments describe what happened .............$NL
# Customer requested seeing what component dirs were add/rm in comment
bk here set $Q all
bk alias add $Q -C MR_ROCKET ./gcc
bk alias set $Q -C libiberty ./gcc
bk alias rm $Q libcpp ./gcc/libcpp
BK_PAGER=cat bk changes -mr1.12.. | perl -pe 's/^(ChangeSet\S+).*/$1/' > GOT
cat <<EOF > WANT
ChangeSet@1.18,
  Create alias "MR_ROCKET" containing:
  	./gcc
  Set alias "libiberty" to:
  	./gcc
  Delete from alias "libcpp":
  	./gcc/libcpp

ChangeSet@1.17,
  Create alias "libcpp" containing:
  	./gcc/libcpp
  	./gcc/libcpp/deep
  Create alias "libiberty" containing:
  	./gcc/libiberty
  Create alias "nm" containing:
  	./gcc/nm
  Create alias "gcc" containing:
  	./gcc
  	libcpp
  	libiberty
  	nm
  Create alias "dev" containing:
  	gcc
  	./gdb
  Create alias "enchilada_grande" containing:
  	dev
  	./man

ChangeSet@1.16,
  Delete alias "dev"
  Delete alias "gcc"
  Delete alias "nm"

ChangeSet@1.15,
  Attach ./gcc/libcpp/deep

ChangeSet@1.11.1.2,
  Add to alias "dev":
  	./gcc/libcpp

ChangeSet@1.11.1.1,
  Attach ./gcc/libcpp

ChangeSet@1.13,
  Add to alias "dev":
  	./gcc/gcov

EOF
cmpfiles WANT GOT
echo OK

echo $N Test rm works when pointed to a gate ........................$NL
cd "$HERE"
nested rmalias
bk gate $Q -r
bk alias add COMP ./gcc
bk clone $Q -sCOMP . ../A
bk clone $Q -sCOMP . ../B
bk gate $Q .
cd ../A
bk here check -q || fail  # go look at rmalias again (it changed)
bk alias rm $Q COMP ./gcc || fail
cd ../B
bk parent $Q -r
rm -f BitKeeper/log/urllist
# verify that the command fails running defaults
bk alias rm $Q COMP ./gcc 2> ERR && fail -f ERR
grep -q "gcc cannot be found at a gate" ERR || fail -f ERR
# now point to it
bk alias rm $Q -@../rmalias COMP ./gcc || fail
echo OK
