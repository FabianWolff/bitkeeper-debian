# Copyright 2000-2001,2006,2010,2014-2015 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e

# Test the operation of various gca operations
# These are not BK specific, per se
fresh_commercial --compat project
echo $N Create graph with some merge, -i, and -x stuff ..............$NL
echo foo > foo.c
bk ci $Q -i foo.c
if bk _test ! -f SCCS/s.foo.c; then echo failed to create history; exit 1; fi
bk _get $Q -e foo.c
bk delta $Q -fy1.2 foo.c
bk _get $Q -e foo.c
bk delta $Q -fy1.3 foo.c
bk _get $Q -e -r1.2 foo.c
bk delta $Q -fy1.2.1.1 foo.c
bk _get $Q -e foo.c
bk delta $Q -fy1.4 foo.c
bk _get $Q -e -r1.2.1 foo.c
bk delta $Q -fy1.2.1.2 foo.c
bk _get $Q -e foo.c
bk delta $Q -fy1.5 foo.c
bk _get $Q -e -r1.2.1 foo.c
bk delta $Q -fy1.2.1.3 foo.c
bk _get $Q -e -x1.2 foo.c
bk delta $Q -fy1.6 foo.c
bk _get $Q -e -x1.2 -r1.2.1 foo.c
bk delta $Q -fy1.2.1.4 foo.c
bk _get $Q -e -M1.2.1.2 foo.c
bk delta $Q -fy1.7 foo.c
bk _get $Q -e -M1.4 -r1.2.1 foo.c
bk delta $Q -fy1.2.1.5 foo.c
gca=`bk gca -r1.2.1.5 -r1.7 foo.c`
# Used to -x1.2 because both sides did; now if it isn't gca, it isn't there
# expect="1.2.1.2 -i1.3,1.4 -x1.2"
expect="1.2.1.2 -i1.3,1.4"
if [ "$gca" != "$expect" ]; then
	echo failed gca
	echo "gca gave ==> '$gca'"
	echo "expected ==> '$expect'"
	exit 1
fi
echo OK

# Do a weird graph, in the sense that it is knocking out things
# it doesn't even have.  This isn't as much a test of the set gca
# as when we _get to the merge stuff.  Need to handle this case.
echo $N Create graph with some weird pathalogical -i and -x .........$NL
echo bar > bar.c
bk ci $Q -i bar.c
if bk _test ! -f SCCS/s.bar.c; then echo failed to create history; exit 1; fi
bk _get $Q -e bar.c
bk delta $Q -fy1.2 bar.c
# make 2 new branches and include trunk 1.2 into each
bk _get $Q -e -i1.2 -r1.1 bar.c
bk delta $Q -fy1.1.1.1 bar.c
bk _get $Q -e -i1.2 -r1.1 bar.c
bk delta $Q -fy1.1.2.1 bar.c
# add to branch, excluding something from the other side
bk _get $Q -e -x1.1.2.1 -r1.1.1 bar.c
bk delta $Q -fy1.1.1.2 bar.c
bk _get $Q -e -x1.1.1.1 -r1.1.2 bar.c
bk delta $Q -fy1.1.2.2 bar.c
# do set gca to see what it says.  That's the set equiv of graph gca.
gca=`bk gca -r1.1.1.2 -r1.1.2.2 bar.c`
expect="1.1"
if [ "$gca" != "$expect" ]; then
	echo failed gca
	echo "gca gave ==> '$gca'"
	echo "expected ==> '$expect'"
	exit 1
fi
echo OK

echo $N Test gca where one is in the history of the other ...........$NL
# Reading from right to left, the trick is to color 1.1 as a parent
# before coloring 1.2 as a parent.  The old code would then call 1.1
# as a GCA.  The new code uncolors parents of 1.2, so 1.1 is not a GCA.
#
#     +----------------------1.1.1.1-+
#    /                                \
# 1.1 --- 1.2 ---- 1.3 ----------------+ 1.4--------------------+ 1.5
#    \       \                                                 /
#     \	      +--------1.2.1.1 -----------------------+ 1.2.1.2
#      \                                             /
#       +------------------------------------ 1.1.2.1
#
touch wp
bk new $Q wp
bk _get -e $Q wp
bk delta $Q -fy1.2 wp
bk _get -e $Q -r1.2 wp
bk delta $Q -fy1.3 wp
bk _get -e $Q -r1.2 wp
bk delta $Q -fy1.2.1.1 wp
bk _get -e $Q -r1.1 wp
bk delta $Q -fy1.1.1.1 wp
bk _get -e $Q -r1.1 wp
bk delta $Q -fy1.1.2.1 wp
bk _get -e $Q -r1.3 -M1.1.1.1 wp
bk delta $Q -fy1.4 wp
bk _get -e $Q -r1.2.1.1 -M1.1.2.1 wp
bk delta $Q -fy1.2.1.2 wp
bk _get -e $Q -r1.4 -M1.2.1.2 wp
bk delta $Q -fy1.5 wp
_BK_CHK_MULTI=1 bk prs -r+ -hnd:SETGCA: wp > GOT 2> ERR || fail
test -s ERR && fail -f ERR
echo 1.2 > WANT
cmpfiles WANT GOT
# Sanity check - see that _BK_CHK_MULTI=1 does list multi gca nodes
bk _get -e $Q -r1.4 -M1.2.1.2 wp
bk delta $Q -fy1.4.1.1 wp
bk _get -e $Q -r1.5 -M1.4.1.1 wp
bk delta $Q -fy1.4.1.1 wp
_BK_CHK_MULTI=1 bk prs -r+ -hnd:SETGCA: wp > GOT 2> ERR || fail
cat <<EOF > WANT
multi 1.2.1.2
multi 1.4
EOF
cmpfiles WANT ERR
echo '1.2.1.2+1.3,1.4' > WANT
cmpfiles WANT GOT
echo OK

echo $N Test lub a.k.a. findmerge....................................$NL
bk findmerge wp 2> ERR && fail -f ERR
grep -q "findmerge: must specify 2 revisions" ERR || fail -f ERR
bk findmerge -r+ wp 2> ERR && fail -f ERR
grep -q "findmerge: must specify 2 revisions" ERR || fail -f ERR
REV=`bk findmerge -r1.3 -r1.2.1.1 wp`
test $REV = 1.5 || fail expected 1.5, got $REV
REV=`bk findmerge -r1.2.1.1..1.1.2.1 wp`
test $REV = 1.2.1.2 || fail expected 1.2.1.2, got $REV
# test a case where there are multiple merges
# namely a criss-cross merge
touch xc
bk new $Q xc
bk _get -e $Q xc
bk delta $Q -fy1.2 xc
bk _get -e $Q -r1.2 xc
bk delta $Q -fy1.3 xc
bk _get -e $Q -r1.2 xc
bk delta $Q -fy1.2.1.1 xc
# merge once
bk _get -e $Q -r1.3 -M1.2.1.1 xc
bk delta $Q -fy1.3 xc
# merge twice
bk _get -e $Q -r1.3 -M1.2.1.1 xc
bk delta $Q -fy1.3.1.2 xc
# merge the merges
bk _get -e $Q -r1.4 -M1.3.1.1 xc
bk delta $Q -fy1.5 xc
REV=`bk findmerge -r1.3..1.2.1.1 xc`
test $REV = 1.4 || fail expected 1.4 got $REV
bk findmerge -a -r1.3 -r1.2.1.1 xc > GOT
cat >WANT <<EOF
1.4
1.3.1.1
EOF
cmpfiles WANT GOT
echo OK
