# Copyright 2007-2016 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# count the number of times we init the ChangeSet file for normal operations

mkBINs

BK_SHOWINIT="*/s.ChangeSet"
BK_TTYPRINTF="$HERE/INITs"
FILE="$BK_TTYPRINTF"
export BK_SHOWINIT BK_TTYPRINTF

# useful debug (uncomment to use)
#BK_SHOWPROC="$HERE/INITs"
#export BK_SHOWPROC

# Put _only_ inits in the INITs file, otherwise there could be races
check_cnt() {
	SEEN=`grep ^init "$FILE" | wc -l`
	test $SEEN -ne $CNT && {
		echo was $CNT now $SEEN
		echo list at "$FILE"
		exit 1
	}
}

CNT=4
echo $N "Count the inits for a 'bk setup' ($CNT)........................."$NL
fresh_commercial project
check_cnt
bk edit $Q BitKeeper/etc/ignore
cat <<EOF > BitKeeper/etc/ignore
2
3
EOF
bk ci -yignore1 -u $Q BitKeeper/etc/ignore
# give big set comment so the heap doesn't repack over and over
bk base64 < $BIN1 > C
bk commit $Q -YC || fail
rm -f C
bk force_repack $Q || fail
echo OK

CNT=1
echo $N "Count the inits for a 'bk clone' ($CNT)........................."$NL
rm "$FILE"
bk clone $Q ../project ../copy || fail
check_cnt
echo OK

CNT=2
echo $N "Count the inits for a 'bk commit' ($CNT)........................"$NL
echo hi > file
bk new $Q file
bk edit $Q BitKeeper/etc/ignore
cat <<EOF > BitKeeper/etc/ignore
2
3
4
EOF
bk ci -yignore2 -u $Q BitKeeper/etc/ignore
rm "$FILE"
bk commit $Q -ycommit || fail
check_cnt
echo OK

CNT=3
echo $N "Count the inits for a 'bk changes -L' ($CNT)...................."$NL
cd ../copy
rm "$FILE"
bk changes -L > OUT || fail
check_cnt
echo OK

CNT=3
echo $N "Count the inits for a 'bk changes -R' ($CNT)...................."$NL
rm "$FILE"
bk changes -R > OUT || fail
check_cnt
echo OK

CNT=13
echo $N "Count the inits for a 'bk pull' ($CNT)........................."$NL
bk edit $Q BitKeeper/etc/ignore
cat <<EOF > BitKeeper/etc/ignore
1
2
3
EOF
bk ci -yignore3 -u $Q BitKeeper/etc/ignore
bk commit $Q -yignore1 || fail
rm "$FILE"
BK_CONFIG=partial_check:off! bk pull $Q || fail
check_cnt
echo OK

CNT=9
echo $N "Count the inits for a 'bk unpull' ($CNT)........................"$NL
rm "$FILE"
bk unpull -f $Q || fail
check_cnt
echo OK

CNT=5
echo $N "Count the inits for a 'bk pull -R' ($CNT)......................."$NL
bk edit $Q BitKeeper/etc/ignore
cat <<EOF > BitKeeper/etc/ignore
1
2
3
EOF
bk ci -yignore3 -u $Q BitKeeper/etc/ignore
bk commit $Q -yignore1 || fail
rm "$FILE"
bk pull -R $Q || fail
check_cnt
echo OK

CNT=9
echo $N "Count the inits for a 'bk resolve' ($CNT)......................."$NL
rm "$FILE"
bk resolve $Q || fail
check_cnt
echo OK

CNT=9
echo $N "Count the inits for a 'bk push' ($CNT).........................."$NL
rm "$FILE"
bk push $Q || fail
check_cnt
echo OK

CNT=23
echo $N "Count the inits for a 'bk clone -@base' ($CNT) ................"$NL
echo hi > file_copy
bk new $Q file_copy
bk commit $Q -ycopy || fail
cd ../project || fail
echo hi > file_project
bk new $Q file_project
bk commit $Q -yproject || fail
bk tag $Q junk || fail
cd ..
rm "$FILE"
bk clone $Q -@project "$HERE"/copy newcopy || fail
check_cnt
echo OK

echo "---- nested tests"

CNT=9
echo $N "Count the inits for a 'bk clone' ($CNT)........................."$NL
cd "$HERE"
nested nest
# give big set comment so the heap doesn't repack over and over
bk base64 < $BIN3 > C
bk commit -YC $Q -F || fail
bk force_repack $Q || fail
bk gate $Q -r
rm "$FILE"
bk clone $Q . ../nest2 || fail
check_cnt
echo OK

CNT=2
echo $N "Count the inits for a 'bk commit' in comp ($CNT) ..............."$NL
cd gcc
echo hi > file1
bk new $Q file1
rm "$FILE"
bk commit -S $Q -ynew || fail
check_cnt
echo OK

CNT=5
echo $N "Count the inits for a 'bk -P commit' ($CNT) ...................."$NL
rm -f "$FILE"
bk -P commit $Q -ynew || fail
check_cnt
echo OK

CNT=1
echo $N "Count the inits for a 'bk -P commit' with fake pending ($CNT) .."$NL
cp ../BitKeeper/log/TIP oldtip
bk _test -f SCCS/d.ChangeSet && fail
bk _touch SCCS/d.ChangeSet
rm -f "$FILE"
bk -P commit $Q -ynew || fail
check_cnt
bk _test -f SCCS/d.file && fail
# no cset got made
cmpfiles ../BitKeeper/log/TIP oldtip
rm -f oldtip
echo OK

CNT=4
echo $N "Count the inits for a 'bk -P changes -v' ($CNT)................."$NL
# create new component
cd "$HERE"/nest
touch c
bk setup -cc -f docs || fail
cd docs
echo hi > doc
bk new $Q doc
bk commit -S $Q -ydoc || fail
cd ..
cd gdb
echo ss > gdbfile
bk new $Q gdbfile
bk commit -S $Q -ygdb || fail
cd ..
bk commit $Q -ytop || fail

rm "$FILE"
bk changes -v > /dev/null
check_cnt
echo OK

CNT=6
echo $N "Count the inits for a 'bk changes -Rv' ($CNT)..................."$NL
cd "$HERE"/nest2
rm "$FILE"
bk changes -Rv > /dev/null || fail
check_cnt
echo OK

CNT=44
echo $N "Count the inits for a 'bk pull -u' ($CNT)......................"$NL
rm "$FILE"
bk pull -u $Q || fail
check_cnt
echo OK

CNT=31
echo $N "Count the inits for a 'bk unpull -fs' ($CNT)..................."$NL
rm "$FILE"
bk unpull -fs $Q || fail
check_cnt
echo OK

CNT=59
echo $N "Count the inits for a 'bk pull' w merge ($CNT)................."$NL
bk portal $Q .
touch c
bk setup -f -cc www || fail
cd www
echo kk > 1.html
bk new $Q 1.html
bk commit -S -ywww $Q || fail
cd ../gdb
echo hi > new
bk new $Q new || fail
bk commit -S -ynew $Q || fail
cd ..
bk commit -ylocal $Q || fail

rm "$FILE"
bk pull $Q || fail
check_cnt
echo OK

CNT=30
echo $N "Count the inits for a 'bk push' ($CNT)........................."$NL
rm "$FILE"
bk push $Q || fail
check_cnt
echo OK

CNT=44
echo $N "Count the inits for a 'bk clone -@base' ($CNT) ................"$NL
cd "$HERE"/nest2/gcc
echo hi > file_copy
bk new $Q file_copy
bk commit -S $Q -ygcc_copy || fail
cd ..
echo hi > file_copy
bk new $Q file_copy
bk commit -S $Q -ycopy || fail
bk portal $Q -r
bk comps -h | grep -v www | bk here set -f $Q - || fail
cd ../nest/gdb || fail
echo hi > file_project
bk new $Q file_project
bk commit -S $Q -ygdb_project || fail
cd ..
echo hi > file_project
bk new $Q file_project
bk commit -S $Q -yproject || fail
bk tag $Q junk || fail
cd ..
rm "$FILE"
bk clone $Q -sALL -@nest2 "$HERE"/nest newnest2 || fail
check_cnt
echo OK

