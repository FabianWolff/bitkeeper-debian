# Copyright 1999-2011,2013-2016 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

commercial project
echo $N Make sure delta -i works ....................................$NL
echo hi there > init
bk delta $S -i init
if bk _test ! -f SCCS/s.init; then echo Failed to create s.file; exit 1; fi
test -f init && {
	echo failed to remove file
	exit 1
}
echo OK

echo $N Make sure delta -i works with a c.file ......................$NL
echo hi there > comments
echo BitKeeper rocks | bk cfile save comments
echo u | bk delta $S -i comments > OUT 2>&1
test "BitKeeper rocks" = "`bk prs -hr+ -nd:C: comments`" || {
	echo failed
	bk prs comments
	exit 1
}
echo OK

echo $N Check delta -i works w/ existing file .......................$NL
echo hi there again > init
bk delta -i init 2> delta.out
if [ $? -eq 0 ]; then echo Failed; exit 1; fi
grep -q "s.init already exists" delta.out
if [ $? -ne 0 ]; then echo Failed; exit 1; fi
if bk _test -f SCCS/z.init; then echo Failed, fail to clean zlock; exit 1; fi
rm -f init
echo OK

echo $N Make sure delta -l works ....................................$NL
bk _cp SCCS/s.init SCCS/s.T
X=`bk _scat SCCS/s.T | wc -c`
bk get $S -e T
if writable T; then :; else echo Get failed to get file writeable; exit 1; fi
_BK_MV_OK=1 bk delta $S -fly T
if [ "`bk _scat SCCS/s.T | wc -c`" = "$X" ]; then echo Failed to create delta; exit 1; fi
if [ ! -f T ]; then echo Failed to get file; exit 1; fi
if writable T; then :; else echo Failed to leave file writeable; exit 1; fi
echo OK

echo $N Make sure delta -il works ...................................$NL
echo delta -il > init2
bk delta $S -il init2
if bk _test ! -f SCCS/s.init2; then echo failed to create file; exit 1; fi
bk clean init2
echo OK

echo $N Make sure delta -I works with good file .....................$NL
cat > INITX <<EOF
D 1.1 97/05/28 23:49:57 joe_user@joes_hostname 0 0 0/0/0
c This is revision 1.1
P this/is/the/pathname
------------------------------------------------
EOF
ls > init_test
bk delta $Q -i -IINITX init_test
if [ $? != 0 ]; then echo Failed - delta returned an error; exit 1; fi
bk _scat SCCS/s.init_test | grep -q '^.c This is revision 1.1$'
if [ $? -ne 0 ]; then echo Failed to add comment; exit 1; fi
bk _scat SCCS/s.init_test | grep -q '^.cPthis/is/the/pathname$'
if [ $? -ne 0 ]; then echo Failed to add path; exit 1; fi
echo OK

echo $N Make sure delta -I fails with bad file ......................$NL
ls > INITX
bk co -l $Q init_test
ls >> init_test
bk delta $Q -IINITX init_test 2>OUT && {
	echo Failed - delta did not error
	echo =============== INIT file ===================
	cat INITX
	echo =============== Output ===================
	cat OUT
	exit 1
}
echo OK

echo $N Make sure delta -I works w/ blank comments ..................$NL
cat > INITX <<EOF
D 1.2 97/05/28 23:49:57 joe_user@joes_hostname 0 0 0/0/0
c This is revision 1.2
c
c This is the line after the blank line.
------------------------------------------------
EOF
bk delta $Q -IINITX init_test
if [ $? != 0 ]; then echo Failed - delta returned an error; exit 1; fi
bk _scat SCCS/s.init_test | grep -q '^.c This is revision 1.2$'
if [ $? -ne 0 ]; then echo Failed to add comment; exit 1; fi
bk _scat SCCS/s.init_test | grep -q '^.c $'
if [ $? -ne 0 ]; then echo Failed to add blank comment line.; exit 1; fi
bk _scat SCCS/s.init_test | grep -q '^.c This is the line after the blank line.$'
if [ $? -ne 0 ]; then echo Failed to add last line in comment; exit 1; fi
echo OK

#echo $N Make sure delta -n works ....................................$NL
#bk get $S -e T
#bk delta $S -ny T
#if [ ! -f T ]; then echo Failed to save file; exit 1; fi
#if writable T; then :; else echo Failed to save file writeable; exit 1; fi
#echo OK
echo $N Make sure delta prompts for comments ........................$NL
rm -f T
bk get $S -e T
echo "I am the comment" | bk delta $S -f T 2> ${DEV_NULL}
bk _scat SCCS/s.T | grep -q '^.c I am the comment$'
if [ $? -ne 0 ]; then echo Failed to add comment; exit 1; fi
echo OK

echo $N Make sure delta prompts for comments for all files ..........$NL
touch foo bar
bk new $Q foo bar
bk edit $Q foo bar
echo foo >> foo
echo bar >> bar
(echo "foo comment"; echo ".";
echo "bar comment"; echo ".") | bk delta $S foo bar 2> ${DEV_NULL}
bk _scat SCCS/s.foo | grep -q '^.c foo comment$' || fail
bk _scat SCCS/s.bar | grep -q '^.c bar comment$' || fail
bk _rm -f foo bar SCCS/s.foo SCCS/s.bar
echo OK

echo $N Make sure delta prompts once with -Y ........................$NL
bk get $S -e T
bk get $S -e init
(echo "first comment"; echo ".";
echo "second comment"; echo ".") > CMT
bk delta $S -fY < CMT 2>${DEV_NULL} || fail
bk _scat SCCS/s.T | grep -q '^.c first comment$'
if [ $? -ne 0 ]; then echo Failed to add first comment to T; exit 1; fi
bk _scat SCCS/s.init | grep -q '^.c first comment$'
if [ $? -ne 0 ]; then echo Failed to add first comment to init; exit 1; fi
bk _scat SCCS/s.T | grep -q '^.c second comment$'
if [ $? -eq 0 ]; then echo Added unwanted second comment to T; exit 1; fi
bk _scat SCCS/s.init | grep -q '^.c second comment$'
if [ $? -eq 0 ]; then echo Added unwanted second comment to init; exit 1; fi
echo OK

echo $N Make sure ci -u -l fails ....................................$NL
bk get $S -e init2
bk ci -q -l -u init2 2>ERR && fail -f ERR
grep -q "ci: -l and -u are mutually exclusive." ERR || fail -f ERR
echo OK

echo $N Make sure ci -u with no change works ........................$NL
bk ci $Q -u init2 2> ${DEV_NULL}
if [ ! -f init2 ]; then echo File not checked out.; exit 1; fi
if writable init2; then echo File not read only.; exit 1; fi
echo OK


echo $N Make sure delta -G works ....................................$NL
echo "G change data" > init3
perl -e '
$tt = time;
$tt -= 500;
utime $tt, $tt, "init";
'
bk mtime init3 > CMP1
bk delta $Q -i -G init3
bk prs -Y -h -d':D: :T:\n' init3 > CMP2
cmp -s CMP1 CMP2
if [ $? -ne 0 ]; then echo Failed.; diff CMP1 CMP2; exit 1; fi
echo OK

echo $N Make sure delta -a new file work ............................$NL
mkdir A
echo "echo this is a new file" > A/data
bk sfiles -x A | bk delta $Q -a -l -y"new file" -
REV=`bk prs -r+ -hd:I: A/data`
if [ ${REV}X != "1.1"X ]; then echo failed; exit 1; fi
echo OK

echo $N Make sure delta -a unchanged file work ......................$NL
bk sfiles A | bk delta $Q -a -l -y"unchanged file" -
REV=`bk prs -r+ -hd:I: A/data`
if [ ${REV}X != "1.1"X ]; then echo failed; exit 1; fi
echo OK

echo $N Make sure delta -a changed file work ........................$NL
echo fff > A/bar
bk new $Q A/bar
bk edit $Q A/bar
echo fff >> A/bar
echo "echo this is changed file" > A/data
bk sfiles A | bk delta $Q -l -a -fy"changed file
with newline" -
REV=`bk prs -r+ -hd:I: A/data`
if [ ${REV}X != "1.2"X ]; then echo failed $REV; exit 1; fi
echo OK

echo $N Make sure delta -y can have newlines ........................$NL
bk prs -r+ A/data | grep 'with newline' > /dev/null
if [ $? -ne 0 ]; then echo failed; exit 1; fi
echo OK

if [ "$PLATFORM" = "UNIX" ]
then #-----------------------------------------------------------------
echo $N Make sure delta -a symlink dir works ........................$NL
mkdir A/dir
ln -s A/dir A/symdir
bk sfiles -x A | bk delta $Q -a -l -fy"new symlink dir" -
REV=`bk prs -r+ -hd:I: A/symdir`
if [ ${REV}X != "1.1"X ]; then echo failed; exit 1; fi
echo OK

fi #--------------------------------------------------------------------
echo $N Make sure delta -i does not check in ........................$NL
mkdir garbage; cd garbage; touch a b c d e s.c s.f
bk delta $Q -i
if bk _test -d "SCCS"; then	echo failed - it did check stuff in; exit 1; fi
echo OK

echo $N Make sure ci -i does not check in ...........................$NL
bk ci $Q -i
if bk _test -d "SCCS"; then	echo failed - it did check stuff in; exit 1; fi
echo OK

echo $N Make sure delta -i a b c d does check in ....................$NL
bk delta $Q -i a b c d e
list=`bk gfiles`
list=`echo $list`
if [ "$list" != "a b c d e" ]; then	echo failed; exit 1; fi
echo OK

if [ $PLATFORM = "WIN32" ]
then #-------------------------------------------------------------
echo $N Make sure delta uses the real name of the sfile .............$NL
cd ../A
bk clean data
bk edit $Q data
rm -f data
echo new > DATA
bk delta $Q -fychk_path ../a/DATA
bk prs -h -r+ -d':DPN:\n' DATA | grep -q "A/data\$"
if [ $? -ne 0 ]; then echo failed; exit 1; fi
bk prs -h -r+ -d':DPN:\n' DATA | grep -q "A/DATA\$"
if [ $? -eq 0 ]; then echo failed; exit 1; fi
echo OK

fi #---------------------------------------------------------------
cd ..
rm -rf A garbage
echo $N Make sure delta works with checkout:edit preference .........$NL
cd "$HERE"
rm -rf project
commercial project
BK_USER=one; BK_HOST=one.com.bk_regression.bk
export BK_USER BK_HOST
cd "$HERE/project"
echo hi > hi.c
bk ci $Q -i hi.c
bk edit $Q BitKeeper/etc/config
grep -v checkout BitKeeper/etc/config > config.sav
bk co $Q -l hi.c
for i in "" "one" "one@$BK_HOST" "one@$BK_HOST:$HERE/project" \
	"@$BK_HOST" "@$BK_HOST:$HERE/project" \
	":$HERE/project" "one:$HERE/project" 
do
	cp config.sav BitKeeper/etc/config
	echo "[${i}]checkout:edit" >> BitKeeper/etc/config
	echo hello > hi.c
	bk delta $Q -fyhello hi.c
	if [ $? -ne 0 ]; then echo failed; exit 1; fi
	if [ ! -f hi.c ]; then echo failed; exit 1; fi
	writable hi.c || { echo failed; exit 1; }
done
echo OK

echo $N Make sure ci -i works with checkout:edit preference .........$NL
cp config.sav BitKeeper/etc/config
echo "checkout:edit" >> BitKeeper/etc/config
echo lo > lo.c
chmod -w lo.c
bk ci $Q -i lo.c
if [ $? -ne 0 ]; then echo failed; exit 1; fi
if [ ! -f lo.c ]; then echo failed; exit 1; fi
writable lo.c || { echo failed; exit 1; }
echo OK

echo $N Make sure ci -i works with checkout:get preference ..........$NL
cp config.sav BitKeeper/etc/config
echo "checkout:get" >> BitKeeper/etc/config
echo mid > mid.c
echo low > low.c
bk sfiles -x mid.c low.c | bk ci $Q -i -
if [ ! -f mid.c ]; then echo failed; exit 1; fi
if writable mid.c; then echo failed; exit 1; fi
if [ ! -f low.c ]; then echo failed; exit 1; fi
if writable low.c; then echo failed; exit 1; fi
echo OK

echo $N Make sure ci works with checkout:get preference .............$NL
bk edit $Q low.c mid.c
echo mid2 > mid.c
echo low2 > low.c
bk sfiles -c mid.c low.c | bk ci $Q -ynew -
if [ ! -f mid.c ]; then echo failed; exit 1; fi
if writable mid.c; then echo failed; exit 1; fi
if [ ! -f low.c ]; then echo failed; exit 1; fi
if writable low.c; then echo failed; exit 1; fi
echo OK

echo $N Make sure checkout:last preserves modtime if no keyword .....$NL
bk commit $Q -ysnap || fail
# if SCCS dirs, then timestamps managed.
# Might as well ASCII too as that is the real case for Make, emacs, etc.
bk clone --compat --no-bk-sfile --sccsdirs $Q . ../compat || fail
bk fix -c || fail
cd "$HERE"/compat
bk edit $Q BitKeeper/etc/config
echo "checkout:last" >> BitKeeper/etc/config
bk admin -FSCCS mid.c 
bk edit $Q mid.c low.c
sleep 1
echo mid3 > mid.c
echo low3 > low.c
bk sfiles -c mid.c low.c | bk ci $Q -G -ynew3 -
test -f mid.c -a -f low.c || {
	echo failed to leave the files
	exit 1
}
test -w mid.c -a -w low.c || {
	echo failed to leave the files rw
	exit 1
}
# We should have set the mtime back on the s.file
gdate=`bk _stat mid.c | awk -F\| '{ print $10 }'`
sdate=`bk _stat SCCS/s.mid.c | awk -F\| '{ print $10 }'`
test $gdate -ge $sdate || {
	echo failed
	ls -l mid.c
	bk _find SCCS | grep '^SCCS/s.mid.c'
	exit 1
}
echo OK

echo $N Make sure "bk new -b" forces binary encoding for text file ....$NL
cd "$HERE/project"
echo "this is text" > text
bk new $Q -b text
ENC=`bk prs -hr+ -d:ENC: text`
if [ "$ENC" != "BAM" ]; then echo failed; exit 1; fi
echo OK;


echo $N Small ascii files with nulls should be caught ...............$NL
echo baseline > baseline
bk new $Q baseline
bk edit $Q baseline
echo 'There is a null right here X>' | tr X '\000' >> baseline
echo "" >> baseline
echo and another line after that >> baseline
bk delta -q -fyfail baseline 2>OUT && {
	echo failed to error
	exit 1
}
grep -q 'file format is ascii, delta is binary' OUT || {
	echo bad error message
	cat OUT
	exit 1
}
echo OK


echo $N Large ascii files with nulls should be caught ...............$NL
cat >tmp <<EOF
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
EOF
cat tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp > tmp10
cat tmp10 tmp10 > big
rm -f tmp10
bk new $Q big
bk edit $Q big
echo 'There is a null right here X>' | tr X '\000' >> big
echo "" >> big
echo and another line after that >> big
bk delta -q -fyfail big 2>OUT && {
	echo failed to error
	exit 1
}
grep -q 'big has nulls' OUT || grep -q 'delta is binary' OUT || {
	echo bad error message
	cat OUT
	exit 1
}
echo OK

echo $N Make sure we disallow .bk_skip file  .........................$NL
touch .bk_skip
bk new .bk_skip 2> new.out && fail -f new.out should fail
grep -q "new: illegal filename: .bk_skip" new.out || fail -f new.out wrong message
rm -f .bk_skip
echo OK

if [ X$PLATFORM != X"WIN32" ]
then #------------------------------------------------------------------

echo $N Make sure we don\'t allow files with \|\'s .....................$NL
touch 'test|file'
bk new $Q 'test|file' 2>new.out && fail -f new.out should fail
grep -q "bad file name" new.out || fail -f new.out wrong message
echo OK

echo $N Make sure we don\'t allow pathnames with \|\'s .................$NL
mkdir 'bad|dir'
touch 'bad|dir/test'
bk new $Q 'bad|dir/test' 2>new.out && fail -f new.out should fail
grep -q "bad file name" new.out || fail -f new.out wrong message
cd 'bad|dir'
bk new $Q test 2>new.out && fail -f new.out should fail
grep -q "new: illegal filename" new.out || fail -f new.out wrong message
echo OK

fi #--------------------------------------------------------------------

echo $N Make sure we don\'t allow usernames with \|\'s .................$NL
cd "$HERE/project"
touch testfile
BK_USER='test|user' bk new $Q testfile 2>new.out
grep -q "Bad user name" new.out || {
	echo wrong error
	cat new.out
	exit 1
}
echo OK

echo $N Make sure we don\'t allow hostnames with \|\'s .................$NL
touch testfile
BK_HOST='test|host.sample.com' bk new $Q testfile 2>new.out && {
	echo should have failed
	exit 1
}
grep -q "bad host name" new.out || {
	echo wrong error
	cat new.out
	exit 1
}
echo OK

echo $N Test other bad pathnames ....................................$NL
cat <<EOF >BAD
.bk/foo
dir/.bk
dir/.bk/foo
dir/ChangeSet
dir/ChangeSet/foo
dir/.bk_skip
dir/.bk_skip/foo
dir/BitKeeper/etc
dir/BitKeeper/etc/foo
EOF

cat <<EOF >GOOD
dir/BitKeeper/etc2/foo
dir/BitKeeper/etc3/foo
EOF

cat BAD | while read f
do	d=`dirname "$f"`
	mkdir -p "$d"
	echo hi > "$f"
	bk new $Q "$f" 2>ERR && fail -f ERR name $f should fail
	grep -q 'illegal filename' ERR || fail -f ERR
	bk _rm -rf dir
done || fail

cat GOOD | while read f
do	d=`dirname "$f"`
	test -d "$d" || mkdir -p "$d"
	echo hi > "$f"
	bk new $Q "$f" || fail
done || fail
echo OK

echo $N Check compression: gzip preference ..........................$NL
cd "$HERE"
# Only ASCII supports a compression option.  BKFILE always compressed.
bk clone $Q --no-bk-sfile project project.ascii || fail
cd "$HERE/project.ascii/BitKeeper/etc"
bk edit $Q config
echo "compression: gzip" >> config
echo checkout:none >> config
cd "$HERE/project.ascii"
echo hi > init2
bk new $Q init2
bk compression init2 | grep -q "gzip"
if  [ $? -ne 0 ]; then echo failed; exit 1; fi
echo OK

echo $N Check compression: none preference ..........................$NL
cd "$HERE/project.ascii/BitKeeper/etc"
bk edit $Q config
sed -e's/^compression: gzip/compression: none/' < config > config.tmp
mv config.tmp config
cd "$HERE/project"
echo hi > init3
bk new $Q init3
bk compression init3 | grep -q "none"
if  [ $? -ne 0 ]; then echo failed; exit 1; fi
echo OK

echo $N Check that bad p.file revisions are caught and fixed ........$NL
cd "$HERE/project"
cp BitKeeper/etc/config config.bu
echo 'checkout:edit!' >> BitKeeper/etc/config
bk edit $Q -x+ init3
bk _mv SCCS/p.init3 P || fail
sed s/1.2/1.1/ < P > tmp
bk _mv tmp SCCS/p.init3
bk delta $Q -fybad init3 > OUT 2>&1 || fail -f OUT
grep -q 'invalid nextrev 1.1 in p.file, using 1.2 instead' OUT || fail -f OUT
test 1.2 = `bk prs -hr+ -nd:I: init3` || fail
bk _cat SCCS/p.init3 | sed 's/one .*/one DATE/' > GOT
echo '1.2 1.3 one DATE' > WANT
cmpfiles GOT WANT
bk delta $Q -fybad2 init3 || fail
test 1.3 = `bk prs -hr+ -nd:I: init3` || fail
mv config.bu BitKeeper/etc/config
bk clean $Q init3
echo OK

echo $N Check that delta picks up comments from c.files, -c case ....$NL
cd "$HERE/project"
bk edit $Q init3
( echo "Auto comment from c.file"
  echo
  echo "And a second line" 
 ) > C
bk cfile save init3 < C
bk delta -fqc init3 > OUT 2>&1 < /dev/null || { cat OUT; exit 1; }
bk prs -hr+ -d'$each(:C:){(:C:)\n}' init3 > C2
cmpfiles C C2
bk _test -f SCCS/c.init3 && {
	echo failed to clean up the c.file
	exit 1
}
test -s OUT && {
	echo should not have produced output
	cat OUT
	exit 1
}
echo OK

echo $N Make sure delta prompts and allows aborts from c.files ......$NL
cd "$HERE/project"
bk edit $Q init3
( echo "Auto comment from c.file"
  echo "And a second line" 
) > C
bk cfile save init3 < C
echo a | bk delta $Q -f init3 > OUT 2>&1
bk _test -f SCCS/c.init3 || {
	echo deleted c.file
	exit 1
}
bk _cat SCCS/c.init3 | grep -q 'And a second line' || {
	echo screwed up contents
	bk _cat SCCS/c.init3
	exit 1
}
echo OK

echo $N Make sure delta prompts and works 2nd time around ...........$NL
cd "$HERE/project"
bk edit $Q init3
( echo "Auto comment from c.file"
  echo "And a second line" 
) > C
bk cfile save init3 < C
echo u | bk delta $Q -f init3 > OUT 2>&1 || fail
bk _test -f SCCS/p.init3 && {
	echo failed to delta
	exit 1
}
bk prs -hr+ -d'$each(:C:){(:C:)\n}' init3 > C2
cmp -s C C2 || {
	echo failed to set comment
	bk prs init3
	diff C C2
	exit 1
}
bk _test -f SCCS/c.init3 && {
	echo failed to clean up the c.file
	exit 1
}
echo OK

echo $N Make sure we split long comment lines with -YFILENAME .......$NL
cd "$HERE/project"
ls > LS
bk new $Q LS
for i in 0 1 2 3 4 5 6 7 8 9
do echo $NX 1234567890$NXL
done > 100
for i in 0 1 2 3 4 5 6 7 8 9
do cat 100
done > 1000
for i in 0 1 2 3 4 
do cat 1000
done > 5000
bk edit $Q LS
bk delta -f -Y5000 $Q LS 2>ERR
grep -q Splitting ERR || {
	echo bad diagnostics
	cat ERR
	exit 1
}
bk prs -hd'$each(:C:){(:C:)}' -r+ LS > Y
cmp -s Y 5000 || {
	echo failed
	diff Y 5000
	ls -l Y 5000
	exit 1
}
echo OK

echo $N Make sure we split a long comment line with -ylong_comment ..$NL
bk edit $Q LS
bk delta -f -y`cat 5000` $Q LS 2>ERR
grep -q Splitting ERR || {
	echo bad diagnostics
	cat ERR
	exit 1
}
bk prs -hd'$each(:C:){(:C:)}' -r+ LS > Y
cmp -s Y 5000 || {
	echo failed
	diff Y 5000
	ls -l Y 5000
	exit 1
}
echo OK

echo $N Make sure we split long comment lines with -ylong_comment ...$NL
bk edit $Q LS
( cat 5000
  echo ""
  cat 100
  echo ""
  cat 100
  echo ""
) > 3lines
bk delta -f -y"`cat 3lines`" $Q LS 2>ERR
grep -q Splitting ERR || {
	echo bad diagnostics
	cat ERR
	exit 1
}
cat 5000 100 100 > WANT
bk prs -hd'$each(:C:){(:C:)}' -r+ LS > GOT
cmp -s WANT GOT || {
	echo failed
	diff WANT GOT
	ls -l WANT GOT
	exit 1
}
echo OK

echo $N Check multiline command line comments .......................$NL
bk edit $Q LS
bk delta -f -y'line 1
line 2
line 3' $Q LS 2>ERR
bk undos > WANT <<EOF
line 1
line 2
line 3
EOF
bk prs -hd'$each(:C:){(:C:)\n}' -r+ LS > GOT
cmp -s WANT GOT || {
	echo failed
	diff WANT GOT
	ls -l WANT GOT
	exit 1
}
echo OK

echo $N Check 1020 char comment .....................................$NL
bk edit $Q LS
( cat 1000; echo $NX 01234567890123456789$NXL ) > 1020
bk delta -f -y`cat 1020` LS 2>ERR
grep -q Splitting ERR && {
	echo bad diagnostics
	cat ERR
	exit 1
}
bk prs -hd'$each(:C:){(:C:)}' -r+ LS > GOT
cmp -s 1020 GOT || {
	echo failed
	diff 1020 GOT
	ls -l 1020 GOT
	exit 1
}
echo OK

echo $N Check 2040 char comment .....................................$NL
bk edit $Q LS
cat 1020 1020 > 2040
bk delta -f -y`cat 2040` LS 2>ERR
grep -q Splitting ERR || {
	echo bad diagnostics
	cat ERR
	exit 1
}
bk prs -hd'$each(:C:){(:C:)}' -r+ LS > GOT
cmp -s 2040 GOT || {
	echo failed
	diff 2040 GOT
	ls -l 2040 GOT
	exit 1
}
echo OK

echo $N Check disabling directory expansion if no files listed ......$NL
mkdir expand
cd expand
touch a
bk new $Q a
bk edit $Q a
echo junk > a
echo a > WANT
bk sfiles -gc > GOT
checkfiles WANT GOT
# does nothing
BK_NODIREXPAND=1 bk delta $Q -ycomment || fail
bk sfiles -gc > GOT
checkfiles WANT GOT
# actually checks in files
bk delta $Q -ycomment || fail
bk sfiles -gc > GOT
test -s GOT && fail
echo OK

echo $N Check that p-locked read-only file cannot be checked in .....$NL
touch b
bk new $Q b
bk edit $Q b
echo b > b
chmod 444 b
bk ci $Q -y'should fail' b 2>ERR || {
	echo failed
	cat ERR
	exit 1
}
echo OK

echo $N Check that read-only new files on stdin are ok ..............$NL
touch bnew
chmod 444 bnew
echo bnew | bk ci $Q -a -ynew - || fail
echo OK

echo $N But that updates to files can\'t be read-only ................$NL
bk edit $Q bnew || fail
echo hi > bnew
chmod 444 bnew
echo bnew | bk ci $Q -a -ynew - 2>ERR && fail -f ERR should fail
grep -q "delta: bnew is locked but not writable" ERR || fail -f ERR
echo hi > WANT
cmpfiles bnew WANT
echo OK

HP=`bk gethost -r | sed 's/hp.*/hp/p'`
if [ "$HP" = "hp" ]; then
echo $N Check that delta on file owned by diff group member works ...$NL
touch notmine
bk new $Q notmine
bk admin -FSCCS notmine
bk edit $Q notmine
echo foo >> notmine
chown beth notmine
bk delta $Q -u -y'change happens' notmine 2>ERR || {
	echo failed
	cat ERR
	exit 1
}
echo OK
fi

echo $N Check that users cannot create a file called ChangeSet.......$NL
touch ChangeSet
bk new $Q ChangeSet 2>ERR && fail
grep -q "new: illegal filename: expand/ChangeSet" ERR || fail -f ERR wrong message
mkdir adir
touch adir/ChangeSet
bk new $Q adir/ChangeSet 2>ERR && fail -f ERR
grep -q "new: illegal filename: expand/adir/ChangeSet" ERR || fail -f ERR wrong message
rm -f ChangeSet adir/ChangeSet
touch afile
bk new $Q afile || fail
bk get $Q afile
bk mv afile ChangeSet 2>ERR && fail
grep -q "sccsmv: destination cannot be named: expand/ChangeSet" ERR || \
	fail -f ERR wrong message
bk mv afile adir/ChangeSet 2>ERR && fail
grep -q "sccsmv: destination cannot be named: expand/adir/ChangeSet" ERR || \
	fail -f ERR wrong message
echo OK
