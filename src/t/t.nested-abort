# Copyright 2009-2012 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

echo $N Make sure abort prints component pathname for undo...........$NL
nested abort-test
touch afile
bk new $Q afile
for dir in `bk comps -h`
do
	cd "$dir"
	touch afile
	bk new $Q afile
	cd ..
done
bk commit $Q -y"add files"
bk clone $Q . ../abort-test-copy
bk get $Q -e afile
echo "stuff" > afile
bk delta $Q -ychg afile
for dir in `bk comps -h`
do
	cd "$dir"
	bk get $Q -e afile
	echo "stuff" > afile
	bk delta $Q -ychg afile
	cd ..
done
bk commit $Q -y"mod files"
touch c
bk setup -fcc newcomp
rm -f c
cd ../abort-test-copy
bk pull -R $Q || fail
# need at least an undo
cd gcc
bk resolve -S $Q
bk abort -f >OUT 2>&1 || fail
perl -pe "s/.*\r//" < OUT > GOT
cat <<EOF > WANT
1/4 gcc                            100% |==============================| OK
2/4 gdb                            100% |==============================| OK
3/4 newcomp                        100% |==============================| OK
4/4 .                              100% |==============================| OK
EOF
cmpfiles WANT GOT
echo OK

# return a uniq string
CNT=0
RAND()
{
	CNT=`expr $CNT + 1`
	echo "junk.$CNT"
}

echo $N Setup testing scenarios......................................$NL
# Set up the parent with gcc, gdb, and comp, all with a file called 'file'.
cd "$HERE"
nested parent
bk gate -qr
RAND > file
bk new $Q file || fail
bk commit $Q -yfile || fail
touch c
bk setup -fcc comp || fail
for r in gcc gdb comp
do	cd $r
	RAND > file
	bk new $Q file || fail
	bk commit -S $Q -yfile || fail
	cd ..
done
bk commit $Q -ygcc,gdb,comp || fail
bk alias new MYALIAS gcc gdb comp || fail
# Now add comp3 to the parent.  This is done before we do the clones
# of parent below so that when comp3 is added to MYALIAS later, it
# gets populated due to the aliases file being changed but the cset
# which contains this alias file change does not include the component
# itself.
bk setup -fcc comp3 || fail
# Create a component deep1 and a deep component deep1/deep2 under it.
# deep2 will be added to MYALIAS and should exist in all the clones;
# deep1 should not.
bk setup -C -fcc deep1 || fail
cd deep1
RAND > file
bk new $Q file || fail
bk commit -S $Q -yfile || fail
bk setup -C -fc../c deep2 || fail
cd deep2
RAND > file
bk new $Q file || fail
bk commit -S $Q -yfile || fail
cd ../..
bk alias add MYALIAS deep1/deep2 || fail
bk commit $Q -ydeep1,deep1/deep2 || fail
cd ..

# Clone and set up the multiple scenarios (indentation added for clarity).
# These are repos we will pull into (from parent) or push from (into parent)
# and the operation will fail.
bk clone $Q -sMYALIAS parent pull-R || fail
bk clone $Q -sMYALIAS parent edit_in_product || fail
	cd edit_in_product
	bk edit $Q file
	RAND > file
	cd ..
tar cf edit_in_product.tar edit_in_product
for i in gcc gdb comp
do	bk clone $Q -sMYALIAS parent edit_in_$i || fail
	cd edit_in_$i/$i
	bk edit $Q file
	RAND > file
	cd ../..
	tar cf edit_in_$i.tar edit_in_$i
done

bk clone $Q -sMYALIAS parent pending_in_product || fail
	cd pending_in_product
	bk edit $Q file
	RAND > file
	bk delta $Q -yfile file
	cd ..
tar cf pending_in_product.tar pending_in_product
for i in gcc gdb comp
do	bk clone $Q -sMYALIAS parent pending_in_product_$i || fail
	cd pending_in_product_$i/$i
	RAND > file2
	bk new $Q file2
	bk commit -S $Q -yfile2
	cd ../..
	tar cf pending_in_product_$i.tar pending_in_product_$i
done
for i in gcc gdb comp
do	bk clone $Q -sMYALIAS parent pending_in_$i || fail
	cd pending_in_$i/$i
	bk edit $Q file
	RAND > file
	bk delta $Q -yfile file
	cd ../..
	tar cf pending_in_$i.tar pending_in_$i
done
bk clone $Q -sMYALIAS parent newcomp_taken || fail
	cd newcomp_taken
	mkdir newcomp
	touch newcomp/must_exist
	cd ..
tar cf newcomp_taken.tar newcomp_taken

# Add component newcomp for the new-component-name-taken test where the
# pull fails b/c a directory named newcomp already exists.
cd parent
bk setup -C -fcc newcomp || fail
bk alias add -C MYALIAS newcomp || fail
cd newcomp
RAND > file
bk new $Q file || fail
bk commit -S $Q -yfile || fail
cd ..
bk commit $Q -ynewcomp || fail
# Touch files in the product, gcc, and gdb.
bk edit $Q file || fail
RAND > file
bk delta $Q -yfile file || fail
for r in gcc gdb
do	cd $r
	bk edit $Q file || fail
	RAND > file
	bk delta $Q -yfile file || fail
	bk commit -S $Q -yfile || fail
	cd ..
done
# Add components to MYALIAS so that pulls of MYALIAS will populate
# them (some of them anyway, which they must then undo after they
# fail).
bk setup -C -fcc comp2 || fail
bk alias add -C MYALIAS comp2 || fail
bk alias add -C MYALIAS comp3 || fail
bk alias add -C MYALIAS deep1 || fail
bk commit $Q -yfile,gcc,gdb,comp2,comp3,deep1 || fail
echo OK

save_state()
{
	PROD=`bk log -r+ -d:REV: ChangeSet`
	PEND=`bk sfiles -pA`
	GDB=`bk log -r+ -d:REV: gdb/ChangeSet`
	GCC=`bk log -r+ -d:REV: gcc/ChangeSet`
	COMP=`bk log -r+ -d:REV: comp/ChangeSet`
	COMPS=`bk comps 2>/dev/null`
	ALIASES=`bk alias`
	MYALIAS=`bk alias MYALIAS`
	COMP2=NO
	COMP3=NO
	DEEP1=NO
	test -d comp2 && COMP2=YES
	test -d comp3 && COMP3=YES
	bk log deep1/file >/dev/null && DEEP1=YES
	DEEP2_FILE=`bk log -r+ -nd:REV: deep1/deep2/file`
}

check_state()
{
	err=""
	test -d RESYNC && err="RESYNC $err"
	test -d gdb/RESYNC && err="gdb/RESYNC $err"
	test -d gcc/RESYNC && err="gcc/RESYNC $err"
	test -d comp/RESYNC && err="comp/RESYNC $err"
	test "$PROD" = "`bk log -r+ -d:REV: ChangeSet`" || err="prod $err"
	test "$PEND" = "`bk sfiles -pA`" || err="pend $err"
	test "$GDB" = "`bk log -r+ -d:REV: gdb/ChangeSet`" || err="gdb $err"
	test "$GCC" = "`bk log -r+ -d:REV: gcc/ChangeSet`" || err="gcc $err"
	test "$COMP" = "`bk log -r+ -d:REV: comp/ChangeSet`" || err="comp $err"
	test "$COMPS" = "`bk comps 2>/dev/null`" || err="comps $err"
	test "$ALIASES" = "`bk alias`" || err="aliases $err"
	test "$MYALIAS" = "`bk alias MYALIAS`" || err="MYALIAS $err"
	test $COMP2 = NO -a -d "$comp2" && err="comp2 $err"
	test $COMP3 = NO -a -d "$comp3" && err="comp3 $err"
	# deep1/deep2/file should exist, deep1/file should not
	test $DEEP1 = NO && bk log deep1/file >/dev/null && err="deep1 $err"
	test "`bk log -r+ -nd:REV: deep1/deep2/file`" = "$DEEP2_FILE" || err="deep2 $err"
	test -z "$err"
	return $?  # return status; $err holds errors
}

########## Pull tests
echo $N Pull -R, change component, abort ............................$NL
cd "$HERE/pull-R"
save_state
bk pull $Q -R || fail
touch comp2/extra
# XXX Should fail this abort, but is calling nested_rmcomp in abortComponents
# And that doesn't check for work done.
bk abort -qf || fail
# Do it again with unpop component - this time it will fail
bk pull $Q -R || fail
touch comp3/extra
bk abort -qf 2> GOT && fail should have failed
test -d RESYNC || fail failed abort removed RESYNC
cat <<EOF > WANT
Extra file:         comp3/extra
here: unable to remove ./comp3
abort: bk here failed
EOF
cmpfiles WANT GOT
rm comp3/extra
bk abort -qf || fail
check_state || fail $err
echo "failed (bug in abortComponents)"

echo $N Pull, edited file in product.................................$NL
# Pull should fail in the product and leave all components unchanged,
# no RESYNC dirs, and newcomp should not have come over.
cd "$HERE/edit_in_product"
save_state
bk pull $Q 2>ERR && fail -f ERR
grep -q "The following files are modified locally and in the patch" ERR || {
     fail -f ERR
}
check_state || fail $err
echo OK

echo $N Pull, edited file in gcc.....................................$NL
# Pull should fail in gcc and leave all components unchanged,
# no RESYNC dirs, and newcomp should not have come over.
cd "$HERE/edit_in_gcc"
save_state
bk pull >ERR 2>&1 && fail -f ERR
test -d RESYNC && fail -f ERR left RESYNC
grep -q "The following files are modified locally and in the patch" ERR || {
	fail -f ERR
}
check_state || fail -f ERR $err
echo OK

echo $N Pull, edited file in gdb.....................................$NL
# Pull should fail in gdb. Note it doesn't leave a RESYNC
# beacause it is takepatch that fails.
cd "$HERE/edit_in_gdb"
save_state
bk pull >ERR 2>&1 && fail
test -d RESYNC && fail -f ERR left RESYNC
check_state || fail $err
echo OK

echo $N Pull, pending cset in product................................$NL
cd "$HERE/pending_in_product"
save_state
bk pull $Q 2>ERR && fail
bk abort -qf || fail
check_state || fail $err
echo OK

echo $N Pull, gcc cset pending in product............................$NL
# Pull should fail due to the gcc cset still pending in the product.
cd "$HERE/pending_in_product_gcc"
save_state
bk pull $Q 2>ERR && fail should have failed
bk abort -qf || fail
check_state || fail $err
echo OK

echo $N Pull, gdb cset pending in product............................$NL
# Pull should fail due to the gdb cset still pending in the product.
cd "$HERE/pending_in_product_gdb"
save_state
bk pull $Q 2>ERR && fail should have failed
bk abort -qf || fail
check_state || fail $err
echo OK

echo $N Pull, cset pending in gcc....................................$NL
cd "$HERE/pending_in_gcc"
save_state
bk pull $Q 2>ERR && fail
bk abort -qf || fail
check_state || fail $err
echo OK

echo $N Pull, cset pending in gdb....................................$NL
cd "$HERE/pending_in_gdb"
save_state
bk pull $Q 2>ERR && fail
bk abort -qf || fail
check_state || fail $err
echo OK

echo $N Pull, new component name taken...............................$NL
cd "$HERE/newcomp_taken"
save_state
test -f newcomp/must_exist || fail
bk pull $Q 2>ERR && fail
bk abort -qf || fail
check_state || fail $err
# abort should only remove things brought by clone
test -f newcomp/must_exist || fail
echo OK

########## Push tests
echo $N Push, edited file in product.................................$NL
cd "$HERE"
rm -rf edit_in_product
tar xf edit_in_product.tar
cd edit_in_product
save_state
cd ../parent
bk push $Q ../edit_in_product 2>ERR && fail
cd ../edit_in_product
bk abort -qf || fail
check_state || fail $err
echo OK

echo $N Push, edited file in gcc.....................................$NL
cd "$HERE"
rm -rf edit_in_gcc
tar xf edit_in_gcc.tar
cd edit_in_gcc
save_state
cd ../parent
bk push $Q ../edit_in_gcc 2>ERR && fail
cd ../edit_in_gcc
bk abort -qf || fail
check_state || fail $err
echo OK

echo $N Push, edited file in gdb.....................................$NL
cd "$HERE"
rm -rf edit_in_gdb
tar xf edit_in_gdb.tar
cd edit_in_gdb
save_state
cd ../parent
bk push $Q ../edit_in_gdb 2>ERR && fail
cd ../edit_in_gdb
bk abort -qf || fail
check_state || fail $err
echo OK

echo $N Push, pending cset in product................................$NL
cd "$HERE"
rm -rf pending_in_product
tar xf pending_in_product.tar
cd pending_in_product
save_state
cd ../parent
bk push $Q ../pending_in_product 2>ERR && fail
cd ../pending_in_product
bk abort -qf || fail
check_state || fail $err
echo OK

echo $N Push, gcc cset pending in product............................$NL
cd "$HERE"
rm -rf pending_in_product_gcc
tar xf pending_in_product_gcc.tar
cd pending_in_product_gcc
save_state
cd ../parent
bk push $Q ../pending_in_product 2>ERR && fail
cd ../pending_in_product_gcc
bk abort -qf || fail
check_state || fail -f $err
echo OK

echo $N Push, gdb cset pending in product............................$NL
cd "$HERE"
rm -rf pending_in_product_gdb
tar xf pending_in_product_gdb.tar
cd pending_in_product_gdb
save_state
cd ../parent
bk push $Q ../pending_in_product_gdb 2>ERR && fail
cd ../pending_in_product_gdb
bk abort -qf || fail
check_state || fail $err
echo OK

echo $N Push, cset pending in gcc....................................$NL
cd "$HERE"
rm -rf pending_in_gcc
tar xf pending_in_gcc.tar
cd pending_in_gcc
save_state
cd ../parent
bk push $Q ../pending_in_gcc 2>ERR && fail
cd ../pending_in_gcc
bk abort -qf || fail
check_state || fail $err
echo OK

echo $N Push, cset pending in gdb....................................$NL
cd "$HERE"
rm -rf pending_in_gdb
tar xf pending_in_gdb.tar
cd pending_in_gdb
save_state
cd ../parent
bk push $Q ../pending_in_gdb 2>ERR && fail
cd ../pending_in_gdb
bk abort -qf || fail
check_state || fail $err
echo OK

echo $N Push, new component name taken...............................$NL
cd "$HERE"
rm -rf newcomp_taken
tar xf newcomp_taken.tar
cd newcomp_taken
save_state
test -f newcomp/must_exist || fail
cd ../parent
bk push $Q ../newcomp_taken 2>ERR && fail
cd ../newcomp_taken
bk abort -qf || fail
check_state || fail $err
test -f newcomp/must_exist || fail
echo OK

########## Undo tests
echo $N Undo, edited file in product.................................$NL
cd "$HERE"
rm -rf undo-clone
bk clone $Q parent undo-clone || fail
cd undo-clone
bk edit $Q file || fail
RAND > file
save_state
bk undo $Q -f -r+ 2>ERR && fail
bk abort -qf || fail
check_state || fail -f ERR $err
echo OK

echo $N Undo, edited file in gcc.....................................$NL
cd "$HERE"
rm -rf undo-clone
bk clone $Q parent undo-clone || fail
cd undo-clone/gcc
bk edit $Q file || fail
RAND > file
cd ..
save_state
bk undo $Q -f -r+ 2>ERR && fail
bk abort -qf || fail
check_state || fail -f ERR $err
echo OK

echo $N Undo, edited file in gdb.....................................$NL
cd "$HERE"
rm -rf undo-clone
bk clone $Q parent undo-clone || fail
cd undo-clone/gdb
bk edit $Q file || fail
RAND > file
cd ..
save_state
bk undo $Q -f -r+ 2>ERR && fail -f ERR
bk abort -qf || fail
check_state || fail -f ERR
echo OK

echo $N Undo, pending cset in product................................$NL
cd "$HERE"
rm -rf undo-clone
bk clone $Q parent undo-clone || fail
cd undo-clone
bk edit $Q file || fail
RAND > file
bk delta $Q -yfile file || fail
save_state
bk undo $Q -f -r+ 2>ERR && fail
bk abort -qf || fail
check_state || fail -f ERR $err
echo OK


echo $N Undo, gcc cset pending in product............................$NL
cd "$HERE"
rm -rf undo-clone
bk clone $Q parent undo-clone || fail
cd undo-clone/gcc
bk edit $Q file || fail
RAND > file
bk delta $Q -yfile file || fail
bk commit -S $Q -yfile
cd ..
save_state
bk undo $Q -f -r+ 2>ERR && fail
bk abort -qf || fail
check_state || fail $err
echo OK

echo $N Undo, gdb cset pending in product............................$NL
cd "$HERE"
rm -rf undo-clone
bk clone $Q parent undo-clone || fail
cd undo-clone/gdb
bk edit $Q file || fail
RAND > file
bk delta $Q -yfile file || fail
bk commit -S $Q -yfile
cd ..
save_state
bk undo $Q -f -r+ 2>ERR && fail
bk abort -qf || fail
check_state || fail $err
echo OK

echo $N Undo, cset pending in gcc....................................$NL
cd "$HERE"
rm -rf undo-clone
bk clone $Q parent undo-clone || fail
cd undo-clone/gcc
bk edit $Q file || fail
RAND > file
bk delta $Q -yfile file || fail
cd ..
save_state
bk undo $Q -f -r+ 2>ERR && fail
bk abort -qf || fail
check_state || fail $err
echo OK

echo $N Undo, cset pending in gdb....................................$NL
cd "$HERE"
rm -rf undo-clone
bk clone $Q parent undo-clone || fail
cd undo-clone/gdb
bk edit $Q file || fail
RAND > file
bk delta $Q -yfile file || fail
cd ..
save_state
bk undo $Q -f -r+ 2>ERR && fail -f ERR
bk abort -qf || fail
check_state || fail -f ERR
echo OK

##########

echo $N Pull -R product only with old csets-in files in comps .......$NL
cd "$HERE"
bk clone $Q parent copy || fail
cd parent
TRIGRC=0
export TRIGRC
T=BitKeeper/triggers/pre-apply
mkdir BitKeeper/triggers || fail 1
cat <<'EOF' > $T
#!/bin/sh
#      =>  called in the RESYNC directory, not the enclosing repository.
#      =>  exit 0 allows the pull/push.
#      =>  exit 1 fails the entire pull/push leaving RESYNC
#      =>  exit 2 fails the pull/push but leaves the patch in PENDING.
#      =>  exit 3 fails the pull/push but leaves the patch in PENDING and  the
#          RESYNC tree in PENDING/RESYNC-date.
exit $TRIGRC
EOF
chmod +x $T
bk new $Q $T
bk commit $Q -ytrigger
cd ../copy
bk pull $Q -R
test -d RESYNC || fail no resync dir
bk abort -qf || fail
test -d RESYNC && fail resync dir not expected
bk pull $Q || fail
echo OK

echo $N Test trigger and abort with component pull ..................$NL
cd "$HERE"
tar cf copy.tar copy
cd parent/gdb
touch remote
bk new $Q remote
bk commit -S $Q -yremote
cd ..
bk commit $Q -ygdb/remote
cd ..
for rc in 1 2 3; do
	cd copy
	TRIGRC=$rc bk pull $Q 2> ERR && fail -f ERR rc=$rc should fail
	bk -r check -ac || fail rc=$rc should pass
	test -d RESYNC && fail rc=$rc
	cd ..
	rm -fr copy
	tar xf copy.tar
done
cd copy
bk pull $Q -R || fail
bk abort -qf || fail
bk pull $Q || fail
test -f gdb/BitKeeper/etc/csets-in || fail
cd ..
echo OK

echo $N Test trigger and abort with new component ...................$NL
cd "$HERE"
tar cf copy.tar copy
cd parent
touch c
bk setup -fcc newrepo
cd ..
for rc in 1 2 3; do
	cd copy
	TRIGRC=$rc bk pull $Q 2> ERR && fail -f ERR rc=$rc should fail
	bk -r check -ac || fail rc=$rc should pass
	test -d RESYNC && fail rc=$rc  	      # XXX rc=1 should leave RESYNC
	cd ..
	rm -fr copy
	tar xf copy.tar
done
cd copy
bk pull $Q -R || fail
bk abort -qf
bk pull $Q || fail
test -f gdb/BitKeeper/etc/csets-in || fail
cd ..
echo OK

echo $N Test a failed abort..........................................$NL
cd "$HERE"
rm -rf edit_in_product
tar xf edit_in_product.tar
cd edit_in_product
save_state
mkdir -p RESYNC/BitKeeper
touch RESYNC/.bk_nl
bk abort -f >ERR 2>&1 && fail
grep -q "Write locked" ERR && fail double abort... whooa... what does it mean?
echo OK

echo $N Test running abort with an undo in a product ................$NL
cd "$HERE"
rm -rf edit_in_gcc
tar xf edit_in_gcc.tar
cd edit_in_gcc
bk gate $Q .
bk pull $Q 2>ERR || true
bk abort $Q -f || fail
echo OK
