# Copyright 2008-2011,2013-2015 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

echo $N Create an ensemble...........................................$NL
nested project
touch prod_file
bk new $Q prod_file
bk commit -S $Q -yfile
BASEP=`bk changes -r+ -nd:MD5KEY:`
BASEGCC=`cd gcc; bk changes -r+ -nd:MD5KEY:`
bk clone $Q  "$HERE"/project "$HERE"/copy || fail
# add some files
cd gcc
for i in 1 2 3
do
	touch file$i
	echo "stuff $i" > file$i
	bk new $Q -y"add" file$i || fail
done
bk commit -S $Q -y"Add $i to file$i" || fail
bk -P commit $Q -y"Commit cset in gcc" || fail
cd ../gdb
for i in 1 2 3 
do
	touch file$i
	echo "stuff $i" > file$i
	bk new $Q -y"add" file$i || fail
	bk commit -S $Q -y"add file $i" || fail
done
bk -P commit $Q -y"add csets to gdb" || fail
cd ../../copy/gcc
touch local1
echo "stuff 1" > local1
bk new $Q -yadd local1 || fail
bk commit -S $Q -yaddlocal || fail
bk edit $Q ../prod_file
echo 1 >> ../prod_file
bk ci $Q -yupdate ../prod_file || fail
bk -P commit $Q -ylocal || fail
bk edit $Q local1 || fail
echo new >> local1
bk delta $Q -ynewlocal || fail
bk commit -S $Q -ynew || fail
echo OK

echo $N Run project level changes ...................................$NL
bk -P changes  -nd':INDENT::REV: :DPN: :C:' |
    sed 's/BitKeeper file.*/new/' > OUT || fail
cat <<EOF > WANT
1.4 ChangeSet local
1.3 ChangeSet file
1.2 ChangeSet attach gcc, gdb
1.1 ChangeSet Initial repository create
1.0 ChangeSet new
EOF
cmpfiles WANT OUT
echo OK

echo $N Run project level changes -v.................................$NL
bk -P changes  -v -nd':INDENT::REV: :DPN: :C:' |
    sed 's/BitKeeper file.*/new/' > OUT || fail
cat <<EOF > WANT
1.4 ChangeSet local
  1.2 prod_file update
  1.2 gcc/ChangeSet addlocal
    1.1 gcc/local1 add
    1.0 gcc/local1 
1.3 ChangeSet file
  1.1 prod_file new
  1.0 prod_file 
1.2 ChangeSet attach gcc, gdb
  1.2 BitKeeper/etc/aliases Create alias "DEFAULT" containing:	ALL
  1.1 gcc/ChangeSet Initial repository create
    1.1 gcc/BitKeeper/etc/collapsed new
    1.0 gcc/BitKeeper/etc/collapsed 
    1.1 gcc/BitKeeper/etc/config new
    1.0 gcc/BitKeeper/etc/config 
    1.1 gcc/BitKeeper/etc/gone new
    1.0 gcc/BitKeeper/etc/gone 
    1.1 gcc/BitKeeper/etc/ignore new
    1.0 gcc/BitKeeper/etc/ignore 
  1.0 ChangeSet new
  1.1 gdb/ChangeSet Initial repository create
    1.1 gdb/BitKeeper/etc/collapsed new
    1.0 gdb/BitKeeper/etc/collapsed 
    1.1 gdb/BitKeeper/etc/config new
    1.0 gdb/BitKeeper/etc/config 
    1.1 gdb/BitKeeper/etc/gone new
    1.0 gdb/BitKeeper/etc/gone 
    1.1 gdb/BitKeeper/etc/ignore new
    1.0 gdb/BitKeeper/etc/ignore 
  1.0 ChangeSet new
1.1 ChangeSet Initial repository create
  1.1 BitKeeper/etc/aliases new
  1.0 BitKeeper/etc/aliases 
  1.1 BitKeeper/etc/collapsed new
  1.0 BitKeeper/etc/collapsed 
  1.1 BitKeeper/etc/config new
  1.0 BitKeeper/etc/config 
  1.1 BitKeeper/etc/gone new
  1.0 BitKeeper/etc/gone 
  1.1 BitKeeper/etc/ignore new
  1.0 BitKeeper/etc/ignore 
1.0 ChangeSet new
EOF
cmpfiles WANT OUT
echo OK

echo $N Run project level changes -v from component .................$NL
bk changes  -v -nd':INDENT::REV: :DPN: :C:' |
    sed 's/BitKeeper file.*/new/' > OUT || fail
cmpfiles WANT OUT
echo OK

echo $N Project level changes -vv ...................................$NL
bk -P changes -vv -r+ > OUT || fail
grep -q "1.1/gcc/local1" OUT || {
	echo wrong diff header
	cat OUT
	exit 1
}
echo OK

echo $N Demonstrate XML output w extended dspec-syntax ..............$NL
bk -P changes -v -d'# dspec-v2
# $1 = in cset
# $2 = last filename in same component
# $3 = in component
$if(:CHANGESET:) {  # new cset, product or component
	${2=}	# dont match files accross csets
	$if ($3) {	# close last component
		"  </COMPONENT>\n"
		${3=}
	}
	$if(:COMPONENT:) { # component cset
		${3=1}	   # start new component
		"  <COMPONENT path=:DPN: rev=:I:>\n"
		$unless (:I:=1.0) { "    :C:\n" }

	} $else {	   # product cset
		$if ($1) { # close old product cset
			</CSET>\n
		}
		${1=1}     # start new cset
		"<CSET rev=:I:>\n"
		$unless (:I:=1.0) { "  :C:\n" }
	}
} $else {
	# file record
	":INDENT:<FILE path="
		$if (:DPN:=$2) {	# same file as last?
			SAME
		} $else {
			:DPN:
			${2=:DPN:}	# remember file name
		}
		" rev=:I:>\n"
		"    :INDENT::USER:@:HOST:\n"
	:INDENT:</FILE>\n
}

$end{
	$if($3) {	# close any current components
		"  </COMPONENT>\n"
	}
	$if($1) {	# close current cset
		</CSET>\n
	}
}
' > OUT
cat <<EOF > WANT
<CSET rev=1.4>
  local
  <FILE path=prod_file rev=1.2>
      bk@bk_regression.bk
  </FILE>
  <COMPONENT path=gcc/ChangeSet rev=1.2>
    addlocal
    <FILE path=gcc/local1 rev=1.1>
        bk@bk_regression.bk
    </FILE>
    <FILE path=SAME rev=1.0>
        bk@bk_regression.bk
    </FILE>
  </COMPONENT>
</CSET>
<CSET rev=1.3>
  file
  <FILE path=prod_file rev=1.1>
      bk@bk_regression.bk
  </FILE>
  <FILE path=SAME rev=1.0>
      bk@bk_regression.bk
  </FILE>
</CSET>
<CSET rev=1.2>
  attach gcc, gdb
  <FILE path=BitKeeper/etc/aliases rev=1.2>
      bk@bk_regression.bk
  </FILE>
  <COMPONENT path=gcc/ChangeSet rev=1.1>
    Initial repository create
    <FILE path=gcc/BitKeeper/etc/collapsed rev=1.1>
        bk@bk_regression.bk
    </FILE>
    <FILE path=SAME rev=1.0>
        bk@bk_regression.bk
    </FILE>
    <FILE path=gcc/BitKeeper/etc/config rev=1.1>
        bk@bk_regression.bk
    </FILE>
    <FILE path=SAME rev=1.0>
        bk@bk_regression.bk
    </FILE>
    <FILE path=gcc/BitKeeper/etc/gone rev=1.1>
        bk@bk_regression.bk
    </FILE>
    <FILE path=SAME rev=1.0>
        bk@bk_regression.bk
    </FILE>
    <FILE path=gcc/BitKeeper/etc/ignore rev=1.1>
        bk@bk_regression.bk
    </FILE>
    <FILE path=SAME rev=1.0>
        bk@bk_regression.bk
    </FILE>
  </COMPONENT>
  <COMPONENT path=ChangeSet rev=1.0>
  </COMPONENT>
  <COMPONENT path=gdb/ChangeSet rev=1.1>
    Initial repository create
    <FILE path=gdb/BitKeeper/etc/collapsed rev=1.1>
        bk@bk_regression.bk
    </FILE>
    <FILE path=SAME rev=1.0>
        bk@bk_regression.bk
    </FILE>
    <FILE path=gdb/BitKeeper/etc/config rev=1.1>
        bk@bk_regression.bk
    </FILE>
    <FILE path=SAME rev=1.0>
        bk@bk_regression.bk
    </FILE>
    <FILE path=gdb/BitKeeper/etc/gone rev=1.1>
        bk@bk_regression.bk
    </FILE>
    <FILE path=SAME rev=1.0>
        bk@bk_regression.bk
    </FILE>
    <FILE path=gdb/BitKeeper/etc/ignore rev=1.1>
        bk@bk_regression.bk
    </FILE>
    <FILE path=SAME rev=1.0>
        bk@bk_regression.bk
    </FILE>
  </COMPONENT>
  <COMPONENT path=ChangeSet rev=1.0>
  </COMPONENT>
</CSET>
<CSET rev=1.1>
  Initial repository create
  <FILE path=BitKeeper/etc/aliases rev=1.1>
      bk@bk_regression.bk
  </FILE>
  <FILE path=SAME rev=1.0>
      bk@bk_regression.bk
  </FILE>
  <FILE path=BitKeeper/etc/collapsed rev=1.1>
      bk@bk_regression.bk
  </FILE>
  <FILE path=SAME rev=1.0>
      bk@bk_regression.bk
  </FILE>
  <FILE path=BitKeeper/etc/config rev=1.1>
      bk@bk_regression.bk
  </FILE>
  <FILE path=SAME rev=1.0>
      bk@bk_regression.bk
  </FILE>
  <FILE path=BitKeeper/etc/gone rev=1.1>
      bk@bk_regression.bk
  </FILE>
  <FILE path=SAME rev=1.0>
      bk@bk_regression.bk
  </FILE>
  <FILE path=BitKeeper/etc/ignore rev=1.1>
      bk@bk_regression.bk
  </FILE>
  <FILE path=SAME rev=1.0>
      bk@bk_regression.bk
  </FILE>
</CSET>
<CSET rev=1.0>
</CSET>
EOF
cmpfiles WANT OUT
echo OK

echo $N Run project level changes -V.................................$NL
bk -P changes  -V -nd':INDENT::REV: :DPN: :C:' |
    sed 's/BitKeeper file.*/new/' > OUT || fail
cat <<EOF > WANT
1.4 ChangeSet local
  1.2 gcc/ChangeSet addlocal
1.3 ChangeSet file
1.2 ChangeSet attach gcc, gdb
  1.1 gcc/ChangeSet Initial repository create
  1.0 ChangeSet new
  1.1 gdb/ChangeSet Initial repository create
  1.0 ChangeSet new
1.1 ChangeSet Initial repository create
1.0 ChangeSet new
EOF
cmpfiles WANT OUT
echo OK

echo $N Run project level changes -P.................................$NL
bk -P changes  -P -nd':INDENT::REV: :DPN: :C:' |
    sed 's/BitKeeper file.*/new/' > OUT || fail
cat <<EOF > WANT
1.4 ChangeSet local
1.3 ChangeSet file
1.2 ChangeSet attach gcc, gdb
1.1 ChangeSet Initial repository create
1.0 ChangeSet new
EOF
cmpfiles WANT OUT
echo OK

echo $N Run project level changes -V -v..............................$NL
bk -P changes  -V -v -nd':INDENT::REV: :DPN: :C:' |
    sed 's/BitKeeper file.*/new/' > OUT || fail
cat <<EOF > WANT
1.4 ChangeSet local
  1.2 prod_file update
  1.2 gcc/ChangeSet addlocal
    1.1 gcc/local1 add
    1.0 gcc/local1 
1.3 ChangeSet file
  1.1 prod_file new
  1.0 prod_file 
1.2 ChangeSet attach gcc, gdb
  1.2 BitKeeper/etc/aliases Create alias "DEFAULT" containing:	ALL
  1.1 gcc/ChangeSet Initial repository create
    1.1 gcc/BitKeeper/etc/collapsed new
    1.0 gcc/BitKeeper/etc/collapsed 
    1.1 gcc/BitKeeper/etc/config new
    1.0 gcc/BitKeeper/etc/config 
    1.1 gcc/BitKeeper/etc/gone new
    1.0 gcc/BitKeeper/etc/gone 
    1.1 gcc/BitKeeper/etc/ignore new
    1.0 gcc/BitKeeper/etc/ignore 
  1.0 ChangeSet new
  1.1 gdb/ChangeSet Initial repository create
    1.1 gdb/BitKeeper/etc/collapsed new
    1.0 gdb/BitKeeper/etc/collapsed 
    1.1 gdb/BitKeeper/etc/config new
    1.0 gdb/BitKeeper/etc/config 
    1.1 gdb/BitKeeper/etc/gone new
    1.0 gdb/BitKeeper/etc/gone 
    1.1 gdb/BitKeeper/etc/ignore new
    1.0 gdb/BitKeeper/etc/ignore 
  1.0 ChangeSet new
1.1 ChangeSet Initial repository create
  1.1 BitKeeper/etc/aliases new
  1.0 BitKeeper/etc/aliases 
  1.1 BitKeeper/etc/collapsed new
  1.0 BitKeeper/etc/collapsed 
  1.1 BitKeeper/etc/config new
  1.0 BitKeeper/etc/config 
  1.1 BitKeeper/etc/gone new
  1.0 BitKeeper/etc/gone 
  1.1 BitKeeper/etc/ignore new
  1.0 BitKeeper/etc/ignore 
1.0 ChangeSet new
EOF
cmpfiles WANT OUT
echo OK

echo $N Run project level changes -P -v..............................$NL
bk -P changes  -P -v -nd':INDENT::REV: :DPN: :C:' |
    sed 's/BitKeeper file.*/new/' > OUT || fail
cat <<EOF > WANT
1.4 ChangeSet local
  1.2 prod_file update
1.3 ChangeSet file
  1.1 prod_file new
  1.0 prod_file 
1.2 ChangeSet attach gcc, gdb
  1.2 BitKeeper/etc/aliases Create alias "DEFAULT" containing:	ALL
1.1 ChangeSet Initial repository create
  1.1 BitKeeper/etc/aliases new
  1.0 BitKeeper/etc/aliases 
  1.1 BitKeeper/etc/collapsed new
  1.0 BitKeeper/etc/collapsed 
  1.1 BitKeeper/etc/config new
  1.0 BitKeeper/etc/config 
  1.1 BitKeeper/etc/gone new
  1.0 BitKeeper/etc/gone 
  1.1 BitKeeper/etc/ignore new
  1.0 BitKeeper/etc/ignore 
1.0 ChangeSet new
EOF
cmpfiles WANT OUT
echo OK

echo $N Run project level changes -icomp_file........................$NL
bk -P changes  -igcc/local1 -nd':INDENT::REV: :DPN: :C:' |
    sed 's/BitKeeper file.*/new/' > OUT || fail
cat <<EOF > WANT
1.4 ChangeSet local
EOF
cmpfiles WANT OUT
echo OK

echo $N Run component level changes -icomp_file......................$NL
cd ..
bk --cd=gcc changes -S -ilocal1 -nd':INDENT::REV: :DPN: :C:' |
    sed 's/BitKeeper file.*/new/' > OUT || fail
cat <<EOF > WANT
1.3 ChangeSet new
1.2 ChangeSet addlocal
EOF
cmpfiles WANT OUT
cd gcc
echo OK

echo $N Run project level changes -V -icomp_file.....................$NL
bk -P changes  -igcc/local1 -V -nd':INDENT::REV: :DPN: :C:' |
    sed 's/BitKeeper file.*/new/' > OUT || fail
cat <<EOF > WANT
1.4 ChangeSet local
  1.2 gcc/ChangeSet addlocal
EOF
cmpfiles WANT OUT
echo OK

echo $N Run project level changes -P -icomp_file.....................$NL
bk -P changes  -P -igcc/local1 -nd':INDENT::REV: :DPN: :C:' |
    sed 's/BitKeeper file.*/new/' > OUT || fail
cat <<EOF > WANT
1.4 ChangeSet local
EOF
cmpfiles WANT OUT
echo OK

echo $N Run project level changes -v -icomp_file.....................$NL
bk -P changes  --filter -v -igcc/local1 -nd':INDENT::REV: :DPN: :C:' |
    sed 's/BitKeeper file.*/new/' > OUT || fail
cat <<EOF > WANT
1.4 ChangeSet local
  1.2 gcc/ChangeSet addlocal
    1.1 gcc/local1 add
    1.0 gcc/local1 
EOF
cmpfiles WANT OUT
echo OK

echo $N Run component level changes .................................$NL
bk changes --standalone -nd':INDENT::REV: :DPN: :C:' |
    sed 's/BitKeeper file.*/new/' > OUT || fail
cat <<EOF > WANT
1.3 ChangeSet new
1.2 ChangeSet addlocal
1.1 ChangeSet Initial repository create
1.0 ChangeSet new
EOF
cmpfiles OUT WANT
echo OK

echo $N Run component level changes -P...............................$NL
bk changes --standalone -P -nd':INDENT::REV: :DPN: :C:' |
    sed 's/BitKeeper file.*/new/' > OUT || fail
cmpfiles OUT WANT
echo OK

echo $N Run component level changes -V...............................$NL
bk changes --standalone -V -nd':INDENT::REV: :DPN: :C:' |
    sed 's/BitKeeper file.*/new/' > OUT || fail
cmpfiles OUT WANT
echo OK

echo $N Run component level changes -v...............................$NL
bk changes --standalone -v -nd':INDENT::REV: :DPN: :C:' |
    sed 's/BitKeeper file.*/new/' > OUT || fail
cat <<EOF > WANT
1.3 ChangeSet new
  1.2 local1 newlocal
1.2 ChangeSet addlocal
  1.1 local1 add
  1.0 local1 
1.1 ChangeSet Initial repository create
  1.1 BitKeeper/etc/collapsed new
  1.0 BitKeeper/etc/collapsed 
  1.1 BitKeeper/etc/config new
  1.0 BitKeeper/etc/config 
  1.1 BitKeeper/etc/gone new
  1.0 BitKeeper/etc/gone 
  1.1 BitKeeper/etc/ignore new
  1.0 BitKeeper/etc/ignore 
1.0 ChangeSet new
EOF
cmpfiles WANT OUT
echo OK

echo $N Run project level changes -r+................................$NL
# expect on component csets that are committed in project
bk -P changes  -r+ -Pqvnd':GFILE: :C:' > OUT || fail
cat <<EOF > WANT
ChangeSet local
prod_file update
EOF
cmpfiles WANT OUT
echo OK

echo $N Run project level recursive changes .........................$NL
bk -P changes -r+ -qvnd':DPN: :C:' >OUT || {
	exit 1
}
cat <<EOF > WANT
ChangeSet local
prod_file update
gcc/ChangeSet addlocal
gcc/local1 add
gcc/local1 
EOF
cmpfiles WANT OUT
echo OK

echo $N Run project level changes -L ................................$NL
# again only commited stuff
bk -P changes -L -qvnd':GFILE: :C:' > OUT || fail
cat <<EOF > WANT
ChangeSet local
prod_file update
gcc/ChangeSet addlocal
gcc/local1 add
gcc/local1 
EOF
cmpfiles WANT OUT
echo OK

echo $N Run changes -L in component .................................$NL
# should compare matching component and show pending csets
bk changes --standalone -L -qvnd':GFILE: :C:' > OUT || fail
cat <<EOF > WANT
ChangeSet new
local1 newlocal
ChangeSet addlocal
local1 add
local1 
EOF
cmpfiles WANT OUT
echo OK

echo $N Run changes -L in product ...................................$NL
cd ..
bk changes -L -Pqvnd':GFILE: :C:' > OUT || fail
cat <<EOF > WANT
ChangeSet local
prod_file update
EOF
cmpfiles WANT OUT
echo OK

echo $N Check running repogca .......................................$NL
cd gcc
test `bk -P repogca -5` = $BASEP || {
     echo repogca got wrong key
     bk repogca -k
     exit 1
}
test `bk repogca -5` = $BASEGCC || {
     echo repogca got wrong key
     bk repogca
     bk changes
     exit 1
}
echo OK

echo $N Run enemble changes on a file url ...........................$NL
cd "$HERE"
bk changes -nd:GFILE: -qvr+ project | bk _sort -u > OUT || {
	echo failed
	exit 1
}
cat <<EOF > WANT
ChangeSet
gdb/ChangeSet
gdb/file1
gdb/file2
gdb/file3
EOF
cmpfiles WANT OUT
echo OK

echo $N Test filtering of csets .....................................$NL
cd project
bk changes -v --filter -i'*gone' \
  -nd':GFILE:@:REV:$if(:CHANGESET:){ :C:}'  > GOT || fail
cat <<EOF > WANT
ChangeSet@1.2 attach gcc, gdb
gcc/ChangeSet@1.1 Initial repository create
gcc/BitKeeper/etc/gone@1.1
gcc/BitKeeper/etc/gone@1.0
gdb/ChangeSet@1.1 Initial repository create
gdb/BitKeeper/etc/gone@1.1
gdb/BitKeeper/etc/gone@1.0
ChangeSet@1.1 Initial repository create
BitKeeper/etc/gone@1.1
BitKeeper/etc/gone@1.0
EOF
cmpfiles WANT GOT
echo OK

echo $N Test filtering of csets in non-nested .......................$NL
cd "$HERE"
commercial nonest
touch prod_file
bk new $Q prod_file
bk commit $Q -y'file it'
bk changes -v -i'prod_file' \
    -nd'$if(:CHANGESET:){:GFILE:@:REV:}' > WANT || fail
bk changes -i'prod_file' -nd':GFILE:@:REV:' > GOT || fail
cmpfiles GOT WANT
echo OK

echo $N Test filtering of csets in verbose and not verbose ..........$NL
cd "$HERE"/project
bk edit $Q prod_file
bk delta $Q -fynull prod_file
bk edit $Q gcc/file1
bk delta $Q -fynull gcc/file1
(cd gcc; bk commit -S $Q -yin-gcc)
bk commit $Q -y"prod_file and gcc"
bk tag $Q TAG
bk changes -v --filter -i'prod_file' \
    -nd'$if(:CHANGESET:){:GFILE:@:REV:}' > GOT || fail
cat <<EOF > WANT
ChangeSet@1.6
ChangeSet@1.3
EOF
cmpfiles WANT GOT
bk changes --filter -i'prod_file' -nd':GFILE:@:REV:' > GOT || fail
cat <<EOF > WANT
ChangeSet@1.6
ChangeSet@1.3
EOF
cmpfiles GOT WANT
bk changes -i'prod_file' -nd':GFILE:@:REV:' > GOT || fail
cmpfiles GOT WANT
echo OK

echo $N Test filtering of csets that are gone .......................$NL
# sanity check before the gone
printf "1.6\n1.3\n" > WANT
bk changes -i'prod_file' -nd:I: > GOT
cmpfiles WANT GOT
# okay, now test it out
KEY=`bk log -r+ -nd:ROOTKEY: prod_file`
bk _rm -f prod_file SCCS/s.prod_file
bk gone "$KEY" > OUT 2> ERR || fail
bk commit $Q -ygone
bk changes -i'prod_file' -nd:I: > GOT
cmpfiles WANT GOT
echo OK

echo $N Test filtering of files in components .......................$NL
# output nothing because these aren't in the product repo
bk changes --filter -igcc/file1 -nd':GFILE:@:REV:' > GOT || fail
cat <<'EOF' > WANT
ChangeSet@1.6
ChangeSet@1.4
EOF
cmpfiles WANT GOT
bk changes -V --filter -igcc/file1 -nd':GFILE:@:REV:' > GOT || fail
cat <<'EOF' > WANT
ChangeSet@1.6
gcc/ChangeSet@1.3
ChangeSet@1.4
gcc/ChangeSet@1.2
EOF
cmpfiles WANT GOT
bk changes --filter -vigcc/file1 -nd':GFILE:@:REV:' > GOT || fail
cat <<'EOF' > WANT
ChangeSet@1.6
gcc/ChangeSet@1.3
gcc/file1@1.2
ChangeSet@1.4
gcc/ChangeSet@1.2
gcc/file1@1.1
gcc/file1@1.0
EOF
cmpfiles WANT GOT
echo OK

echo $N Test renaming file and component and :DPN: stays same .......$NL
# for next test, save the GFILE data:
bk changes -vrTAG -nd:GFILE: > gfile.BEFORE
# okay, back to this test:
bk changes -vrTAG > BEFORE
cd gcc
bk mv file1 moveit
cd ../gdb
bk mv file3 moveit3
bk commit -S $Q -ymvfiles
cd ..
mvcomp gcc newcc
bk commit -S $Q -yallmv
bk changes -vrTAG > AFTER
cmpfiles BEFORE AFTER
echo OK

echo $N Test renames command ........................................$NL
bk renames -r+ | bk _sort > GOT
cat > WANT  <<EOF
gcc/ChangeSet -> newcc/ChangeSet
gcc/file1 -> newcc/moveit
gdb/file3 -> gdb/moveit3
EOF
cmpfiles WANT GOT
cd gdb
bk renames -r+ | bk _sort > GOT
cd ..
cmpfiles WANT gdb/GOT
echo OK

echo $N Test renames -S command .....................................$NL
bk renames -Sr+ | bk _sort > GOT
cat > WANT  <<EOF
gcc/ChangeSet -> newcc/ChangeSet
EOF
cmpfiles WANT GOT
cd newcc
bk renames -Sr+ | bk _sort > GOT
cat > WANT  <<EOF
file1 -> moveit
EOF
cmpfiles WANT GOT
cd ..
echo OK

echo $N Test renaming file and component and :GFILE: changes ........$NL
# for next test, save the GFILE data:
bk changes -vrTAG -nd:GFILE: > gfile.AFTER
cmp -s gfile.BEFORE gfile.AFTER && fail
cat << EOF > WANT
ChangeSet
newcc/ChangeSet
newcc/moveit
EOF
cmpfiles WANT gfile.AFTER
echo OK

## picking at the meaningless corners :(
echo $N Test -xfoo prints a merge cset ..............................$NL
cd "$HERE"
bk clone $Q project copy2
cd project/gdb
bk edit $Q file2
bk delta $Q -fynull file2
bk commit -S $Q -ynull
cd ..
bk commit $Q -ynullinproj
cd ../copy2/gdb
bk edit $Q moveit3
bk delta $Q -fynull moveit3
bk commit -S $Q -ynull
cd ..
bk commit $Q -ynullincopy
bk pull $Q
bk changes --filter -er+ -xfoo -nd:I: > GOT
bk changes -r+ -nd:I: > WANT
cmpfiles WANT GOT
echo OK

echo $N 'Test $begin and $end ........................................'$NL
cd "$HERE/project"
bk changes -v --dspecbegin='${9=<LIST>}' -nd'# dspec-v2
$begin {
	$9
}
$if (:CHANGESET: && :COMPONENT:) {
    	$if ($1 != :GFILE:) {
	        # put list brackets around each component cset
		$if ($1) {:INDENT:</LIST>\n}
		:INDENT:<LIST>\n
		${1=:GFILE:}
	}
}
":INDENT:  :GFILE:|:I:"
$end {
	$if ($1) {
		"  </LIST>\n"
	}
	</LIST>
}
' -r1.2 > GOT
cat <<'EOF' > WANT
<LIST>
  ChangeSet|1.2
    BitKeeper/etc/aliases|1.2
  <LIST>
    newcc/ChangeSet|1.1
      newcc/BitKeeper/etc/collapsed|1.1
      newcc/BitKeeper/etc/collapsed|1.0
      newcc/BitKeeper/etc/config|1.1
      newcc/BitKeeper/etc/config|1.0
      newcc/BitKeeper/etc/gone|1.1
      newcc/BitKeeper/etc/gone|1.0
      newcc/BitKeeper/etc/ignore|1.1
      newcc/BitKeeper/etc/ignore|1.0
    newcc/ChangeSet|1.0
  </LIST>
  <LIST>
    gdb/ChangeSet|1.1
      gdb/BitKeeper/etc/collapsed|1.1
      gdb/BitKeeper/etc/collapsed|1.0
      gdb/BitKeeper/etc/config|1.1
      gdb/BitKeeper/etc/config|1.0
      gdb/BitKeeper/etc/gone|1.1
      gdb/BitKeeper/etc/gone|1.0
      gdb/BitKeeper/etc/ignore|1.1
      gdb/BitKeeper/etc/ignore|1.0
    gdb/ChangeSet|1.0
  </LIST>
</LIST>
EOF
cmpfiles WANT GOT
echo OK

echo $N Try changes between unrelated products.......................$NL
cd "$HERE"
fresh_nested n1
cd "$HERE"
fresh_nested n2
bk changes -qRL $Q "$HERE/n1" 2>ERR && fail -f ERR should have failed
grep -q "You are trying to synchronize with an unrelated package." ERR \
	|| fail -f ERR wrong error msg
echo OK

echo $N Try changes from non-nested to nested........................$NL
cd "$HERE"
fresh_commercial nn
bk changes -qRL "$HERE/n1" 2>ERR && fail -f ERR should have failed
grep -q "You are trying to synchronize with an unrelated package." ERR \
	|| fail -f ERR wrong error msg
echo OK

echo $N Try changes from nested to non-nested........................$NL
cd "$HERE/n1"
bk changes -qRL "$HERE/nn" 2>ERR && fail -f ERR should have failed
grep -q "You are trying to synchronize with an unrelated package." ERR \
	|| fail -f ERR wrong error msg
echo OK

echo $N Try changes URL while in component...........................$NL
cd gcc
bk changes -qr+ "$HERE"/project > "$HERE"/OUT || fail
cd "$HERE"/project
bk changes -r+ > ../WANT
cd ..
cmpfiles OUT WANT
echo OK

echo $N Try changes URL to a component ..............................$NL
cd "$HERE"
bk changes -qr+ n1/gcc 2>ERR && fail -f ERR should fail
sed "s,$HERE,ROOT," < ERR > ERR2
cat <<EOF > WANT
file://ROOT/n1/gcc: components require --standalone
EOF
cmpfiles ERR2 WANT

# but -S works
bk changes -qSr+ n1/gcc > OUT || fail -f OUT
cd n1/gcc
bk changes -Sr+ > ../../WANT
cd ../..
cmpfiles OUT WANT
echo OK

echo $N Try changes -L to a component ...............................$NL
cd copy/gcc
bk changes -qL -nd:DPN:@:REV: "$HERE"/project/newcc 2>ERR && fail -f ERR
sed "s,$HERE,ROOT," < ERR > ERR2
cat <<EOF > WANT
===============================================================================
You are trying to synchronize with an unrelated package.
Please check the names and try again.
===============================================================================
EOF
cmpfiles ERR2 WANT

# but -S works
bk changes -qSL -nd:COMPONENT::DPN:@:REV: "$HERE"/project/newcc > OUT || {
	fail -f OUT
}
cat <<EOF > WANT
gcc/ChangeSet@1.3
gcc/ChangeSet@1.2
EOF
cmpfiles OUT WANT
echo OK

echo $N Try changes -R to a component ...............................$NL
bk changes -qR -nd:DPN:@:REV: "$HERE"/project/newcc 2>ERR && fail -f ERR
sed "s,$HERE,ROOT," < ERR > ERR2
cat <<EOF > WANT
===============================================================================
You are trying to synchronize with an unrelated package.
Please check the names and try again.
===============================================================================
EOF
cmpfiles ERR2 WANT

# but -S works
bk changes -qSR -nd:COMPONENT::DPN:@:REV: "$HERE"/project/newcc > OUT || {
	fail -f OUT
}
cat <<EOF > WANT
newcc/ChangeSet@1.4
newcc/ChangeSet@1.3
newcc/ChangeSet@1.2
EOF
cmpfiles OUT WANT
echo OK
