# Copyright 2000-2006,2008,2010,2014 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

echo $N Create initial repository ...................................$NL
commercial project
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if bk _test ! -f SCCS/s.ChangeSet; then echo failed to make ChangeSet; exit 1; fi
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo files are pending; bk pending; exit 1; fi
echo OK

echo $N Create 2 change set \& export ................................$NL
# commit the config file
mkdir src
cd "$HERE/project/src"
echo foo > foo_init.c
bk admin $Q -r1.1 -ifoo_init.c  foo.c
rm foo_init.c
bk co $Q -l foo.c
bk commit $S -y"This is \"Change Set\" A" --tag=CSET_A
echo foo-new >> foo.c
bk ci $Q -y foo.c
date > "$HERE/project/BitKeeper/etc/data"
bk ci $Q -i "$HERE/project/BitKeeper/etc/data"
bk commit $S -y"This is a \"Change Set\" B" --tag=CSET_B
cd "$HERE/project"
# the sed script filters off the time which might not match
bk export -hT -tpatch -r1.2,1.3 | sed -e 's/foo\.c.*/foo.c/' > "$HERE/CMP1"
cd "$HERE/project"
bk export -T -k -r1.2 "$HERE/a"
bk export -T -k -r1.3 "$HERE/b"
cd "$HERE"
bk diff -Nru a b | sed -e 's/foo\.c.*/foo.c/' > "$HERE/CMP2"
bk diff -c CMP1 CMP2
if [ $? -ne 0 ]; then echo failed; exit 1; fi
echo OK
rm -rf "$HERE/a" "$HERE/b"

echo $N Test file w no 1.0 delta ....................................$NL
cd "$HERE/project/src"
echo bar > bar_init.c
bk admin $Q -r1.1 -ibar_init.c  bar.c
rm bar_init.c
echo bar2 > bar2_init.c
bk admin $Q -r1.1 -ibar2_init.c  bar2.c
rm bar2_init.c
bk co $Q -l bar2.c
echo bar2-new >> bar2.c
bk ci $Q -y bar2.c
bk commit $S -y"This is a \"Change Set\" C" --tag=CSET_C
cd "$HERE/project"
bk export -T -k -r1.3 "$HERE/a"
bk export -hT -tpatch -r1.3,1.4 > patch
grep -q "Wed Dec 31 16:00:00 196900" patch && {
	echo fix the awc /dev/null bug
	grep /dev/null patch
	exit 1
}
bk patch -sp 1 -d "$HERE/a" < patch
bk export -T -k -r1.4 "$HERE/b"
bk diff -r "$HERE/a" "$HERE/b"
if [ $? -ne 0 ]; then echo failed; else echo OK; fi
rm -rf "$HERE/a" "$HERE/b"

echo $N Test chaining rename ........................................$NL
cd "$HERE/project/src"
bk mv bar.c moo.c
bk mv foo.c bar.c
echo >  foo.c
bk ci $Q -i foo.c
bk commit $S -y"abc"
cd "$HERE/project"
bk export -T -k -r1.4 "$HERE/a"
bk export -hT -tpatch -r1.4,1.5 > patch
bk patch -sp 1 -d "$HERE/a" < patch
bk export -T -k -r1.5 "$HERE/b"
bk diff -r "$HERE/a" "$HERE/b"
if [ $? -ne 0 ]; then echo "failed"; exit 1; fi
echo OK
rm -rf "$HERE/a" "$HERE/b"

echo $N Test delete .................................................$NL
cd "$HERE/project/src"
bk rm bar.c
bk commit $S -y"abc"
cd "$HERE/project"
bk export -T -k -r1.5 "$HERE/a"
bk export -hT -tpatch -r1.5,1.6 > patch 
bk patch -sp 1 -d "$HERE/a" < patch
bk export -T -k -r1.6 "$HERE/b"
bk diff -r "$HERE/a" "$HERE/b"
if [ $? -ne 0 ]; then echo failed; exit 1;  fi
echo OK
rm -rf "$HERE/a" "$HERE/b"

echo $N Test reverse patch \& un-delete ..............................$NL
bk export -T -k -r1.6 "$HERE/a"
bk export -hT -tpatch -r1.6,1.5 > patch
bk patch -sp 1 -d "$HERE/a" < patch
bk export -T -k -r1.5 "$HERE/b"
bk diff -r "$HERE/a" "$HERE/b"
if [ $? -ne 0 ]; then echo failed; exit 1; fi
echo OK
rm -rf "$HERE/a" "$HERE/b"

echo $N Test reverse patch \& reverse-rename .........................$NL
cd "$HERE/project"
bk export -T -k -r1.5 "$HERE/a"
bk export -hT -tpatch -r1.5,1.4 > patch
bk patch -sp 1 -d "$HERE/a" < patch
bk export -T -k -r1.4 "$HERE/b"
bk diff -r "$HERE/a" "$HERE/b"
if [ $? -ne 0 ]; then echo "failed"; exit 1; fi
echo OK
rm -rf "$HERE/a" "$HERE/b"

echo $N Test patch with csetkeys instead of revs ....................$NL
k14=`bk prs -hnd:KEY: -r1.4`
k15=`bk prs -hnd:KEY: -r1.5`
bk export -hT -tpatch -r"$k15,$k14" > patch2
checkfiles patch patch2
echo OK

echo $N Test non-adjacent ChangeSet .................................$NL
cd "$HERE/project"
bk export -T -k -r1.1 "$HERE/a"
bk export -hT -tpatch -r1.1,1.6 > patch
bk patch -sp 1 -d "$HERE/a" < patch
bk export -T -k -r1.6 "$HERE/b"
bk diff -r "$HERE/a" "$HERE/b"
if [ $? -ne 0 ]; then echo "failed"; exit 1; fi
echo OK
rm -rf "$HERE/a" "$HERE/b"

echo $N Test reverse non-adjacent ChangeSet .........................$NL
cd "$HERE/project"
bk export -T -k -r1.5 "$HERE/a"
bk export -hT -tpatch -r1.5,1.1 > patch
bk patch -sp 1 -d "$HERE/a" < patch
bk export -T -k -r1.1 "$HERE/b"
bk diff -r "$HERE/a" "$HERE/b"
if [ $? -ne 0 ]; then echo "failed"; exit 1; fi
echo OK
rm -rf "$HERE/a" "$HERE/b"

echo $N Test file transposition .....................................$NL
cd "$HERE/project/src"
bk co $Q -l  foo.c moo.c
echo "foo-t" >> foo.c
echo "moo-t" >> moo.c
bk ci $Q -y foo.c moo.c
bk mv foo.c tmp
bk mv moo.c foo.c
bk mv tmp moo.c
bk commit $S -y"abc"
cd "$HERE/project"
bk export -T -k -r1.6 "$HERE/a"
bk export -hT -tpatch -r1.6,1.7 > patch
bk patch -sp 1 -d "$HERE/a" < patch
bk export -T -k -r1.7 "$HERE/b"
bk diff -r "$HERE/a" "$HERE/b"
if [ $? -ne 0 ]; then echo "failed"; exit 1; fi
echo OK
rm -rf "$HERE/a" "$HERE/b"

echo $N Create a new file with the same name as a deleted file ......$NL
cd "$HERE/project/src"
echo dup > dup.c
bk ci $Q -i dup.c
bk commit $S -y"dup"
bk rm dup.c
# XXX need "sleep 1" to avoid dup key problen
sleep 1
echo new-dup > dup.c
bk ci $Q -i dup.c
bk commit $S -y"new-dup"
bk co $Q -l moo.c
echo "moo-update" > moo.c
bk ci $Q -y moo.c
bk commit $S -y"moo-update"
bk export -T -k -r1.9 "$HERE/a"
bk export -hT -tpatch -r1.9,1.10 > mkdiffs.out
grep "/dev/null" mkdiffs.out
if [ $? -eq 0 ]; then echo "failed"; exit 1; fi
grep "dup.c" mkdiffs.out
if [ $? -eq 0 ]; then echo "failed"; exit 1; fi
bk patch -sp 1 -d "$HERE/a" < mkdiffs.out
bk export -T -k -r1.10 "$HERE/b"
bk diff -r "$HERE/a" "$HERE/b"
if [ $? -ne 0 ]; then echo "failed"; exit 1; fi
echo OK

echo $N Test patch with non-existant tag ............................$NL
bk export -tpatch -rCSET_B,BADCSET 2> OUT && {
	echo export should not have worked
	exit 1
}
grep -q "rset: no such delta \`\`BADCSET'' in ChangeSet" OUT || {
	echo Didn\'t find expected error message
	cat OUT
	exit 1
}
bk export -tpatch -rBADCSET,CSET_B 2> OUT && {
	echo export should not have worked
	exit 1
}
grep -q "rset: no such delta \`\`BADCSET'' in ChangeSet" OUT || {
	echo Didn\'t find expected error message
	cat OUT
	exit 1
}
echo OK

echo $N Test patch using keys .......................................$NL
KEYA=`bk changes -rCSET_A -k`
KEYB=`bk changes -rCSET_B -k`
bk export -T -tpatch -rCSET_A,CSET_B > PATCH1 || fail
bk export -T -tpatch -r"$KEYA","$KEYB" > PATCH2 || fail
cmpfiles PATCH1 PATCH2
echo OK

echo $N Test with edited file containing exclude ....................$NL
bk edit $Q -x+ moo.c
bk export -tpatch -rCSET_A,+ > PATCH1 || fail
echo OK
