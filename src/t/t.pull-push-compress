# Copyright 2000-2002,2005-2010,2015 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file test push pull between when one reposity is compressed
# and the other is not.

BK_REMOTEBIN="`bk bin`"
export BK_REMOTEBIN

# Tests for pull, push, and clone.
echo $N Create initial repository ...................................$NL
commercial project
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if bk _test ! -f SCCS/s.ChangeSet; then echo failed to make ChangeSet; exit 1; fi
bk edit $Q BitKeeper/etc/config
echo 'compression:gzip' >> BitKeeper/etc/config
bk ci $Q -yyy BitKeeper/etc/config
bk commit $Q -yyy
bk -r admin -Zgzip
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo files are pending; bk pending; exit 1; fi
mkdir src
cd src
echo foo > 'F!O#O$ B%A^R&RR(R)RR'
echo bar > bar.c
echo h > h.h
bk ci $Q -i 'F!O#O$ B%A^R&RR(R)RR' bar.c h.h
if bk _test ! -f SCCS/s.'F!O#O$ B%A^R&RR(R)RR'; then echo failed to create history; exit 1; fi
P=`bk pending | wc -l`
if [ $P -ne 15 ]; then echo wrong pending result $P; bk pending; exit 1; fi
bk commit $S -yCset
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo failed to clear pending list; bk pending; exit 1; fi
echo OK
cores

echo $N Clone repository ............................................$NL
cd "$HERE"
bk clone $Q "$HERE/project" "$HERE/copy" || { echo failed; exit 1; }
bk -r"$HERE/copy"  admin -Z 
bk _test -f copy/src/SCCS/s.'F!O#O$ B%A^R&RR(R)RR' || { echo failed; exit 1; }
[ -f copy/BitKeeper/log/parent ] || { echo no parent; exit 1; }
parent=`cat copy/BitKeeper/log/parent`
host=`bk gethost`
[ "x$parent" = xfile://"$HERE/project" ] || \
					{ echo wrong parent $parent; exit 1; }
cd "$HERE/project"; checkLocks; cd "$HERE/copy"; checkLocks
echo OK

echo $N Pull with no changes in child ...............................$NL
cd "$HERE/project/src"
bk get $Q -e 'F!O#O$ B%A^R&RR(R)RR'
echo delta two >> 'F!O#O$ B%A^R&RR(R)RR'
bk delta $Q -y2 'F!O#O$ B%A^R&RR(R)RR'
bk commit $Q -y2
cd "$HERE/copy"
bk pull $Q || { echo failed; exit 1; }
revs=`bk prs -hd':I:\n' src/'F!O#O$ B%A^R&RR(R)RR' | wc -l`
[ $revs -eq 2 ] || { echo failed; exit 1; }
cd "$HERE/project"; checkLocks; cd "$HERE/copy"; checkLocks
echo OK

if [ $DO_REMOTE = YES ]; then
 cd "$HERE/copy"
 echo $N Pull with explicit remote parent ............................$NL
 bk pull $Q localhost:"$HERE/project" || { echo failed; exit 1; }
 revs=`bk prs -hd':I:\n' src/'F!O#O$ B%A^R&RR(R)RR' | wc -l`
 [ $revs -eq 2 ] || { echo failed; exit 1; }
 cd "$HERE/project"; checkLocks; cd "$HERE/copy"; checkLocks
 echo OK

 echo $N Pull with explicit remote parent and username ...............$NL
 cd "$HERE/copy"
 bk pull $Q $USER@localhost:"$HERE/project" > /dev/null 2>&1 ||
							{ echo failed; exit 1; }
 revs=`bk prs -hd':I:\n' src/'F!O#O$ B%A^R&RR(R)RR' | wc -l`
 [ $revs -eq 2 ] || { echo failed; exit 1; }
 cd "$HERE/project"; checkLocks; cd "$HERE/copy"; checkLocks
 echo OK

 echo $N Pull with explicit local parent .............................$NL
 cd "$HERE/copy"
 HOSTNAME=`bk gethost -r`
 bk pull $Q $HOSTNAME:"$HERE/project" > /dev/null 2>&1 ||
							{ echo failed; exit 1; }
 revs=`bk prs -hd':I:\n' src/'F!O#O$ B%A^R&RR(R)RR' | wc -l`
 [ $revs -eq 2 ] || { echo failed; exit 1; }
 cd "$HERE/project"; checkLocks; cd "$HERE/copy"; checkLocks
 echo OK

 echo $N Pull with explicit local parent and username ................$NL
 bk pull $Q $USER@$HOSTNAME:"$HERE/project" > /dev/null 2>&1 ||
							{ echo failed; exit 1; }
 revs=`bk prs -hd':I:\n' src/'F!O#O$ B%A^R&RR(R)RR' | wc -l`
 [ $revs -eq 2 ] || { echo failed; exit 1; }
 echo OK

else
 echo Pull with explicit remote parent ............................skipped
 echo Pull with explicit remote parent and username................skipped
 echo Pull with explicit local parent .............................skipped
 echo Pull with explicit local parent and username ................skipped
fi

echo $N Pull from subdirectory of repository ........................$NL
cd src
bk pull $Q || { echo failed; exit 1; }
revs=`bk prs -hd':I:\n' 'F!O#O$ B%A^R&RR(R)RR' | wc -l`
[ $revs -eq 2 ] || { echo failed; exit 1; }
echo OK

echo $N Pull with mergeable changes in child ........................$NL
bk get $Q -e bar.c
echo line three >>bar.c
bk delta $Q -ythree bar.c
bk commit $Q -ythree
cd "$HERE/project/src"
bk get $Q -e bar.c
mv bar.c bar.x
echo line zero >bar.c
cat bar.x >>bar.c
rm -f bar.x
bk delta $Q -yzero
bk commit $Q -y0
cd "$HERE/copy"
bk pull $Q || { echo failed; exit 1; }
cd src
cat > X <<EOF
line zero
bar
line three
EOF
bk undos X > ref-bar.c
bk get $Q bar.c
cmp -s ref-bar.c bar.c
[ $? -eq 0 ] || { echo failed; diff ref-bar.c bar.c; exit 1; }
echo OK

bk clean 
echo $N Push with no upstream deltas ................................$NL
bk push $Q || { echo failed; exit 1; }
mv ref-bar.c "$HERE/project/src"
cd "$HERE/project/src"
bk get $Q bar.c
cmp -s ref-bar.c bar.c
[ $? -eq 0 ] || { echo failed; diff ref-bar.c bar.c; exit 1; }
cd "$HERE/project"; checkLocks; cd "$HERE/copy"; checkLocks
echo OK

bk clean 
rm -f ref-bar.c
echo $N Push with an unrelated upstream delta .......................$NL
cd "$HERE/project"
date > stamp
bk delta $Q -i stamp
bk commit $Q -ytime
KEY="`bk prs -hd:KEY: -r+ ChangeSet`"
cd "$HERE/copy/src"
bk get $Q -e h.h
sed 's/h/qwerty/' <h.h >h.x
mv h.x h.h
bk delta $Q -ydvorak h.h
cd ..
bk commit $Q -yzxcvbnm
bk push -a $Q 2>ERR || { echo push w/ autopull failed; exit 1; }
grep -q "The repository you are pushing to is 1 csets/tags" ERR || {
	echo wrong error message
	cat ERR
	exit 1
}
cd "$HERE/project"
KEY2="`bk prs -hd:KEY: -r+ ChangeSet`"
[ "$KEY" = "$KEY2" ] || { echo bad push; exit 1; }
cd "$HERE/project"; checkLocks; cd "$HERE/copy"; checkLocks
echo OK

echo $N Push with a conflicting upstream delta ......................$NL
cd "$HERE/project/src"
bk get $Q -e h.h
sed 's/h/yuhjklbn/' <h.h >h.x
mv h.x h.h
bk delta $Q -yrogue h.h
cd ..
bk commit $Q -yrogue
KEY="`bk prs -hd:KEY: -r+ ChangeSet`"
cd "$HERE"
tar cf PUSH.tar project copy
cd "$HERE/copy"
_BK_PREVENT_RESOLVE_RERUN=1 bk push -a $Q 2> resolve.out
test $? -ne 0 || { echo failed; cat resolve.out; exit 1; }
grep -q 'unresolved conflicts, nothing is applied' resolve.out || {
	echo should have had conflicts, but did not
	cat resolve.out
	exit 1
}
KEY2="`bk prs -hd:KEY: -r+ "$HERE/project/ChangeSet"`"
[ "$KEY" = "$KEY2" ] || { echo bad push; exit 1; }
echo OK

echo $N Resolve by hand and push again ..............................$NL
bk resolve $Q -F <<EOF >resolve.out 2>&1
m
C
whatever
.
u
EOF
[ $? -eq 0 ] || { echo resolve failed; cat resolve.out; exit 1; }
L=`bk get $Q -p src/h.h | wc -l`
target=7
if [ "X$BK_RESOLVE_MERGEPROG" = "Xmerge" ]; then
	target=5
fi
[ $L -eq $target ] || { echo merge failed; exit 1; }
cd "$HERE/project"; checkLocks; cd "$HERE/copy"; checkLocks
cd "$HERE"
cp -rp project project2
cp -rp project project3
cd copy
KEY="`bk prs -hd:KEY: -r+ ChangeSet`"
bk push $Q || { echo failed; exit 1; }
KEY2="`cd "$HERE/project" && bk prs -hd:KEY: -r+ ChangeSet`"
[ "$KEY" = "$KEY2" ] || { echo no push; exit 1; }
cd "$HERE/project"; checkLocks; cd "$HERE/copy"; checkLocks
echo OK

if [ $DO_REMOTE = YES -a X$NO_TTY = X ]; then
 echo $N Push with explicit remote parent ............................$NL
 cd "$HERE/copy"
 bk push localhost:"$HERE/project2" > OUT 2>&1 || {
 	echo failed
	cat OUT
	exit 1
 }
 KEY2="`cd "$HERE/project2" && bk prs -hd:KEY: -r+ ChangeSet`"
 [ "$KEY" = "$KEY2" ] || { echo no push; exit 1; }
 cd "$HERE/project"; checkLocks; cd "$HERE/copy"; checkLocks
 echo OK
else
 echo Push with explicit remote parent ............................skipped
fi

echo $N Push with conflict in uncomitted remote delta ...............$NL
cd "$HERE/copy/src"
bk get $Q -e 'F!O#O$ B%A^R&RR(R)RR'
sed 's/delta two/delta two-local/' 'F!O#O$ B%A^R&RR(R)RR'  > x
mv x 'F!O#O$ B%A^R&RR(R)RR'
bk delta $Q -y 'F!O#O$ B%A^R&RR(R)RR'
cd "$HERE/project/src"
bk get $Q -e 'F!O#O$ B%A^R&RR(R)RR'
sed 's/delta two/delta two-remote/' 'F!O#O$ B%A^R&RR(R)RR'  > x
mv x 'F!O#O$ B%A^R&RR(R)RR'
bk delta $Q -y 'F!O#O$ B%A^R&RR(R)RR'
bk commit $Q -ytest
bk push "$HERE/copy" > push.out 2>&1
grep -q "has uncommitted changes" push.out
if [ $? -ne 0 ]; then echo failed; cat push.out; exit 1; fi
echo OK

echo $N pull with a delete event ....................................$NL
bk clone $Q "$HERE/project" "$HERE/copy2"
bk -r"$HERE/copy2" admin -Z 
cd "$HERE/project/src"
bk rm 'F!O#O$ B%A^R&RR(R)RR'
bk commit $Q -ydelete
cd "$HERE/copy2/src"
bk get $Q 'F!O#O$ B%A^R&RR(R)RR'
bk pull $Q "$HERE/project"
if [ -f 'F!O#O$ B%A^R&RR(R)RR' ]; then echo failed to delete gfile; exit 1; fi
echo OK

echo $N pull with a mvdir event .....................................$NL
cd "$HERE/project"
bk mvdir src src2/src3
bk commit $Q -ymvdir
cd "$HERE/copy2"
bk pull $Q "$HERE/project"
if bk _test ! -f src2/src3/SCCS/s.bar.c; then echo failed; exit 1; fi
if bk _test ! -f src2/src3/SCCS/s.h.h; then echo failed; exit 1; fi
echo OK

echo $N pull from read-only server should work fine .................$NL
cd "$HERE/project"
echo hi > test
bk new $Q test
bk commit $Q -ytt || fail
bk _chmod 555 SCCS
cd "$HERE/copy2"
bk pull $Q || {
	echo pull failed
	bk _chmod 777 "$HERE/project/SCCS"
	exit 1
}
bk _chmod 777 "$HERE/project/SCCS"
echo OK
