# Copyright 2011-2016 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# 6.0 introduced BK file format.

OLDVER=6.0
OLDBK=/build/bitkeeper-$OLDVER

# use new parallel clone in tests
_BK_FSTYPE=nfs
export _BK_FSTYPE

# kill any uniq_server that may be running out of ~/.bk
BK_DOTBK="$HOME/.bk" bk uniq_server $Q --dir="$HOME/.bk/bk-keys-db/`bk gethost -r`" --quit

echo $N Check bitkeeper 6.0 installation ............................$NL

if [ -n "$BK_DEV_SKIPTEST" ]; then echo skipped; exit 0; fi
# Skip this test for Windows VISTA
test -d $OLDBK || {
	OSTYPE=`uname -s`
	case $OSTYPE in
		MINGW32_NT-6.*) echo skipped; exit 0;;
	esac
}
# http://config.bitmover.com:7777/cgi-bin/view.cgi?id=2016-05-02-002
BKL_PRO=BKL65908cc51572709000001200fffff000000000
BKL_P1=YgAAAo4AAAADgQAAAAHZK6YXrWpbvvL7wuT1Fj8Z4gsjm633vW6T8Irespi/d1GL
BKL_P2=LltIV1NobkMykn2BWS45ph8r+VpBbslq4r8cOffc7UK3qd40y6uFW+ud1mMUJjYm
BKL_P3=Jl+mK0yL7V9E8uvsWU8VF6Wr/0lFDLZOMAbLUeTnh3EM8WcTqE0oar00Wygc0A==

echo license: $BKL_PRO > c
echo licsign1: $BKL_P1 >> c
echo licsign2: $BKL_P2 >> c
echo licsign3: $BKL_P3 >> c
mv c "`bk dotbk`"/config
test -d $OLDBK || {
    # Skip this test if we don't have at least 5gigs free
    df -Pk /build 2>/dev/null |
        perl -e '$_ = <>; $_ = <>; exit 0 if /^\S+\s+\d+\s+\d+\s+(\d+)\s+\d+%/ && $1 > 5e6; exit 1' || {
	echo skipped
	exit 0
    }
    bk upgrade $Q -f -d $BK_TCOMPAT_ARCH \
	    http://downloads.bitkeeper.com/unsupported/bk-$OLDVER >out 2>ERR || {
	    grep -q "No upgrade for the arch.*found" ERR && {
	        # can use $BK_TCOMPAT_ARCH to fix if your platform
		# isn't one of the official
		echo skipped
		exit 0
	    }
	    echo image fetch failed
	    exit 1
    }
    # NOTE bk-3.2.x didn't set exit status...
    echo y | BK_NOLINKS=1 ./bk-$OLDVER-* $OLDBK >out 2>err || fail
    rm -f $OLDBK/config
}
$OLDBK/bk _eula -a

# generate a crypto key for tests
test -f "$OLDBK/my.pub" || {
    $OLDBK/bk crypto -i 1024 $OLDBK/my.sec $OLDBK/my.pub || fail
}
VER=`$OLDBK/bk version -s`
test X$VER = X$OLDVER || {
	echo bk not installed correctly
	exit 1
}
echo OK

mkBINs

echo -------------- crypto tests
echo $N New and old version should generate the same signature ......$NL
$OLDBK/bk crypto -s $OLDBK/my.sec < "$BIN2" > sig1 || fail
bk crypto -s $OLDBK/my.sec < "$BIN2" > sig2 || fail
echo OK

echo $N New and old versions should validate signature ..............$NL
$OLDBK/bk crypto -v $OLDBK/my.pub sig1 < "$BIN2" || fail
bk crypto -v $OLDBK/my.pub sig1 < "$BIN2" || fail
$OLDBK/bk crypto -v $OLDBK/my.pub sig2 < $BIN2 || fail
bk crypto -v $OLDBK/my.pub sig2 < "$BIN2" || fail
echo OK

echo $N Old version encrypts and new version decrypts ...............$NL
$OLDBK/bk crypto -e $OLDBK/my.pub < "$BIN2" > enc || fail
bk crypto -d $OLDBK/my.sec < enc > out || fail
cmp -s "$BIN2" out || fail
rm -f enc out
echo OK

echo $N New version encrypts and old version decrypts ...............$NL
bk crypto -e $OLDBK/my.pub < "$BIN2" > enc || fail
$OLDBK/bk crypto -d $OLDBK/my.sec < enc > out || fail
cmp -s "$BIN2" out || fail
rm -f enc out
echo OK

KEY=64338d0365e3c7da
echo $N New and old versions should symetric encrypt to same data ...$NL
$OLDBK/bk crypto -E $KEY < "$BIN2" > enc1 || fail
bk crypto -E $KEY < "$BIN2" > enc2 || fail
cmp -s enc1 enc2 || fail
rm -f enc2
echo OK

echo $N Both versions should be able to decrypt data ................$NL
$OLDBK/bk crypto -D $KEY < enc1 > out || fail
cmp -s "$BIN2" out || fail
bk crypto -D $KEY < enc1 > out || fail
cmp -s "$BIN2" out || fail
rm -f enc1 out
echo OK

echo $N Check hashing with new and old versions .....................$NL
$OLDBK/bk crypto -h - < "$BIN2" > hash1
bk crypto -h - < "$BIN2" > hash2 || fail
cmpfiles hash1 hash2
echo OK

echo $N Check hmacs with new and old versions .......................$NL
$OLDBK/bk crypto -h - key < "$BIN2" > hash1
bk crypto -h - key < "$BIN2" > hash2 || fail
cmpfiles hash1 hash2
echo OK

echo $N Start new and old bkds ......................................$NL
cd "$HERE"
OLDP=`port 54500`
# old bkd will have "No root for triggers!" ttyprintf
$OLDBK/bk bkd -d -aPORT -ikill 2> OLDERR || fail -f OLDERR
OLDP=`cat PORT`
bk bkd -d -aPORT -ikill 2> NEWERR || fail -f NEWERR
NEWP=`cat PORT`
trap "bk _kill bk://localhost:$OLDP; bk _kill bk://localhost:$NEWP" 0
echo OK

echo -------------- clone compat tests

echo $N Clone from old bkd and make sure we do checkouts ............$NL
cd "$HERE"
fresh_commercial --compat project
bk clone $Q --sccs-compat . ../sccsdirs
cd ../sccsdirs
mkdir src
cd src
echo foo > foo
bk new $Q foo
cd ..
bk commit -ywhatever $Q
cd ..
# Important for the test: SCCS compat, partial check and checkout get|edit
bk --config='partial_check:yes' clone $Q --checkout=get \
    bk://localhost:$OLDP/sccsdirs file-after || fail
cd file-after
bk -U^G > CO
test -s CO && fail -f CO files not checked out
echo OK

echo $N Clone again, but such that config is last in the list .......$NL
cd "$HERE"/sccsdirs
bk mv src/foo foo
bk commit -ywhatever $Q
cd ..
# Important for the test: SCCS compat, partial check and checkout get|edit
bk --config='partial_check:yes' clone $Q --checkout=get \
    bk://localhost:$OLDP/sccsdirs config-last || fail
cd config-last
bk -U^G > CO
test -s CO && fail -f CO files not checked out
echo OK

echo $N Try a pull urllist to see if the hacks work .................$NL
# old bkds fail bkd_nested call, so hackery in place to work anyway
cd "$HERE"
fresh_nested --compat nest
bk clone $Q . ../nest-dest
touch gcc/foo
bk new $Q gcc/foo
bk commit $Q -f
bk clone $Q -s. . ../nest-src
cd ../nest-src
rm BitKeeper/log/urllist
cd ../nest-dest
perl -pe 's|.*/nest$|bk://localhost:'$OLDP'/nest|' BitKeeper/log/urllist > x
cp x BitKeeper/log/urllist
bk pull ../nest-src >X 2>&1 || fail -f X
grep searching X > GOT
# The non -q shows takepatch reading the file, and then failing with
# this same nested only in product.  That means to upgraded the bkd.
cat <<EOF > WANT
pull: searching bk://localhost:$OLDP/nest...ok (gate)
EOF
cmpfiles WANT GOT
# again, http style
bk unpull $Q -sf
perl -pe 's|^bk://|http://|' BitKeeper/log/urllist > x
cp x BitKeeper/log/urllist
bk pull ../nest-src >X 2>&1 || fail -f GOT
grep searching X > GOT
cat <<EOF > WANT
pull: searching http://localhost:$OLDP/nest...ok (gate)
EOF
cmpfiles WANT GOT
echo OK

echo $N Clone an old bam repo with new client and get bam file ......$NL
cd "$HERE"
# Need to create a syncroot distinct from rootkey
# So take a standalone repo, make a BAM file, then attach it.
$OLDBK/bk --cd=nest bam server $Q .
$OLDBK/bk clone $Q project binary
cd binary
$OLDBK/bk bam server $Q ../nest
# BAM binary data will not pass this test on windows.  Skip BAM testing.
echo binary > bam
if [ X"$PLATFORM" = XWIN32 ]
then	$OLDBK/bk new $Q bam
else	$OLDBK/bk new $Q -b bam
fi
$OLDBK/bk commit $Q -ybamfile
cd ../nest
$OLDBK/bk attach $Q ../binary binary
cd ../binary
$OLDBK/bk edit $Q bam
echo dvd > bam
$OLDBK/bk delta $Q -ybig-data bam
$OLDBK/bk commit $Q -ypush-to-bam-server
$OLDBK/bk push $Q
cd ..
# Now using a new client, clone and fetch the BAM file
bk clone $Q \
    --checkout=get bk://localhost:$NEWP/nest nested-bam-clone || fail
cd nested-bam-clone/binary
bk portal $Q .
bk port $Q ../../binary || fail
echo OK

echo -------------- BAM cp test
echo $N See that a BAM cp that fetch from old bam server fails ......$NL
cd "$HERE"
bk clone $Q project bam-server
bk clone $Q project bam-receiver
cd bam-server
echo binary > bam2
bk new $Q -b bam2
bk commit $Q -ybam-file
bk bam server $Q .
cd ..
bk clone $Q bk://localhost:$OLDP/bam-server bam-copy
bk clone $Q bk://localhost:$OLDP/bam-server bam-xcopy
cd bam-copy
bk cp $Q bam2 newbam || fail
bk get $Q || fail
# across a component, same thing
cd ../bam-xcopy
bk cp $Q -f bam2 ../bam-receiver/newbam || fail
cd ../bam-receiver
bk get $Q || fail
echo OK

echo -------------- ascii cset files match
echo $N New and old version should generate the same cset file ......$NL
cd "$HERE"
touch empty
DAT="98/09/22 16:23:31+00:00"

_BK_NO_ATTR=1 BK_DATE_TIME_ZONE=$DAT BK_RANDOM=1234567890abcdef \
    $OLDBK/bk setup -fcempty newrepo
$OLDBK/bk clone $Q newrepo newcopy
cd newrepo
echo f > foo
BK_DATE_TIME_ZONE=$DAT BK_RANDOM=1234567890abcdef $OLDBK/bk new $Q foo
_BK_NO_ATTR=1 BK_DATE_TIME_ZONE=$DAT $OLDBK/bk commit $Q -yfoo
cd ../newcopy
echo b > bar
BK_DATE_TIME_ZONE=$DAT BK_RANDOM=1234567890abcdef $OLDBK/bk new $Q bar

# the pre-7.0 code had a bug where the timestamp it attached to each
# key in bk-keys was the delta timestamp. When BK_DATE_TIME_ZONE was
# used then that date can be way in the past. In bk-6.x the file is
# pruned at load time so if you write a key in the past it will never
# be seen by a followup process.
# We 'fix' this by recreating the parallel key creation record but
# use a current timestamp so it won't get pruned.
T=`bk prs -r+ -hnd:TIME_T: ../nest/ChangeSet`
bk prs -hnd":SHORTKEY: $T 1234567890abcdef" ../newrepo/ChangeSet \
   >> "$BK_DOTBK"/bk-keys/`bk gethost -r`

_BK_NO_ATTR=1 BK_DATE_TIME_ZONE=$DAT $OLDBK/bk commit $Q -ybar
_BK_NO_ATTR=1 BK_DATE_TIME_ZONE=$DAT $OLDBK/bk pull $Q
cd ..
mv newrepo oldrepo
mv newcopy oldcopy
# again with the current stuff
_BK_NO_ATTR=1 BK_DATE_TIME_ZONE=$DAT BK_RANDOM=1234567890abcdef \
    bk setup --compat -fcempty newrepo
bk clone $Q newrepo newcopy
cd newrepo
echo f > foo
BK_DATE_TIME_ZONE=$DAT BK_RANDOM=1234567890abcdef bk new $Q foo
_BK_NO_ATTR=1 BK_DATE_TIME_ZONE=$DAT bk commit $Q -yfoo
cd ../newcopy
echo b > bar
BK_DATE_TIME_ZONE=$DAT BK_RANDOM=1234567890abcdef bk new $Q bar
_BK_NO_ATTR=1 BK_DATE_TIME_ZONE=$DAT bk commit $Q -ybar
_BK_NO_ATTR=1 BK_DATE_TIME_ZONE=$DAT bk pull $Q
cd ..
# compare cset files
bk _scat oldcopy/ChangeSet > old
bk _scat newcopy/ChangeSet > new
cmpfiles old new
echo OK

echo $N Document the weave signature ................................$NL
# Dump a weave signature
dump() {
	perl -e '
		while (<>) { last if /^\001T/ }  # Skip to weave
		while (<>) {
			if (s/\001//) {
				if ($x) {
					print "$x\n";
					$x = 0;
				} elsif (/^E/) {
					print "== 0 ==\n";
				}
				print;
			} else {
				$x++;
			}
		}
	' $1
}
# For compat sake, 2 empty slots.
dump new > GOT
cat <<EOF > WANT
I 5
== 0 ==
E 5
I 4
1
E 4
I 3
1
E 3
I 2
4
E 2
I 1
== 0 ==
E 1
EOF
cmpfiles WANT GOT
echo OK

# echo -------------- ascii cset files with holes in the serials
# echo $N Compute a repo with a hole in the serials ...................$NL
# XXX: with compat-6.0, we can no longer use OLDBK to make holes.
# We need to rely on compat-5.3 for that.

echo -------------- compat '<->' BK testing with clone, push, pull
echo $N Set up bkfile/bweave format repo called bkfile ..............$NL
cd "$HERE"
$OLDBK/bk clone $Q --upgrade bk://localhost:$OLDP/newrepo bkfile || fail
bk clone $Q $COMPAT4 bkfile bkfile--compat || fail
bk clone $Q --upgrade bkfile bkfile--upgrade || fail
$OLDBK/bk --cd=bkfile--compat repocheck $Q || fail
echo OK

echo $N Clone from bk6/bkfile with bk - passes ......................$NL
bk clone -q bk://localhost:$OLDP/bkfile save-this || fail
bk _rm -r save-this
echo OK

echo $N Clone from bk/upgrade with bk6 - now passes .................$NL
$OLDBK/bk clone -q bk://localhost:$NEWP/bkfile--upgrade save-this || fail
bk _rm -r save-this
echo OK

echo $N Rclone with bk/upgrade to bk6 - now passes ..................$NL
bk clone $Q bkfile--upgrade bk://localhost:$OLDP/save-this || fail
bk _rm -r save-this
echo OK

echo $N Rclone with bk6/bkfile to bk - passes .......................$NL
$OLDBK/bk clone -q bkfile bk://localhost:$NEWP/save-this || fail
echo OK

echo $N Pull from bk6/compat to bk/bkfile ...........................$NL
cd newrepo
touch newfile-compat
$OLDBK/bk new $Q newfile-compat
$OLDBK/bk commit $Q -ynewfile
cd ../bkfile--upgrade
bk pull $Q || fail
bk repocheck $Q || fail
echo OK

echo $N Pull from bk/upgrade to bk6/compat ..........................$NL
touch newfile-bkfile
bk new $Q newfile-bkfile
bk commit $Q -ynewfile-bkfile
cd ../newrepo
$OLDBK/bk pull $Q bk://localhost:$NEWP/bkfile--upgrade || fail
echo OK

echo $N Pull from bk/upgrade to bk/compat ...........................$NL
bk pull $Q bk://localhost:$NEWP/bkfile--upgrade || fail
echo OK

echo $N Push from bk6/compat to bk/upgrade ..........................$NL
touch newfile-compat-push
$OLDBK/bk new $Q newfile-compat-push
$OLDBK/bk commit $Q -ynewfile-compat-push
$OLDBK/bk push $Q bk://localhost:$NEWP/bkfile--upgrade || fail
echo OK

echo $N Push from bk/compat to bk/upgrade ...........................$NL
bk push $Q bk://localhost:$NEWP/bkfile--upgrade || fail
echo OK

echo $N Push from bk/upgrade to bk6/compat ..........................$NL
cd ../bkfile--upgrade
touch newfile-bkfile-push
bk new $Q newfile-bkfile-push
bk commit $Q -ynewfile-bkfile-push || fail
bk push $Q bk://localhost:$OLDP/newrepo || fail
echo OK

echo -------------- compat '<->' BK testing with attach, detach, port
echo $N Set up bkfile/bweave format repo called bkfile.nest .........$NL
cd "$HERE"
bk clone $Q --upgrade-repo bk://localhost:$OLDP/nest bkfile.nest || fail
echo OK

echo $N Attach from bk/bkfile to bk6/compat - now works .............$NL
cd nest
$OLDBK/bk attach $Q bk://localhost:$NEWP/bkfile newrepo || fail
bk gate -qr
bk portal -qr
bk undo -qsfr+
bk gate -q .
bk portal -q .
echo OK

echo $N Detach from bk6/compat to bk/bkfile - works .................$NL
$OLDBK/bk detach $Q -Bnone gcc bk://localhost:$NEWP/gcc.bk || fail
echo OK

echo $N Attach from bk6/compat to bk/bkfile - works .................$NL
cd ../bkfile.nest
bk portal $Q .
bk gate $Q .
bk attach $Q bk://localhost:$OLDP/newrepo bkfile || fail
# XXX test to see that it is in bkfile format
echo OK

echo $N Push to bk6/compat which will clone bkfile comp - works .....$NL
bk push $Q bk://localhost:$OLDP/nest || fail
echo OK

echo $N Pull from bk/bkfile to bk6/compat - now works ...............$NL
# XXX See the additional lines on the test below: problem with nested lock?
# It's from the bk-6.0 binary.  If we want to improve it, add RTI to bugfix
cd ../nest
$OLDBK/bk pull -q bk://localhost:$NEWP/bkfile.nest || fail
cd ../bkfile.nest
echo OK

echo $N Push to bk/compat which will clone bkfile comp - works ......$NL
bk push $Q bk://localhost:$NEWP/nest || fail
# See that an old bk thinks all is fine
$OLDBK/bk --cd="$HERE/nest" repocheck $Q || fail
echo OK

echo $N Detach from bk/bkfile to bk6/compat - now works .............$NL
bk detach $Q gcc bk://localhost:$OLDP/gcc.bk6 || fail
echo OK

echo $N Port from bk/bkfile to bk6/compat ...........................$NL
# make into new product so we can port.
bk newroot
# update bk comp
cd gcc
touch bk
bk new $Q bk
bk commit $Q -ybk
# port into bk6 comp
cd ../../nest/gcc
$OLDBK/bk port $Q bk://localhost:$NEWP/bkfile.nest/gcc || fail
echo OK

echo $N Port from bk6/compat to bk/bkfile ...........................$NL
# update bk6 comp
cd ../gdb
touch bk6
$OLDBK/bk new $Q bk6
bk commit $Q -ybk6
# port into bk comp
cd ../../bkfile.nest/gdb
bk port $Q bk://localhost:$OLDP/nest/gdb || fail
echo OK

echo -------------- clone tests
echo $N Make a nested repo with a fork and merge history ............$NL
cd "$HERE"
nested clone-base
touch gcc/foo
bk new $Q gcc/foo
bk commit $Q -yfoo
bk clone $Q . ../upgraded.v3
bk edit $Q gcc/foo
bk delta $Q -fyempty gcc/foo
bk commit $Q -yfoo
cd ../upgraded.v3
bk edit $Q gcc/foo
bk delta $Q -fyempty gcc/foo
bk commit $Q --tag=BASE -yfoo
bk pull $Q || fail
bk clone $Q $COMPAT4 . ../downgraded
cd "$HERE"
$OLDBK/bk clone $Q --upgrade downgraded upgraded
echo OK

echo $N Test straight clone .........................................$NL
$OLDBK/bk clone $Q bk://localhost:$NEWP/upgraded upgraded-old || fail
bk clone $Q bk://localhost:$OLDP/upgraded upgraded-new || fail
$OLDBK/bk clone $Q bk://localhost:$NEWP/downgraded downgraded-old || fail
bk clone $Q bk://localhost:$OLDP/downgraded downgraded-new || fail
echo OK

echo $N Test clone --downgrade ......................................$NL
$OLDBK/bk clone $Q --downgrade bk://localhost:$NEWP/upgraded \
    dg-upgraded-old || fail
bk clone $Q --downgrade bk://localhost:$OLDP/upgraded \
    dg-upgraded-new || fail
$OLDBK/bk clone $Q --downgrade bk://localhost:$NEWP/downgraded \
    dg-downgraded-old || fail
bk clone $Q --downgrade bk://localhost:$OLDP/downgraded \
    dg-downgraded-new || fail
echo OK

echo $N Test clone --upgrade ........................................$NL
$OLDBK/bk clone $Q --upgrade bk://localhost:$NEWP/upgraded \
    ug-upgraded-old || fail
bk clone $Q --upgrade bk://localhost:$OLDP/upgraded \
    ug-upgraded-new || fail
$OLDBK/bk clone $Q --upgrade bk://localhost:$NEWP/downgraded \
    ug-downgraded-old || fail
bk clone $Q --upgrade bk://localhost:$OLDP/downgraded \
    ug-downgraded-new || fail
echo OK

echo $N Test clone -r ...............................................$NL
# Not a real failure, but can't distinguish plain from up/down grade
$OLDBK/bk clone -q -rBASE bk://localhost:$NEWP/upgraded \
    r-upgraded-old 2> ERR && fail -f ERR
grep -q 'clone -r cannot be used by a bk-6.0 client' ERR || fail -f ERR
bk clone $Q -rBASE bk://localhost:$OLDP/upgraded r-upgraded-new || fail
# Not a real failure, but can't distinguish plain from up/down grade
$OLDBK/bk clone $Q -rBASE bk://localhost:$NEWP/downgraded \
    r-downgraded-old 2> ERR && fail -f ERR
grep -q 'clone -r cannot be used by a bk-6.0' ERR || fail -f ERR
bk clone $Q -rBASE bk://localhost:$OLDP/downgraded r-downgraded-new || fail
echo OK

echo $N Test clone -r --downgrade ...................................$NL
$OLDBK/bk clone -q -rBASE --downgrade bk://localhost:$NEWP/upgraded \
    r-dg-upgraded-old 2> ERR && fail -f ERR
grep -q 'clone -r cannot be used by a bk-6.0' ERR || fail -f ERR
bk clone $Q --downgrade -rBASE bk://localhost:$OLDP/upgraded \
    r-dg-upgraded-new || fail
# Not a real failure, but can't distinguish downgrade on downgraded
$OLDBK/bk clone $Q -rBASE --downgrade bk://localhost:$NEWP/downgraded \
    r-dg-downgraded-old 2> ERR && fail -f ERR
grep -q 'clone -r cannot be used by a bk-6.0 client' ERR || fail -f ERR
bk clone $Q --downgrade -rBASE bk://localhost:$OLDP/downgraded \
    r-dg-downgraded-new || fail
echo OK

echo $N Test clone -r --upgrade .....................................$NL
# Not a real failure, but can't distinguish upgrade on upgraded
$OLDBK/bk clone $Q -rBASE --upgrade bk://localhost:$NEWP/upgraded \
    r-ug-upgraded-old 2> ERR && fail -f ERR
grep -q 'clone -r cannot be used by a bk-6.0' ERR || fail -f ERR
bk clone $Q --upgrade -rBASE bk://localhost:$OLDP/upgraded \
    r-ug-upgraded-new || fail
$OLDBK/bk clone -q --upgrade -rBASE bk://localhost:$NEWP/downgraded \
    r-ug-downgraded-old 2> ERR && fail
grep -q 'clone -r cannot be used by a bk-6.0 client' ERR || fail -f ERR
bk clone $Q --upgrade -rBASE bk://localhost:$OLDP/downgraded \
    r-ug-downgraded-new || fail
echo OK

echo $N Test straight rclone ........................................$NL
$OLDBK/bk clone $Q upgraded bk://localhost:$NEWP/upgraded-old-rc || fail
bk clone $Q upgraded bk://localhost:$OLDP/upgraded-new-rc || fail
$OLDBK/bk clone $Q downgraded bk://localhost:$NEWP/downgraded-old-rc || fail
bk clone $Q downgraded bk://localhost:$OLDP/downgraded-new-rc || fail
echo OK

echo $N Test rclone -r ..............................................$NL
$OLDBK/bk clone $Q -rBASE upgraded \
    bk://localhost:$NEWP/r-upgraded-old-rc || fail
bk clone $Q -rBASE upgraded \
    bk://localhost:$OLDP/r-upgraded-new-rc || fail
$OLDBK/bk clone $Q -rBASE downgraded \
    bk://localhost:$NEWP/r-downgraded-old-rc || fail
bk clone $Q -rBASE downgraded \
    bk://localhost:$OLDP/r-downgraded-new-rc || fail
echo OK

echo -------------- pull which cause clone -r tests
echo $N Test pull new comp upgraded to downgraded ...................$NL
cd upgraded
bk portal $Q .
bk setup -f ug-newcomp
bk tag $Q UG_NEWCOMP
touch ug-newcomp/foo
bk new $Q ug-newcomp/foo
bk commit $Q -yfoo
cd ../downgraded
$OLDBK/bk pull -q -rUG_NEWCOMP \
    bk://localhost:$NEWP/upgraded 2>ERR && fail -f ERR
grep -q 'clone -r cannot be used by a bk-6.0 client' ERR || fail -f ERR
# works to flip old and new
bk pull $Q -rUG_NEWCOMP bk://localhost:$OLDP/upgraded
echo OK

echo $N Test pull new comp downgraded to upgraded ...................$NL
bk portal $Q .
bk setup -f dg-newcomp
bk tag $Q DG_NEWCOMP
touch dg-newcomp/foo
bk new $Q dg-newcomp/foo
bk commit $Q -yfoo
cd ../upgraded
$OLDBK/bk pull -q -rDG_NEWCOMP \
    bk://localhost:$NEWP/downgraded 2>ERR && fail -f ERR
grep -q 'clone -r cannot be used by a bk-6.0 client' ERR || fail -f ERR
# works to flip old and new here
bk pull -q -rDG_NEWCOMP bk://localhost:$OLDP/downgraded || fail
echo OK

echo $N Test pull new comp upgraded.v3 to v2 ........................$NL
cd ../upgraded.v3
bk portal $Q .
bk setup -f v3-newcomp
bk tag $Q V3_NEWCOMP
touch v3-newcomp/foo
bk new $Q v3-newcomp/foo
bk commit $Q -yfoo
cd ../upgraded
bk pull $Q -rV3_NEWCOMP ../upgraded.v3 || fail
echo OK

clean() {
    # prune percentages, unused, and uniqheap
    perl -ne 'next if /^heap|u/; chomp; @_=split; print "$_[0] $_[1] $_[3]\n"'
}
echo -------------- BWEAVEv3 compat tests
echo $N clone --upgrade from bweave2 to bweave3 .....................$NL
cd "$HERE"
$OLDBK/bk setup -f -cempty bkfile2 || fail
bk clone $Q bkfile2 bkfile2.new || fail
cd bkfile2.new
bk features | grep -q BWEAVEv2 || fail
$OLDBK/bk -r check -ac
_BK_FORCE_REPACK=1 bk -r check -ac || fail
bk features | grep -q BWEAVEv2 || fail
$OLDBK/bk -r check -ac
_BK_FORCE_REPACK=1 $OLDBK/bk -r check -ac || fail
cd ..
bk clone $Q --upgrade bkfile2 bkfile3.convert || fail
cd bkfile3.convert
bk features | grep -q BWEAVEv3 || fail
bk repocheck $Q || fail
echo OK

echo $N Test running collapse on bweave2 repository .................$NL
cd ../bkfile2
echo hi > f1
echo bye > f2
$OLDBK/bk new $Q -l f1 f2
$OLDBK/bk commit $Q -yn || fail
echo ddd >> f1
$OLDBK/bk ci $Q -yff f1
$OLDBK/bk mv f2 f3
$OLDBK/bk commit $Q -yupdate || fail
cd ..
$OLDBK/bk clone $Q bkfile2 bkfile3.collapse
cd bkfile3.collapse
bk collapse -er+ || fail
bk -Uc ci $Q -a -yci || fail
bk commit $Q -yredo || fail
bk repocheck $Q || fail
echo OK

echo $N Operate on a BKFILE repository without BWEAVEv2 .............$NL
# old bk's could create this hybrid
cd BitKeeper/log
grep -v BWEAVE features > f
cat f > features
cd ../..
$OLDBK/bk -r admin -Zsame || fail
cat <<EOF > WANT
BKFILE
SCANDIRS
remap
EOF
cmpfiles BitKeeper/log/features WANT

# show that the new bk is happy with this
bk changes -r+ > OUT || fail
bk _heapdump ChangeSet | head -1 > OUT
echo "encoding: 1008 (BK)" > WANT
cmpfiles OUT WANT

# and that upgrades the file
_BK_DEVELOPER= bk repocheck $Q || fail
bk _heapdump ChangeSet | head -1 > OUT
echo "encoding: 1018 (BK,BWEAVEv2)" > WANT
cmpfiles OUT WANT
cat <<EOF > WANT
BKFILE
BWEAVEv2
SCANDIRS
remap
EOF
cmpfiles BitKeeper/log/features WANT
echo OK

echo -------------- Partition features compat tests
echo $N Test partition with ref repo with KEEPDEL fails using bk6 ...$NL
cd "$HERE"
fresh_commercial --compat part-base
mkdir src
cd src
touch a b
bk new $Q a b
bk commit $Q -f
bk rm a
bk commit $Q -f
cd "$HERE"
echo src > comps
bk partition $Q --keep-deleted -Ccomps part-base part-nest || fail
$OLDBK/bk partition $Q \
    -@bk://localhost:$NEWP/part-nest part-base part-compat \
    2> ERR && fail -f ERR
grep -q "partition: Unknown feature 'KEEPDEL'" ERR || fail -f ERR
echo OK

echo $N Test csetprune current bk on bk 6 repo ......................$NL
cd "$HERE"
# Save the key for a file to prune
bk --cd=part-base/src prs -r1.0 -hnd:KEY: b > BKEY
# Make a couple of BWEAVEv2 repos
$OLDBK/bk clone $Q --upgrade part-base bk6-prune
$OLDBK/bk clone $Q bk6-prune bk7-prune
# prune
cd bk6-prune
$OLDBK/bk csetprune $Q -k1234567890abcdef - < ../BKEY || fail
cd ../bk7-prune
bk csetprune $Q -k1234567890abcdef - < ../BKEY || fail
bk changes -qaLR ../bk6-prune > DIFF
test -s DIFF && fail -f DIFF should be no diffs
echo OK

echo -------------- Makepatch in compat mode
echo $N Test makepatch with -C is compat with bk6 ...................$NL
# There are no merged files in this repo?!  Making one
cd "$HERE"
commercial mp-base
bk clone $Q $COMPAT4 . ../mp-base-down
touch foo
bk new $Q foo
bk edit $Q foo
bk delta $Q -fynull foo
bk _get $Q -er1.1 foo
bk delta $Q -fynull foo
bk edit $Q -M foo
bk delta $Q -fynull foo
bk commit $Q -f
bk makepatch -C -r+ > ../mp-patch
cd ../mp-base-down
$OLDBK/bk receive < ../mp-patch
$OLDBK/bk resolve $Q || fail
echo OK

weavedump() {
	bk _heapdump $1 | perl -ne 's/^\^A//; print unless 1 .. /^weave:/'   
}

echo $N Testing oddball weave structure gets ported .................$NL
touch odd
bk new $Q odd
bk edit $Q odd
rm odd
printf '0a1\n> \r\r\r\n\\ No newline at end of file' > diff
$OLDBK/bk delta $Q -yodd -Ddiff odd
bk _get $Q -er1.1 odd
printf "a normal no newline line" > odd
bk delta $Q -ynormal odd
bk edit $Q -M odd
bk delta $Q -ymerge odd
bk commit $Q -f
$OLDBK/bk makepatch -C -r+ > ../slow
$OLDBK/bk makepatch -FC -r+ > ../fast
cd ../mp-base
bk takepatch < ../slow || fail
echo "a normal no newline line" > WANT.odd
bk get RESYNC/odd 2> ERR
cmpfiles WANT.odd RESYNC/odd
# oddity of structure: 1 line printed, but it counts two
grep -q "RESYNC/odd 1.3: 2 lines" ERR || fail -f ERR
weavedump RESYNC/odd > got.slow
cat <<EOF > WANT
I 4
a normal no newline line
E 4N
I 3

E 3N
I 1
E 1
EOF
# cmpfiles WANT got.slow
rm -fr RESYNC
bk takepatch < ../fast || fail
bk get RESYNC/odd 2> ERR
cmpfiles WANT.odd RESYNC/odd
# oddity of structure: 1 line printed, but it counts two
grep -q "RESYNC/odd 1.3: 2 lines" ERR || fail -f ERR
weavedump RESYNC/odd > got.fast
cat <<EOF > WANT
I 4
a normal no newline line
E 4N
I 3

E 3N
I 2
E 2
I 1
E 1
EOF
# cmpfiles WANT got.fast
echo OK
