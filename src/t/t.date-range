# Copyright 1999-2002,2005-2006,2011 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

commercial project
export BK_YEAR2=YES
echo $N Building up file with dates .................................$NL
R=1
for D in '87/05/28 23:49:57' '97/05/28 23:49:57' '97/05/30 01:34:11' '97/06/23 01:33:45' '98/01/30 17:45:17' '99/01/30 17:45:17' '00/01/30 17:45:17' '18/01/30 17:45:17'
do	cat > INITX <<EOF
D 1.$R $D $USER 0 0 0/0/0
c This is revision 1.$R of $D
P FILE
------------------------------------------------
EOF
	echo 1.$R >> FILE
	if [ $R -eq 1 ]
	then	bk delta $Q -i -IINITX FILE
	else	bk delta $Q -IINITX FILE
	fi
	if [ -f core ]; then echo CORE; exit 1; fi
	R=`expr $R + 1`
	bk co $Q -l FILE
done
bk ci $Q FILE	# clean it
echo OK

DATE1=87/05/2823:49:57
DATE2=97/05/2823:49:57
DATE2a=97/05/2823:49:58
DATE3a=97/05/3001:34:10
DATE3=97/05/3001:34:11
DATE4=97/06/2301:33:45
DATE5=98/01/3017:45:17
DATE6=99/01/3017:45:17
DATE7=00/01/3017:45:17
DATE8=18/01/3017:45:17
DATE8B=180130174517
DATE8C=20180130174517
REV=1.2

echo -------------- fully specified date range:
echo $N Test exact date matches .....................................$NL
bk prs -fnd:I: -c${DATE1}..${DATE1} FILE > GOT
cat <<EOF > WANT
======== FILE $DATE1..$DATE1 ========
1.1
EOF
cmpfiles WANT GOT
bk prs -fnd:I: -c${DATE2}..${DATE2} FILE > GOT
cat <<EOF > WANT
======== FILE $DATE2..$DATE2 ========
1.2
EOF
cmpfiles WANT GOT
unset BK_YEAR2
for i in $DATE8 $DATE8B $DATE8C
do
	bk prs -nd':I: :D: :T:' -c${i}..${i} FILE > GOT
	grep -q "1.8 2018/01/30 17:45:17" GOT || {
		echo using $i failed
		cat GOT
		bk log FILE
		exit 1
	}
done
export BK_YEAR2=YES
echo OK

echo $N Forward range of dates test 1................................$NL
bk prs -fnd:I: -c${DATE3}.. FILE > GOT
cat <<EOF > WANT
======== FILE $DATE3.. ========
1.3
1.4
1.5
1.6
1.7
1.8
EOF
cmpfiles WANT GOT
echo OK

echo $N Forward range of dates test 2................................$NL
bk prs -fnd:I: -c${DATE2}.. FILE > GOT
cat <<EOF > WANT
======== FILE $DATE2.. ========
1.2
1.3
1.4
1.5
1.6
1.7
1.8
EOF
cmpfiles WANT GOT
echo OK

echo $N Forward range of dates test 3................................$NL
bk prs -fnd:I: -c${DATE2a}.. FILE > GOT
cat <<EOF > WANT
======== FILE $DATE2a.. ========
1.3
1.4
1.5
1.6
1.7
1.8
EOF
cmpfiles WANT GOT
echo OK

echo $N Backward range of dates test 1 ..............................$NL
bk prs -fnd:I: -c..${DATE3} FILE > GOT
cat <<EOF > WANT
======== FILE ..$DATE3 ========
1.1
1.2
1.3
EOF
cmpfiles WANT GOT
echo OK

echo $N Backward range of dates test 2 ..............................$NL
bk prs -fnd:I: -c..${DATE3a} FILE > GOT
cat <<EOF > WANT
======== FILE ..$DATE3a ========
1.1
1.2
EOF
cmpfiles WANT GOT
echo OK

echo $N Backward range of dates test 3 ..............................$NL
bk prs -fnd:I: -c..${DATE2} FILE > GOT
cat <<EOF > WANT
======== FILE ..$DATE2 ========
1.1
1.2
EOF
cmpfiles WANT GOT
echo OK

echo $N Backward range of dates test 4 ..............................$NL
bk prs -fnd:I: -c..${DATE2a} FILE > GOT
cat <<EOF > WANT
======== FILE ..$DATE2a ========
1.1
1.2
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test 1.1..1.3 as dates ................................$NL
bk prs -fnd:I: -c${DATE1}..${DATE3} FILE > GOT
cat <<EOF > WANT
======== FILE $DATE1..$DATE3 ========
1.1
1.2
1.3
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test 1.2..1.3 as dates ................................$NL
bk prs -fnd:I: -c${DATE2}..${DATE3} FILE > GOT
cat <<EOF > WANT
======== FILE $DATE2..$DATE3 ========
1.2
1.3
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test 1.3..1.3 as dates ................................$NL
bk prs -fnd:I: -c${DATE2a}..${DATE3} FILE > GOT
cat <<EOF > WANT
======== FILE $DATE2a..$DATE3 ========
1.3
EOF
cmpfiles WANT GOT
echo OK
# end of fully specified date ranges (partially specifed below revisions)

echo -------------- revision range:
REV1=1.1
REV2=1.2
REV3=1.3
REV4=1.4
REV5=1.5
echo $N Range test -r1.1 ............................................$NL
bk prs -fnd:I: -r${REV1} FILE > GOT
cat <<EOF > WANT
======== FILE ${REV1} ========
1.1
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test -r1.5 ............................................$NL
bk prs -fnd:I: -r${REV5} FILE > GOT
cat <<EOF > WANT
======== FILE ${REV5} ========
1.5
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test -r+ ..............................................$NL
bk prs -fnd:I: -r+ FILE > GOT
cat <<EOF > WANT
======== FILE + ========
1.8
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test 1.1.. and 1.3.. ..................................$NL
bk prs -fnd:I: -r1.1.. FILE > GOT
cat <<EOF > WANT
======== FILE 1.1.. ========
1.2
1.3
1.4
1.5
1.6
1.7
1.8
EOF
cmpfiles WANT GOT
bk prs -fnd:I: -r1.3.. FILE > GOT
cat <<EOF > WANT
======== FILE 1.3.. ========
1.4
1.5
1.6
1.7
1.8
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test 1.4.. ............................................$NL
bk prs -fnd:I: -r1.4.. FILE > GOT
cat <<EOF > WANT
======== FILE 1.4.. ========
1.5
1.6
1.7
1.8
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test ..1.2 ............................................$NL
bk prs -fnd:I: -r..1.2 FILE > GOT
cat <<EOF > WANT
======== FILE ..1.2 ========
1.1
1.2
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test ..1.1 ............................................$NL
bk prs -fnd:I: -r..1.1 FILE > GOT
cat <<EOF > WANT
======== FILE ..1.1 ========
1.1
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test 1.1..1.3 .........................................$NL
bk prs -fnd:I: -r${REV1}..${REV3} FILE > GOT
cat <<EOF > WANT
======== FILE $REV1..$REV3 ========
1.2
1.3
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test 1.2..1.3 .........................................$NL
bk prs -fnd:I: -r${REV2}..${REV3} FILE > GOT
cat <<EOF > WANT
======== FILE $REV2..$REV3 ========
1.3
EOF
cmpfiles WANT GOT
echo OK
# ---------------------- end of revision ranges

# set up shell variables for keys and md5keys:
eval `bk prs -r.. -hd'MD:L:=:MD5KEY:\nKEY:L:=":KEY:"\n' FILE`

echo -------------- revisions as dates range:
echo $N Range test -c1.1 ............................................$NL
bk prs -fnd:I: -c${REV1}..${REV1} FILE > GOT
cat <<EOF > WANT
======== FILE ${REV1}..$REV1 ========
1.1
EOF
cmpfiles WANT GOT
bk prs -fnd:I: -c${MD1}..${MD1} FILE > GOT
cat <<EOF > WANT
======== FILE ${MD1}..$MD1 ========
1.1
EOF
cmpfiles WANT GOT
bk prs -fnd:I: -c"${KEY1}".."${KEY1}" FILE > GOT
cat <<EOF > WANT
======== FILE ${KEY1}..${KEY1} ========
1.1
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test -c1.5 ............................................$NL
bk prs -fnd:I: -c${REV5}..${REV5} FILE > GOT
cat <<EOF > WANT
======== FILE ${REV5}..$REV5 ========
1.5
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test -c+ ..............................................$NL
bk prs -fnd:I: -c+..+ FILE > GOT
cat <<EOF > WANT
======== FILE +..+ ========
1.8
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test 1.1.. ............................................$NL
bk prs -fnd:I: -c1.1.. FILE > GOT
cat <<EOF > WANT
======== FILE 1.1.. ========
1.1
1.2
1.3
1.4
1.5
1.6
1.7
1.8
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test MD1.. ............................................$NL
bk prs -fnd:I: -c${MD1}.. FILE > GOT
cat <<EOF > WANT
======== FILE ${MD1}.. ========
1.1
1.2
1.3
1.4
1.5
1.6
1.7
1.8
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test KEY1.. ...........................................$NL
bk prs -fnd:I: -c"${KEY1}".. FILE > GOT
cat <<EOF > WANT
======== FILE ${KEY1}.. ========
1.1
1.2
1.3
1.4
1.5
1.6
1.7
1.8
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test 1.3.. ............................................$NL
bk prs -fnd:I: -c1.3.. FILE > GOT
cat <<EOF > WANT
======== FILE 1.3.. ========
1.3
1.4
1.5
1.6
1.7
1.8
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test MD3.. ............................................$NL
bk prs -fnd:I: -c${MD3}.. FILE > GOT
cat <<EOF > WANT
======== FILE $MD3.. ========
1.3
1.4
1.5
1.6
1.7
1.8
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test KEY3.. ...........................................$NL
bk prs -fnd:I: -c"${KEY3}".. FILE > GOT
cat <<EOF > WANT
======== FILE $KEY3.. ========
1.3
1.4
1.5
1.6
1.7
1.8
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test 1.4.. ............................................$NL
bk prs -fnd:I: -c1.4.. FILE > GOT
cat <<EOF > WANT
======== FILE 1.4.. ========
1.4
1.5
1.6
1.7
1.8
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test ..1.2 ............................................$NL
bk prs -fnd:I: -c..1.2 FILE > GOT
cat <<EOF > WANT
======== FILE ..1.2 ========
1.1
1.2
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test ..1.1 ............................................$NL
bk prs -fnd:I: -c..1.1 FILE > GOT
cat <<EOF > WANT
======== FILE ..1.1 ========
1.1
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test 1.1..1.3 .........................................$NL
bk prs -fnd:I: -c${REV1}..${REV3} FILE > GOT
cat <<EOF > WANT
======== FILE $REV1..$REV3 ========
1.1
1.2
1.3
EOF
cmpfiles WANT GOT
bk prs -fnd:I: -c${MD1}..${MD3} FILE > GOT
cat <<EOF > WANT
======== FILE $MD1..$MD3 ========
1.1
1.2
1.3
EOF
cmpfiles WANT GOT
bk prs -fnd:I: -c"${KEY1}..${KEY3}" FILE > GOT
cat <<EOF > WANT
======== FILE $KEY1..$KEY3 ========
1.1
1.2
1.3
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test 1.2..1.3 .........................................$NL
bk prs -fnd:I: -c${REV2}..${REV3} FILE > GOT
cat <<EOF > WANT
======== FILE $REV2..$REV3 ========
1.2
1.3
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test 1.3..1.2 is empty ................................$NL
bk prs -fnd:I: -c${REV3}..${REV2} FILE > GOT
cat <<EOF > WANT
======== FILE $REV3..$REV2 ========
EOF
cmpfiles WANT GOT
echo OK
# ---------------------- end of revision ranges

echo -------------- partially specified date range:
echo $N Everything before the end of 1987 ...........................$NL
bk prs -fnd:I: -c..87 FILE > GOT
cat <<EOF > WANT
======== FILE ..87 ========
1.1
EOF
cmpfiles WANT GOT
echo OK

echo $N Everything after the start of 1987 ..........................$NL
bk prs -fnd:I: -c87.. FILE > GOT
cat <<EOF > WANT
======== FILE 87.. ========
1.1
1.2
1.3
1.4
1.5
1.6
1.7
1.8
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test 87..97 on 1.1..1.4 ...............................$NL
bk prs -fnd:I: -c87..97 FILE > GOT
cat <<EOF > WANT
======== FILE 87..97 ========
1.1
1.2
1.3
1.4
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test 77..07 on 1.1..1.5 ...............................$NL
bk prs -fnd:I: -c77..07 FILE > GOT
cat <<EOF > WANT
======== FILE 77..07 ========
1.1
1.2
1.3
1.4
1.5
1.6
1.7
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test 77..7 on 1.1..1.5 ................................$NL
bk prs -fnd:I: -c77..7 FILE > GOT
cat <<EOF > WANT
======== FILE 77..7 ========
1.1
1.2
1.3
1.4
1.5
1.6
1.7
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test 97..97 on 1.2..1.4 ...............................$NL
bk prs -fnd:I: -c97..97 FILE > GOT
cat <<EOF > WANT
======== FILE 97..97 ========
1.2
1.3
1.4
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test 97 on 1.2..1.4 ...................................$NL
bk prs -fnd:I: -c97 FILE > GOT
cat <<EOF > WANT
======== FILE 97 ========
1.2
1.3
1.4
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test -c..86 on null ...................................$NL
bk prs -fnd:I: -c..86 FILE > GOT
cat <<EOF > WANT
EOF
cmpfiles WANT GOT
echo OK

echo $N Range test -c2019.. on null .................................$NL
bk prs -fnd:I: -c2019.. FILE > GOT
cat <<EOF > WANT
EOF
cmpfiles WANT GOT
echo OK

ls > FILE3
bk new $Q FILE3
for i in 1 2 3
do	bk co -ql FILE3
	ls >> FILE3
	bk delta -fqy'' FILE3
done
echo $N Range test -c87..87 on multiple files .......................$NL
for i in FILE FILE1 FILE2 FILE3 FILE4
do	bk prs -c87..87 $i >> PRS
done
bk prs -c87..87 FILE FILE1 FILE2 FILE3 FILE4 > PRS2
cmp -s PRS PRS2
if [ $? -ne 0 ]; then echo Failed.; diff PRS PRS2; exit 1; fi
echo OK

echo $N Adding dates after 2000 .....................................$NL
for D in '2019/05/28 23:49:57' '2020/05/28 23:49:57' '2022/05/30 01:34:11'
do	cat > INITX <<EOF
D 1.$R $D $USER 0 0 0/0/0
c This is revision 1.$R of $D
------------------------------------------------
EOF
	bk co $Q -l FILE
	echo 1.$R >> FILE
	bk delta $Q -IINITX FILE
	R=`expr $R + 1`
done
echo OK

echo $N Trying a date range that covers nothing .....................$NL
bk prs -h -c88..88 FILE > OUT
if [ -s OUT ]; then echo Error - found a delta.; exit 1; fi
echo OK

echo $N Getting the last delta with -c ..............................$NL
rm -f FILE
bk prs -fhnd:REV: -c..2022 FILE > GOT
cat > WANT <<EOF
1.1
1.2
1.3
1.4
1.5
1.6
1.7
1.8
1.9
1.10
1.11
EOF
cmpfiles GOT WANT
echo OK

echo $N Getting a delta in year 2000 with -c ........................$NL
rm -f FILE
bk prs -fhnd:REV: -c..00 FILE > GOT
cat > WANT <<EOF
1.1
1.2
1.3
1.4
1.5
1.6
1.7
EOF
cmpfiles GOT WANT
echo OK

echo $N Getting a delta in year 2018 with -c ........................$NL
rm -f FILE
bk prs -fhnd:REV: -c..18 FILE > GOT
cat > WANT <<EOF
1.1
1.2
1.3
1.4
1.5
1.6
1.7
1.8
EOF
cmpfiles GOT WANT
echo OK

echo $N Getting a range from 98..01 with -c .........................$NL
bk prs -c98..01 FILE | awk '{print $1, $2, $3}' | sed 's/  *$//' > X
bk undos X > CMP1
cat > CMP2 <<EOF
======== FILE 98..01
D 1.7 00/01/30
P FILE
C This is
------------------------------------------------
D 1.6 99/01/30
P FILE
C This is
------------------------------------------------
D 1.5 98/01/30
P FILE
C This is
------------------------------------------------
EOF
cmpfiles CMP1 CMP2
echo OK

R=1
for D in '97/06/23 01:33:45' '00/01/30 17:45:17' '01/01/10 10:10:10'
do	cat > X <<EOF
D 1.$R $D $USER 0 0 0/0/0
c This is revision 1.$R of $D
P YEAR4
X 0x81
------------------------------------------------
EOF
	bk undos X > INITX
	echo '%''G%' > YEAR4
	if [ $R -eq 1 ]
	then	bk delta $Q -i -IINITX YEAR4
	else	bk delta $Q -IINITX YEAR4
	fi
	R=`expr $R + 1`
	bk co $Q -l YEAR4
done
bk ci $Q YEAR4	# clean it
echo $N Checking Y2K date expansion w/o -fYEAR4 .....................$NL
bk get $S -r1.1 -GYEAR4 YEAR4
if [ '06/23/97' != "`cat YEAR4`" ]; then echo Failed on 1.1.; exit 1; fi
bk get $S YEAR4
if [ '01/10/01' != "`cat YEAR4`" ]; then echo Failed on 1.3.; exit 1; fi
echo OK

echo $N Checking Y2K date expansion w -fYEAR4 .......................$NL
bk admin $Q -fYEAR4 YEAR4
bk get $Q -e YEAR4
cat > INITX <<EOF
D 1.5 01/02/22 10:10:10  $USER 0 0 0/0/0
c This is revision 1.5
------------------------------------------------
EOF
bk delta $Q -IINITX YEAR4
bk get $S -r1.5 -GYEAR4 YEAR4
if [ '02/22/2001' != "`cat YEAR4`" ]
then	echo Failed on 1.5.
	cat YEAR4
	bk prs -h -nd:FLAGS: YEAR4
	bk _scat SCCS/s.YEAR4
	exit 1
fi
echo OK

echo $N Checking Y2K date expansion on old delta ....................$NL
# We set the YEAR4 flag in delta 1.4, when we access delta 1.3
# We should get 2 digit year.
bk get $S -r1.3 -GYEAR4 YEAR4
if [ '01/10/01' != "`cat YEAR4`" ]
then	echo 'failed (bug 2002-02-08-008)'; 
	#The soultion now is clone -rold_rev
else	echo 'bug 2002-02-08-008 is passing! update testcase.'
	exit 1
fi

echo $N Range using keys and file name has .. in it .................$NL
touch foo..bar
bk new $Q foo..bar
eval `bk prs -r.. -hd'MD:L:=:MD5KEY:\nKEY:L:=":KEY:"\n' foo..bar`
bk prs -r"$KEY1" foo..bar 2> ERR && {
	echo fix test
	exit 1
}
bk prs -c"$KEY1" foo..bar 2> ERR && {
	echo fix test
	exit 1
}
echo 'failed (bug not filed)'

# This tests that a user name doesn't get cleaned to something
# with two consecutive dots.
echo $N Range using keys and user name with spaces and dots .........$NL
touch newfile
BK_USER="Pat P. Windows" bk new $Q newfile || fail
KEY=`bk prs -r+ -hnd:KEY: newfile`
GOT=`bk prs -r"$KEY" -hnd:G: newfile 2>ERR`
[ "$GOT" = "newfile" ] || fail "got $GOT" -f ERR
USER=`bk prs -r+ -hnd:USER: newfile`
[ "$USER" = "Pat.P.Windows" ] || fail "got $USER"
bk edit $Q newfile
date >>newfile
BK_USER="Pat P.. Windows" bk delta $Q -yupdate newfile || fail
KEY=`bk prs -r+ -hnd:KEY: newfile`
GOT=`bk prs -r"$KEY" -hnd:G: newfile 2>ERR`
[ "$GOT" = "newfile" ] || fail "got $GOT" -f ERR
USER=`bk prs -r+ -hnd:USER: newfile`
[ "$USER" = "Pat.P.Windows" ] || fail "got $USER"
bk edit $Q newfile
date >>newfile
BK_USER="Pat P... Windows" bk delta $Q -yupdate newfile || fail
KEY=`bk prs -r+ -hnd:KEY: newfile`
GOT=`bk prs -r"$KEY" -hnd:G: newfile 2>ERR`
[ "$GOT" = "newfile" ] || fail "got $GOT" -f ERR
USER=`bk prs -r+ -hnd:USER: newfile`
[ "$USER" = "Pat.P.Windows" ] || fail "got $USER"
bk edit $Q newfile
date >>newfile
BK_USER="Pat P. . ..Windows" bk delta $Q -yupdate newfile || fail
KEY=`bk prs -r+ -hnd:KEY: newfile`
GOT=`bk prs -r"$KEY" -hnd:G: newfile 2>ERR`
[ "$GOT" = "newfile" ] || fail "got $GOT" -f ERR
USER=`bk prs -r+ -hnd:USER: newfile`
[ "$USER" = "Pat.P.Windows" ] || fail "got $USER"
# This one has lots of spaces.
bk edit $Q newfile
date >>newfile
BK_USER="Pat P.         Windows" bk delta $Q -yupdate newfile || fail
KEY=`bk prs -r+ -hnd:KEY: newfile`
GOT=`bk prs -r"$KEY" -hnd:G: newfile 2>ERR`
[ "$GOT" = "newfile" ] || fail "got $GOT" -f ERR
USER=`bk prs -r+ -hnd:USER: newfile`
[ "$USER" = "Pat.P.Windows" ] || fail "got $USER"
# This one has spaces and tabs.
bk edit $Q newfile
date >>newfile
BK_USER="Pat P.   		       Windows" bk delta $Q -yupdate newfile || fail
KEY=`bk prs -r+ -hnd:KEY: newfile`
GOT=`bk prs -r"$KEY" -hnd:G: newfile 2>ERR`
[ "$GOT" = "newfile" ] || fail "got $GOT" -f ERR
USER=`bk prs -r+ -hnd:USER: newfile`
[ "$USER" = "Pat.P.Windows" ] || fail "got $USER"
# A leading . should cause no problem.
bk edit $Q newfile
date >>newfile
BK_USER=". Pat P. Windows" bk delta $Q -yupdate newfile || fail
KEY=`bk prs -r+ -hnd:KEY: newfile`
GOT=`bk prs -r"$KEY" -hnd:G: newfile 2>ERR`
[ "$GOT" = "newfile" ] || fail "got $GOT" -f ERR
USER=`bk prs -r+ -hnd:USER: newfile`
[ "$USER" = ".Pat.P.Windows" ] || fail "got $USER"
# A leading . should cause no problem.
bk edit $Q newfile
date >>newfile
BK_USER=".. Pat P. Windows" bk delta $Q -yupdate newfile || fail
KEY=`bk prs -r+ -hnd:KEY: newfile`
GOT=`bk prs -r"$KEY" -hnd:G: newfile 2>ERR`
[ "$GOT" = "newfile" ] || fail "got $GOT" -f ERR
USER=`bk prs -r+ -hnd:USER: newfile`
[ "$USER" = ".Pat.P.Windows" ] || fail "got $USER"
# A leading . should cause no problem.
bk edit $Q newfile
date >>newfile
BK_USER="... Pat P. Windows" bk delta $Q -yupdate newfile || fail
KEY=`bk prs -r+ -hnd:KEY: newfile`
GOT=`bk prs -r"$KEY" -hnd:G: newfile 2>ERR`
[ "$GOT" = "newfile" ] || fail "got $GOT" -f ERR
USER=`bk prs -r+ -hnd:USER: newfile`
[ "$USER" = ".Pat.P.Windows" ] || fail "got $USER"
echo OK
