# Copyright 2009-2010,2013-2016 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FEATURES=BitKeeper/log/features

echo $N Check that setup --sccs-compat works ........................$NL
_commercial_config > c
bk setup -f -cc --sccs-compat noremap || fail
cd noremap
# This should NOT be bk _test
test ! -f SCCS/s.ChangeSet && fail
test -w SCCS/s.ChangeSet || fail sfiles should be read-only
mkdir -p dir/subdir
touch dir/subdir/foo
bk new $Q dir/subdir/foo
mkdir -p dir/subdir2
touch dir/subdir2/foo
bk new $Q dir/subdir2/foo
bk commit $Q -y'add some files'
echo OK

echo $N Check that a frankenstein product checks ok .................$NL
cd "$HERE"
nested product
echo > "$HERE/empty"
cd ..
for i in 1 3 5 7 9
do
	bk setup --sccs-compat -fc"$HERE/empty" comp$i || fail
	mv comp$i product
	bk --cd=product attach -N $Q comp$i || fail
done
cd product
for i in 0 2 4 6 8
do
    bk setup -fc"$HERE/empty" comp$i
done
bk commit $Q -y'adding components'
_BK_DEVELOPER= bk -e -r check -ac || {
	echo failed
	exit 1
}
echo OK

echo $N Check populate follows product remapping state - remap ......$NL
cd "$HERE"
# I think the -sHERE should not be necessary but I might be in
# the minority.
bk clone -sHERE $Q product clone
cd clone
bk here rm $Q comp0 comp1
test -d comp0 -o -d comp1 || fail look at $PWD for comp0 and comp1
bk here add $Q comp0 comp1
test -d comp0/SCCS && {
	echo failed
	exit 1
}
test -d comp1/SCCS && {
	echo failed
	exit 1
}
echo OK

echo $N Check populate follows product remapping state - noremap ....$NL
cd "$HERE"
# I think the -sHERE should not be necessary but I might be in
# the minority.
bk clone --sccs-compat -sHERE $Q product clone2
cd clone2
bk here rm $Q comp0 comp1
test -d comp0 -o -d comp1 || fail look at $PWD for comp0 and comp1
bk here add $Q comp0 comp1
test ! -d comp0/SCCS && {
	echo failed
	exit 1
}
test ! -d comp1/SCCS && {
	echo failed
	exit 1
}
echo OK

cd "$HERE"
echo $N Verify that a clone from noremap to remap works .............$NL
bk clone $Q --hide-sccs-dirs noremap remap || fail
test -d remap/SCCS && {
	echo failed
	exit 1
}
echo OK

bk _getdir remap | grep -q '|?' || {
echo $N Verify check flags a file where a directory should be .......$NL
cd remap
rm -rf dir/subdir dir/subdir2
echo file > dir/subdir
echo file > dir/subdir2
bk repocheck > OUT 2>&1 && fail
grep -q "file 'dir/subdir' masks a directory with history" OUT || fail
# BUG: this one is not displayed, we die on the first
# grep -q "file 'dir/subdir2' masks a directory with history" OUT || fail
rm -rf dir/subdir dir/subdir2
echo OK
}

cd "$HERE"
echo $N Verify that a clone of noremap stays not remapped ...........$NL
bk clone $Q noremap noremap2 || fail
test -d noremap2/SCCS || fail
test -f noremap2/$FEATURES && {
	grep -q remap noremap2/$FEATURES && fail remap feature
}
rm -rf noremap2
echo OK

echo $N Verify that a clone from remap to noremap works .............$NL
test -f remap/$FEATURES || fail no feature file
grep -q remap remap/$FEATURES || fail no remap feature
bk clone --sccs-compat $Q remap noremap2 || fail
test -d noremap2/SCCS || {
	echo failed
	exit 1
}
test -f noremap2/$FEATURES && {
	grep -q remap noremap2/$FEATURES && fail remap feature
}
echo OK

echo $N Verify that a clone of remap stays remapped .........,.......$NL
bk clone $Q remap remap2 || fail
test -d remap2/SCCS && fail
test -f remap2/$FEATURES || fail no feature file
grep -q remap remap2/$FEATURES || fail no remap feature
rm -rf remap2
echo OK

rm -rf noremap2

bk bkd -aPORT -q -d -ikill || fail
P=`cat PORT`
trap "bk _kill bk://localhost:$P" 0

rm -rf remap
echo $N Verify that a rclone from noremap to remap works ............$NL
bk clone $Q --hide-sccs-dirs noremap bk://localhost:$P/remap || fail
test -d remap/SCCS && fail
test -f remap/$FEATURES || fail no feature file
grep -q remap remap/$FEATURES || fail no remap feature
echo OK

echo $N Verify that a rclone of noremap stays not remapped ..........$NL
bk clone $Q noremap bk://localhost:$P/noremap2 || fail
test -d noremap2/SCCS || fail
test -f noremap2/$FEATURES && {
	grep -q remap noremap2/$FEATURES && fail remap feature
}
rm -rf noremap2
echo OK

echo $N Verify that a rclone from remap to noremap works ............$NL
bk clone --sccs-compat  $Q remap bk://localhost:$P/noremap2 || fail
test -d noremap2/SCCS || fail
test -f noremap2/$FEATURES && {
	grep -q remap noremap2/$FEATURES && fail remap feature
}
echo OK

echo $N Verify that a rclone of remap stays remapped ................$NL
bk clone $Q remap bk://localhost:$P/remap2 || fail
test -d remap2/SCCS && fail
test -f remap2/$FEATURES || fail no feature file
grep -q remap remap2/$FEATURES || fail no remap feature
rm -rf remap2
echo OK

echo $N Verify that a RESYNC moved and moved back works .............$NL
cd product || fail
touch foo
bk new $Q foo
bk commit $Q -yfoo
cd ../clone || fail
bk pull $Q -R
bk _mv RESYNC RESYNC.save
bk _mv RESYNC.save RESYNC
bk resolve $Q -a || fail
echo OK

bk _kill bk://localhost:$P
trap "" 0

echo $N Check rmtree on remap does not try to rmdir the root.........$NL
# This would try to recurse too far backwards up .bk side of things.
# In windows, this could lead to trying to delete the dir we were in.
cd "$HERE"/remap
bk _rm -r dir || fail
bk _rm -r SCCS || fail
bk _rm -r BitKeeper || fail
test `ls | wc -l` -eq 0 || fail
echo OK
