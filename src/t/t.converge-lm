# Copyright 2000-2006,2009-2011,2013-2015 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Because we use tar xmf we don't check for timestamp errors here.
unset _BK_DEVELOPER

BK_YEAR2=1
BK_USER=user
BK_HOST=bk_regression.host.bk
ME=$BK_USER@$BK_HOST
export ME BK_USER BK_HOST BK_YEAR2
NUM=0
FILE=test$NUM

# Don't create gone in 'bk setup'
# (use fresh_commercial so this don't effect cache)
_BK_SETUP_NOGONE=1
export _BK_SETUP_NOGONE

echo $N Create repository ...........................................$NL
fresh_commercial project
echo OK

echo $N Add content to ignore, gone .................................$NL
bk ignore '*.o'
bk gone $Q 'A@b.com|I/am/bogus|19990101000000|12345|random'
bk commit $Q -ymeta-content
test `bk sfiles -p | wc -l` -eq 0 || {
	echo failed to commit all files
	bk sfiles -p
	exit 1
}
bk _test -f BitKeeper/etc/SCCS/s.ignore || { echo No ignore; exit 1; }
echo OK

echo $N Clone, add user content, resync, check copies ...............$NL
cd "$HERE"
bk clone $Q project copy
cd copy
ls > LS
bk new $Q LS
bk commit $Q -yuser-content
cd ../project
bk pull -R $Q ../copy
cd RESYNC || fail
bk _test -f BitKeeper/etc/SCCS/s.ignore && { echo Copied ignore; exit 1; }
cd ..
bk abort -f
echo OK

echo $N Create cset only conflict, check copies .....................$NL
date > date
bk new $Q date
bk commit $Q -ydate
bk pull -R $Q ../copy
cores
bk _test -f BitKeeper/etc/SCCS/s.ignore || { echo No ignore; exit 1; }
bk abort -f
echo OK

# add an entry to each of ignore, config,
# and gone, resync and make sure that we get the remote's version, not the
# parent's version.
for file in config ignore gone
do
    case $file in
	ignore)		FILE="  $file  ";;
	config)		FILE="  $file  ";;
	gone)		FILE="   $file   ";;
    esac
    echo $N "Change $FILE file, resync, make sure no gfile ..........$NL"
    cd "$HERE"
    rm -rf copy
    bk clone $Q project copy
    cd copy
    bk edit $Q BitKeeper/etc/$file
    echo "# XYXYXYXYXYXYXYXYXYXYXYXYXYXY" >> BitKeeper/etc/$file
    bk delta $Q -y'fake update' BitKeeper/etc/$file
    bk commit $Q -y'config test'
    cd "$HERE/project"
    bk pull -R $Q ../copy
    bk _test -f RESYNC/BitKeeper/etc/$file && {
	    # Could be OK, maybe BK checked it out
	    bk get -qkp ../copy/BitKeeper/etc/$file > C
	    cmp -s C RESYNC/BitKeeper/etc/$file || {
		    echo should not have used parent $file file
		    exit 1
	    }
    }
    bk _test -f RESYNC/BitKeeper/etc/SCCS/s.$file || {
	    echo failed to update $file file
	    exit 1
    }
    bk abort -f
    echo OK
done

echo $N Create repository, clone, make csets as same users ..........$NL
cd "$HERE"
rm -rf project copy
fresh_commercial project
cd ..
bk clone $Q project copy
cd project
bk gone $Q 'x@y|fff|19990319224848|02682'
bk commit $Q -ywhatever2 || fail
OLD=`bk -R prs -hr1.0 '-d:KEY:\n' BitKeeper/etc/gone`
cd ../copy
bk gone $Q 'x@y|copydd|19990319224848|02682'
bk commit $Q -ywhatever2 || fail
NEW=`bk -R prs -hr1.0 '-d:KEY:\n' BitKeeper/etc/gone`
if [ "$NEW" = "$OLD" ]
then	echo failed to make different keys
	echo "NEW: $NEW"
	echo "OLD: $OLD"
	exit 1
fi
echo OK
# Note that we are in the repository with the newer key in the slot.
echo $N Pull them, should not ask, should union, oldest in slot .....$NL
bk pull $Q ../project || fail
test -d RESYNC && {
	echo failed to use existing gone, left RESYNC
	cat OUT
	exit 1
}
KEY=`bk -R prs -hr1.0 '-d:KEY:\n' BitKeeper/etc/gone`
if [ "$NEW" = "$KEY" ]
then	echo failed to use older key
	exit 1
fi
echo OK

# the case where it is different users but the same timestamp.
# converge.c handles this, we need to test it with a test
# case which dummies up two inodes with different users but the same
# timestamp.

echo $N Create repository, clone, csets as diff users, same time_t ..$NL
cd "$HERE"
rm -rf project copy
fresh_commercial project
cd ..
bk clone $Q project copy
cd project
BK_USER=AAA
bk gone $Q 'x@y|project33|19990319224848|02682'
echo y > ../Y
bk commit $Q -ywhatever2 >/dev/null 2>&1 < ../Y
DATE=`bk -R prs -hr1.0 '-dD :I: :D: :T:\n' BitKeeper/etc/gone`
UTC=`bk -R prs -hr1.0 '-d:UTC:\n' BitKeeper/etc/gone`
cd ../copy
BK_USER=BBB
bk gone $Q 'x@y|copy55|19990319224848|02682'
bk commit $Q -ywhatever2 >/dev/null 2>&1 < ../Y
JUNK=`bk -R prs -hr1.0 '-dD :I: :D: :T:\n' BitKeeper/etc/gone`
J_UTC=`bk -R prs -hr1.0 '-d:UTC:\n' BitKeeper/etc/gone`
bk _scat BitKeeper/etc/SCCS/s.gone \
    | perl -pe "s|$JUNK BBB/|$DATE BBB/|" | bk undos > tmp
bk _mv tmp BitKeeper/etc/SCCS/s.gone
bk admin -z BitKeeper/etc/gone
# XXX sed doesn't need undos, just perl
bk _scat SCCS/s.ChangeSet \
    | sed "s?BitKeeper/etc/gone|$J_UTC?BitKeeper/etc/gone|$UTC?" \
    | bk undos > tmp
bk _mv tmp SCCS/s.ChangeSet
bk admin -z ChangeSet
bk checksum -f ChangeSet 2> /dev/null
bk -r check -a || fail
NEW=`bk -R prs -hr1.0 '-dD :I: :D: :T:\n' BitKeeper/etc/gone`
if [ "$NEW" != "$DATE" ]
then	echo failed to fix the dates
	echo "NEW: $NEW"
	echo "OLD: $DATE"
	exit 1
fi
echo OK

echo $N Pull them, should not ask, should union, oldest in slot .....$NL
cd "$HERE"
tar cf SAVE project copy
cd copy
bk pull $Q ../project || fail
test -d RESYNC && {
	echo failed to use existing gone, left RESYNC
	exit 1
}
KEY=`bk -R prs -hr1.0 '-d:USER:\n' BitKeeper/etc/gone`
if [ "$KEY" != AAA ]
then	echo failed to use older key
	exit 1
fi
SFILE=`bk sfiles BitKeeper/deleted`
KEY=`bk -R prs -hr1.0 '-d:USER:\n' $SFILE`
if [ "$KEY" != BBB ]
then	echo failed to delete younger key
	exit 1
fi
echo OK

echo $N Pull opposite direction, want same result ...................$NL
cd "$HERE"
rm -rf project copy
tar xmf SAVE 
cd project
bk pull $Q ../copy || fail
test -d RESYNC && {
	echo failed to use existing gone, left RESYNC
	exit 1
}
bk _test -f BitKeeper/etc/SCCS/s.gone || {
	echo failed to restore gone
	exit 1
}
KEY=`bk -R prs -hr1.0 '-d:USER:\n' BitKeeper/etc/gone`
if [ "$KEY" != AAA ]
then	echo failed to use older key, got $KEY
	bk -R prs -nd:USER: BitKeeper/etc/gone
	exit 1
fi
SFILE=`bk sfiles BitKeeper/deleted`
KEY=`bk -R prs -hr1.0 '-d:USER:\n' $SFILE`
if [ "$KEY" != BBB ]
then	echo failed to delete younger key
	exit 1
fi
echo OK

echo $N Create repository ...........................................$NL
cd "$HERE"
rm -rf project copy
fresh_commercial project
echo OK

echo $N Force cset derived root key, clone ..........................$NL
BK_USER=user
BK_HOST=bk_regression.host.bk
cd BitKeeper/etc
bk _scat ../../SCCS/s.ChangeSet | perl -ne 's,cPChangeSet,cPBitKeeper/etc/gone,; print unless /^.cC$/ || /^.cS/ || /^.cX/ || /^.f x 0x/;' | bk undos > X
bk _mv X SCCS/s.gone
bk admin -z gone
bk stripdel $Q -r1.0.. gone
bk gone $Q 'x@y|project44|19990319224848|02682'
bk commit $Q -ywhatever >/dev/null 2>&1 < "$HERE"/Y
KEY=`bk -R prs -hr1.0 '-d:KEY:\n' BitKeeper/etc/gone`
cd "$HERE"
bk clone $Q project copy
echo OK

echo $N Create changesets as two different users ....................$NL
cd project
BK_USER=joe
BK_HOST=blow.dork.bk_regression.bk
export BK_USER BK_HOST
bk gone $Q 'x@y|project34|19990319224848|02682'
bk commit $Q -ywhatever2 >/dev/null 2>&1 < ../Y
KEY2=`bk -R prs -hr1.0 '-d:KEY:\n' BitKeeper/etc/gone`
if [ "$KEY" != "$KEY2" ]
then	echo failed to leave original gone file
	exit 1
fi

cd "$HERE/copy"
BK_USER=jane
BK_HOST=kick.dork.bk_regression.bk
export BK_USER BK_HOST
bk gone $Q 'x@y|copy34|19990319224848|02682'
bk commit $Q -ywhatever2 >/dev/null 2>&1 < ../Y
KEY2=`bk -R prs -hr1.0 '-d:KEY:\n' BitKeeper/etc/gone`
if [ "$KEY" != "$KEY2" ]
then	echo failed to leave original gone file
	exit 1
fi
echo OK

echo $N Pull, make sure it deletes the OK file and creates new one ..$NL
bk pull $Q ../project
KEY2=`bk -R prs -hr1.0 '-d:KEY:\n' BitKeeper/etc/gone`
if [ "$KEY" != "$KEY2" ]
then	echo failed to keep original gone file
	exit 1
fi
sort <<EOF > X
x@y|copy34|19990319224848|02682
x@y|project34|19990319224848|02682
x@y|project44|19990319224848|02682
EOF
bk undos X > DATA
bk get $Q BitKeeper/etc/gone
cmpfiles BitKeeper/etc/gone DATA
echo OK

# Create a logging repository, clone, commit in both, 
# in clone unlink logging OK, add to gone file
# but do not commit it, and pull into parent.
# The try it with a push.
echo $N Create repo, clone, commit in both and save .................$NL
cd "$HERE"
rm -rf project copy
fresh_commercial project
cd ..
bk clone $Q project copy
cd project
bk gone $Q 'x@y|project34|19990319224848|02682'
BK_USER=jane
BK_HOST=kick.dork.bk_regression.bk
bk commit -yjane $Q > /dev/null 2>&1 < ../Y
bk _test -f BitKeeper/etc/SCCS/s.gone || fail
test `bk sfiles -p | wc -l` -eq 0 || {
	echo failed to commit all files
	bk sfiles -p
	exit 1
}
cd "$HERE/copy"
BK_USER=joe
BK_HOST=blow.dork.bk_regression.bk
bk gone $Q 'x@y|copy34|19990319224848|02682'
bk commit -yjoe $Q > /dev/null 2>&1 < ../Y
bk _test -f BitKeeper/etc/SCCS/s.gone || fail
test `bk sfiles -p | wc -l` -eq 0 || {
	echo failed to commit all files
	bk sfiles -p
	exit 1
}
cd "$HERE"
tar cf TAR project copy
echo OK

# Should not create two copies of the old logging OK, it should move the
# old one back and delete the new one.
echo $N In clone, rm gone, commit a new one, pull ...................$NL
cd "$HERE"
rm -rf project copy
tar xmf TAR
cd "$HERE/project"
CNT=`bk -r prs -hr1.0 -d'$if(:DPN:=BitKeeper/etc/gone){F\n}' | wc -l`
if [ $CNT != 1 ]
then	echo wrong number of gone files in PROJECT
	exit 1
fi
cd "$HERE/copy"
OLD=`bk -R prs -hr1.0 '-d:KEY:\n' BitKeeper/etc/gone`
CNT=`bk -r prs -hr1.0 -d'$if(:DPN:=BitKeeper/etc/gone){F\n}' | wc -l`
if [ $CNT != 1 ]
then	echo wrong number of gone files in COPY
	exit 1
fi
bk rm -f BitKeeper/etc/gone
bk gone $Q 'x@y|copy44|19990319224848|02682'
bk commit $Q -yrm-gone || fail
NEW=`bk -R prs -hr1.0 '-d:KEY:\n' BitKeeper/etc/gone`
if [ "$NEW" = "$OLD" ]
then	echo failed to move gone into deleted slot and create new one
	exit 1
fi
BK_USER=jerk
BK_HOST=blow.dork.bk_regression.bk
bk pull $Q ../project >/dev/null 2>&1 < ../Y
test -d RESYNC && {
	echo failed, left RESYNC
	exit 1
}
# Should be 3, the original 2 and the new one after the rm.
CNT=`bk -r prs -hr1.0 -d'$if(:DPN:=BitKeeper/etc/gone){F\n}' | wc -l`
if [ $CNT != 3 ]
then	echo wrong number of gone files after pull
	bk -r prs -hr1.0 -d'$if(:DPN:=BitKeeper/etc/gone){:ROOTKEY:\n}'
	exit 1
fi
OK=`bk prs -hr1.0 '-d:TIME_T:\n' BitKeeper/etc/gone`
sort <<EOF > DATA
x@y|copy44|19990319224848|02682
x@y|project34|19990319224848|02682
EOF
bk get -kp $Q BitKeeper/etc/gone | bk sort > GOT
cmpfiles GOT DATA
echo OK

# Rick's tests

F=BitKeeper/etc/ignore

echo $N Duplicate line in the same file .............................$NL
cd "$HERE"
rm -rf project copy
fresh_commercial project
cd ..
bk clone $Q project copy
# for next test, make a second copy
bk clone $Q project copy2
cd project
bk edit $Q $F
echo wild >> $F
bk delta $Q -ywild $F
bk commit $Q -ywild
cd ../copy
bk edit $Q $F
echo wild >> $F
bk delta $Q -ywild $F
bk commit $Q -ywild
bk pull $Q  || fail
cat <<EOF > WANT

wild
EOF
bk get $Q $F
checkfiles WANT $F
echo OK

echo $N Duplicate line in the different files .......................$NL
cd ../copy2
bk get $Q -kp $F > x
bk rm -f $F
mv x $F
echo wild >> $F
bk new $Q -ywild $F
bk commit $Q -ywild
bk pull -R $Q || fail
bk abort -f
bk -r check -ac || fail
bk pull $Q || fail
cat <<EOF > WANT

wild
EOF
bk get $Q $F
checkfiles WANT $F
echo OK

echo $N Push on the rename logic in converge:merge ..................$NL
cd "$HERE"/copy
bk unpull $Q -fs
bk tag $Q SPOT
# This puts a local rename on the branch where the converge process
# doesn't see it because the remote name is the trunk name.
# in merge() the get -M uses the gfile name and the ci uses the gfile
# name and the delete gets lost.
bk rm -f $F
bk commit $Q -ydel
bk pull $Q || fail
# The file has been deleted -- it shouldn't be here
test -f $F || {
	echo fix test
	exit 1
}
echo "failed (bug with name handling)"

echo $N Push on the logic in converge:converge ......................$NL
bk undo $Q -sfaSPOT
cd ../project
bk rm -f $F
echo wild >> $F
bk new $Q $F
bk commit $Q -ydel
cd ../copy
bk pull $Q  || fail
echo OK
